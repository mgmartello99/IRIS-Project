//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Attuatore"
	Revision           = "0.0"
	GUID               = "{BECD8CA4-2466-4C56-BDA8-3EFC1D128871}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	DefCyclictime      = "100 ms"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(676,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{155D067A-057D-4DF6-ADB1-BFDBC7261C22}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="s_Solenoid_Command" GUID="{4F446AE8-6C52-4ABA-8059-CC6DE1A3539E}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_Solenoid_Status" GUID="{3F92EFE1-F665-4CD1-9093-DDB688DC7A8F}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_State" GUID="{D3D4136E-4939-40BB-A6B3-44C5946B89EA}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="R_aus_1" Required="true" Internal="false"/>
		<Client Name="R_aus_2" Required="true" Internal="false"/>
		<Client Name="R_p" Required="true" Internal="false"/>
	</Channels>
</Class>
*)
Attuatore : CLASS
	TYPE
	  t_fsm_actuator :  //! <Type Public="true" Name="t_fsm_actuator"/>
	  (
	    idle,
	    Push,
	    Pull
	  )$UDINT;
	END_TYPE
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	s_Solenoid_Command 	: SvrCh_DINT;
	s_State 	: SvrCh_DINT;
	s_Solenoid_Status 	: SvrCh_DINT;
  //Clients:
	R_p 	: CltCh_DINT;
	R_aus_1 	: CltCh_DINT;
	R_aus_2 	: CltCh_DINT;
  //Variables:
		fsm_step 	: t_fsm_actuator;
		Tempo 	: DINT;
		Status 	: BOOL;
		Command 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION GLOBAL SetSequenceState
		VAR_INPUT
			Param 	: t_fsm_actuator;
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;
		END_VAR;
	
	FUNCTION GLOBAL GetActuatorStatus
		VAR_OUTPUT
			ActuatorStatus 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_Solenoid_Command::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_State::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Attuatore::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_ATTUATORE
0$UINT, 0$UINT, (SIZEOF(::Attuatore))$UINT, 
4$UINT, 3$UINT, 0$UINT, 
TO_UDINT(2706637582), "Attuatore", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Attuatore.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::Attuatore.s_Solenoid_Command.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4244417637), "s_Solenoid_Command", 
(::Attuatore.s_State.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3765203232), "s_State", 
(::Attuatore.s_Solenoid_Status.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1243697658), "s_Solenoid_Status", 
//Clients:
(::Attuatore.R_p.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3325113251), "R_p", 
(::Attuatore.R_aus_1.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1337574115), "R_aus_1", 
(::Attuatore.R_aus_2.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3601896281), "R_aus_2", 
END_FUNCTION


#define USER_CNT_Attuatore 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Attuatore] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Attuatore::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_Attuatore, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
	vmt.CmdTable.CyWork		:= #CyWork();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_Solenoid_Command.pMeth			:= StoreMethod( #s_Solenoid_Command::Read(), #M_WR_DIRECT() );
	IF s_Solenoid_Command.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_State.pMeth			:= StoreMethod( #s_State::Read(), #M_WR_DIRECT() );
	IF s_State.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_Solenoid_Status.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF s_Solenoid_Status.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL Attuatore::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR

 Command:=s_Solenoid_Command.Read();
 s_Solenoid_Status.Write(input:=Status);
 
 if Command=0 then
    fsm_step:=idle;
 elsif Command=1 then
    fsm_step:=Push;
 elsif Command=2 then
    fsm_step:=Pull;
 end_if;

 
case fsm_step of

  Idle://Idle
  Tempo:=0;
  //Status:=2; //Idle
  
  Push: //ESTRATTO
      Tempo:=Tempo+100;
      
      if Tempo=1000 then
         R_aus_1.Write(input:=1);
      end_if;
        
      if Tempo=1500 then
        R_aus_1.Write(input:=0);
        Status:=1; //pushed
        fsm_step:=Idle;
        Tempo:=0;
        Command:=3;
        s_Solenoid_Command.Write(input:=3);
      end_if;
  
  Pull: //RETRATTO
      Tempo:=Tempo+100;
      
      IF R_aus_1=0 & Tempo=1000 THEN
        R_p.Write(input:=1);        
      END_IF;
      
      if R_aus_1=0 & Tempo=1500 then
         R_aus_2.Write(input:=1);
      end_if;

      
      if tempo=2500 then
        R_aus_2.Write(input:=0);
        R_p.Write(input:=0);
        Status:=0; //pulled
        Tempo:=0;
        fsm_step:=Idle;
        Command:=3;
        s_Solenoid_Command.Write(input:=3);
      end_if;

  

  end_case;




	state := READY;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Attuatore::Init
Tempo:=0;
Command:=3;
Status:=FALSE; // false->pulled || true->pushed



END_FUNCTION


FUNCTION GLOBAL Attuatore::SetSequenceState
	VAR_INPUT
		Param 	: t_fsm_actuator;
	END_VAR
	VAR_OUTPUT
		retcode 	: DINT;
	END_VAR
  
  fsm_step:=Param;
  if fsm_step=Push then
    s_Solenoid_Command.Write(input:=1);
  elsif fsm_step=Pull then
    s_Solenoid_Command.Write(input:=2);
  end_if;
  retcode:=TRUE;

END_FUNCTION


FUNCTION GLOBAL Attuatore::GetActuatorStatus
	VAR_OUTPUT
		ActuatorStatus 	: DINT;
	END_VAR
  ActuatorStatus:=Status;
END_FUNCTION


FUNCTION VIRTUAL GLOBAL Attuatore::s_Solenoid_Command::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	output := s_Solenoid_Command;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Attuatore::s_State::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	output := s_State;

END_FUNCTION
