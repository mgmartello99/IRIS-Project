 /* $$!FNOTE 10 */
/****************************************************************************/
/*                                                                          */
/*  File: RTOS_CGlobals.H                                                   */
/*  Date: June 14, 2000                                                     */
/*  By: THR                                                                 */
/*  Description:                                                            */
/*		This file contains definitions found in RTOS_Globals.H for ST		*/
/*		files.  The file also contains items generated by LASAL in the		*/
/*		Globals.H for ST files.  THIS FILE MUST BE UPDATED IF EITHER OF		*/
/*		THESE TWO FILES ARE MODIFIED.										*/
/*  Revision History:                                                       */
/*      Rev     By      Date        Description                             */
/*      ---     --      ----        -----------                             */
/*      1.00    THR     6/14/00     Initial Version                         */
/*                                                                          */
/****************************************************************************/
/* $$!ENDCMD */
#pragma once
#define _RTOS_CGLOBALS_H_

// Pack structures for "C" for 4 byte alignment
// (5/8/01 THR)
#pragma pack(push, 4)


//
//	Define some type definitions common to IEC-1131
//
typedef char			CHAR;
typedef unsigned char	USINT;
//typedef short          INT;
typedef unsigned short	_UINT;
typedef long			DINT;
typedef unsigned long	UDINT;
typedef unsigned short	BINT;
typedef unsigned long	DWORD;
typedef unsigned long	BDINT;
typedef unsigned long	HDINT;
typedef float			REAL;

typedef void			HwBase;

#ifndef TRUE
#define TRUE -1
#endif

#ifndef FALSE
#define FALSE 0
#endif


//
//	Define Various LASAL Definitions
//
#define TASK_LIST			// task lists are supported
#define NLNG		0xff	// maximum length of an identifier
#define SPC			0x20    // space character
#define TIME		1       // time base - 1 msec irqscan

//
//	Define LASAL Types for C
//
typedef void* PVOID;
typedef char* PCHAR;

//
//	Loader Configuration States
//
typedef enum {
	C_INIT,										 // start of initialization	
	C_RUNRAM,
	C_RUNROM,
	C_RUNTIME,
	C_READY,
	C_OK,
	C_UNKNOWN_CID,
	C_UNKNOWN_CONSTR,
	C_UNKNOWN_OBJECT,
	C_UNKNOWN_CHNL,
	C_WRONG_CONNECT,
	C_WRONG_ATTR,
	C_SYNTAX_ERROR,
	C_NO_FILE_OPEN,
	C_OUTOF_NEAR,
	C_OUTOF_FAR,
	C_INCOMPATIBLE,		// object with the same name already exists, but has a different class
	C_COMPATIBLE, 	 	// object with the same name and class already exists, has to be updated
	C_DESTRUCTORS,		// when passed to main, the destructors of static C-objects are called
	C_INVALID_CHNL,		// client channels must not be used in IPRs
	C_SYSTEM_ERROR,		// system error
	C_EXIT,			      // exit the application
	C_SYSINIT,			  // loader initialization
  C_SYSOK,          // run system cyclic work (no application available)
	C_SYSEXIT,			  // exit the loader
} CONFSTATES;

#pragma pack(pop)

#pragma pack(push, 1)
typedef struct
{
	_UDINT udCRC 	;
	char [1] Text;
} CLexem;

typedef struct
{
	_UINT hi, lo;
} REVISION;

#pragma pack(push, 1)
typedef struct
{
	_UINT ClsType;
	REVISION udRev;
	_UINT lObj;
	_UINT nSvrChs;
	_UINT nCltChs;
	_UINT reserver;
	CLexem Name;
} CLSHDRCONST;
#pragma pack (pop)

//
//	LASAL Class Header Structure
//
typedef struct
{
//		cGUID ID;
	CLSHDRCONST * pDsc;

	// flags for class-type field, constant names are TY_<class-name>
	// see CT_-tables
	#define  UPD_AUTOMATIC   0x8000  // objects of this class are automatically updated
	#define  UPD_PRESCAN     0x4000  // 1..during prescan, 0.. during postscan
	#define  UPD_HIPRIOR     0x2000  // 1..with high priority (1 ms), 0..10 ms

	#define  CTY_HW_CLASS    0x0004	// the class is a hardware class
	#define  CTY_USERCLASS   0x0002  // the class was not developed by Sigmatek
	#define  CTY_NEWEST_CLS  0x0001  // this is the latest version of the class

	// definition of what high and low priority mean
	#define  UPD_T_HIPRIOR   1  // ms   // short intervall for automatic update
	#define  UPD_T_LOPRIOR   10 // ms   // long  intervall for automatic update

	_UINT nObjs;        // nr of objects
	void* pNxtCls;		// pointer to next CLSHDR in list
	PVOID pBaseCls;
	void* pFirstObj;	// pointer to 1st object of class (^OBJ)
	void* pLastObj;		// faster access
	PVOID pConstructor;
	_UINT ClsState;

} CLSHDR;


#pragma pack(pop)

#pragma pack(push, 4)

//
// object descr for search by name (far memory)
// 02/02/01: Updated CRC entry from _UINT to UDINT to match LASAL change.
//
typedef struct
{
	BINT Flags;			// Flag word
		#define Embedded 0x01	// Set if object is embedded
	#ifdef OP_IS_AN_OBJECT
		// THR: Not currently used
		// SymName                       : ARRAY [0..OP_OBJ_NLNG-1] OF CHAR;
	#else
		// SymName                       : ARRAY [0..0] OF CHAR;
	#endif
} OBJDSC;


//
//	Basic Object Structure
//
typedef struct
{
	CLSHDR* pClsHdr;	// to header for this class
	void* pNxtObj;		// Next obj for this class
	OBJDSC* pObjDsc;	// points to descriptor
} OBJ;

//
//	Used to store size (no. entries) of a command table
//
typedef DINT CMDMETHSIZE;

//
// struct of a server channel (Rd,Wr)
//
typedef struct
{
	void* pRd;		// Pointer to Read function
	void* pWr;		// Pointer to Write functions
	void* pNxt;		// Pointer to next command table in OS list (^CHMETH)
} CHMETH;


//
// minimum structure of a command meth table
//
typedef struct
{
	void* Read;
	void* Write;
	void* pNxt;			// pointer to next tbl in OS list (^CMDMETH)
	CMDMETHSIZE nCmds;  // nr of following cmds
	void* Init;         // initialise
	void* CyWork;       // entry for cyclic work
	void* RtWork;       // entry for Reatime WOrk
	void* NewInstr;     // enter new comands
	void* Kill;         // kill actual action
	void* GetState;     // get state of function
	void* BackCheck;	// (not currently used ???)
	void* optMeth1;		// start of any optional entries)
} CMDMETH;


//
// command table per class or per object
//
typedef enum {
	  SHARED,
	  EXCLUSIVE
} CMDMETHMODE;


//
//	Server Channel Descriptor
//


//
// server channel basic structure
//
typedef struct
{
	CHMETH* pMeth;		// pointer to method table
	DINT dData;			// Server "data store"
	SVRDSC* pSvrDsc;	// Pointer to server channel descriptor
} SVRCH;

//
//	Command Server structure (always the very first channel)
//
typedef struct
{
	CMDMETH* pMeth;		// pointer to method table
	DINT dData;			// Server "data store"
	SVRDSC* pSvrDsc;	// Pointer to server channel descriptor
} SVRCHCMD;


//
//	Basic Object Structure with its Command Server
//
typedef struct
{
	CLSHDR* pClsHdr;	// to header for this class
	void* pNxtObj;		// Next obj for this class
	OBJDSC* pObjDsc;	// points to descriptor
	SVRCHCMD CmdSvr;	// command server
} OBJCMDSVR;


//
//	Client Channel Types
//	(was a $UDINT enum - for C changed to UDINT with equates THR)
//
typedef UINT CHMODE;
#define _CH_OBJ			0
#define _CH_CMD			1
#define _CH_SVR			2
#define _CH_CLT_CMD		3
#define _CH_CLT_DATA	4
#define _CH_CLT_OBJ		5
#define _CH_OBJ_DIR		6
#define _CH_CNST		7
#define _CH_NONE		8
#define _CH_CLT_EMB		9
#define _CH_SVR_OBJ		10



//
//	Structure of a Client Channel Descriptor Entry
//	02/02/01: THR, Changed uiCRC to UDINT udCRC to match LASAL change.
//


//
//	Basic Client Channel Structure
//
typedef struct
{
	SVRCH* pCh;			// Pointer to server channel connection (any server)
	DINT dData;			// Local client "data store"
	SVRCHCMD* pCmd;		// Pointer to server command channel
} CLTCH;


//
//	Client Connection to Main Server Command Channel
//
typedef struct
{
	SVRCH* pCh;			// Pointer to server COMMAND channel connection
	DINT dData;			// Local client "data store"
	SVRCHCMD* pCmd;		// Pointer to server command channel
} CLTCHCMD;




#pragma pack(pop)

// maximum number of DINT-parameters for one command
#define MAXCMDPARA       20

// This bit can be set in the command UINT of the CmdStruct
// that is passed to the NewInst()-method.
// The interpreter will keep a pointer to the 'parallel'
// object, and call a Kill() when the interpreter is stopped.
// Every sequential command will remove the object pointer
// from the interpreter list.

#define PARALLEL_CALL	16#8000	

// *************************************************************************
//			data types for interpreter operations
// *************************************************************************


#pragma pack(push, 1)
	// structure of a command for an object,
	// these commands are executed by calling the NewInstr
	// of the respective class, and a pointer to such a 
	// structure is passed to the function
typedef struct
{
	_UINT uiCmd;
	DINT aPara[MAXCMDPARA-1];
}CmdStruct;

typedef struct
{
	_UINT uiLng;
	USINT aData[0xFF-sizeof(_UINT)];
}results;

typedef enum
{
  iprREADY,		// interpreter command processed
  iprERROR,		// i.e. wrong parameters
  iprERROR_BUSY,	// i.e. stopping movement
  iprBUSY,			// interpreter command processing
  iprQUIT
}iprStates;

#pragma pack(pop)


