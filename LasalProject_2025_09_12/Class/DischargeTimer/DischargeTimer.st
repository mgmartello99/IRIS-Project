//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "DischargeTimer"
	Revision           = "0.0"
	GUID               = "{7EA250F8-C3C2-48BA-8A8C-AE98A3758302}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	DefCyclictime      = "100 ms"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(530,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{90CB66CC-59DA-473D-A4A5-85877E8D96AC}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="s_DisTimer1" GUID="{077D80E3-BF98-4496-862A-4DBE382EDF54}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_DisTimer2" GUID="{82A39F4F-BD46-4449-8F49-13AA1558CE52}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_DisTimer3" GUID="{2A957CE0-9F2F-444C-BCBA-467034667751}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_Reset" GUID="{43E6F859-7D23-446C-B56D-7C455961F26F}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_StartStopTimer" GUID="{4D6191F2-D56B-4AA2-B426-98757EB374F8}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="c_SysDate" Required="true" Internal="false"/>
		<Client Name="c_SysTime" Required="true" Internal="false"/>
		<Client Name="c_timer" Required="true" Internal="false"/>
	</Channels>
</Class>
*)
DischargeTimer : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	s_StartStopTimer 	: SvrCh_DINT;
	s_DisTimer1 	: SvrCh_DINT;
	s_DisTimer2 	: SvrCh_DINT;
	s_DisTimer3 	: SvrCh_DINT;
	s_Reset 	: SvrCh_DINT;
  //Clients:
	c_timer 	: CltChCmd_TimeDateLib;
	c_SysDate 	: CltCh_DINT;
	c_SysTime 	: CltCh_TIME_LSL;
  //Variables:
		v_hd_Date 	: HDINT;
		v_hd_Time_1 	: HDINT;
		v_day 	: UDINT;
		v_month 	: UDINT;
		v_year 	: UDINT;
		v_hd_Time_2 	: HDINT;
		case_Time 	: DINT;
		v_tot_seconds 	: DINT;
		v_tot_minutes 	: DINT;
		a 	: DINT;
		i 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd TimeDateLib


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB DischargeTimer::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_DISCHARGETIMER
0$UINT, 0$UINT, (SIZEOF(::DischargeTimer))$UINT, 
6$UINT, 3$UINT, 0$UINT, 
TO_UDINT(1642197576), "DischargeTimer", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::DischargeTimer.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::DischargeTimer.s_StartStopTimer.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(22117594), "s_StartStopTimer", 
(::DischargeTimer.s_DisTimer1.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1641361173), "s_DisTimer1", 
(::DischargeTimer.s_DisTimer2.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4175199919), "s_DisTimer2", 
(::DischargeTimer.s_DisTimer3.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2413514297), "s_DisTimer3", 
(::DischargeTimer.s_Reset.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(325196950), "s_Reset", 
//Clients:
(::DischargeTimer.c_timer.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1324474639), "c_timer", TO_UDINT(1512043018), "TimeDateLib", 1$UINT, 1$UINT, 
(::DischargeTimer.c_SysDate.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1985007834), "c_SysDate", 
(::DischargeTimer.c_SysTime.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3009052645), "c_SysTime", 
END_FUNCTION


#define USER_CNT_DischargeTimer 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_DischargeTimer] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION DischargeTimer::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_DischargeTimer, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
	vmt.CmdTable.CyWork		:= #CyWork();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_StartStopTimer.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF s_StartStopTimer.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_DisTimer1.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF s_DisTimer1.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_DisTimer2.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF s_DisTimer2.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_DisTimer3.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF s_DisTimer3.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_Reset.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF s_Reset.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL DischargeTimer::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR


  //READ ACTUAL TIME AND DATE FROM CLIENTS; shr for shift bits
  //v_hd_Date := c_SysDate.Read();
  //v_hd_Time_1 := c_SysTime.Read();
  
  ///v_seconds_1 := (v_hd_Time_1 AND 16#0000FF00) shr 8;
  //v_minutes_1 := (v_hd_Time_1 AND 16#00FF0000) shr 16;
  //v_hours_1   := (v_hd_Time_1 AND 16#FF000000) shr 24;
  
  //v_day     := (v_hd_Date AND 16#00000FF0) shr 4;
  //v_month   := (v_hd_Date AND 16#0000F000) shr 12;
  //v_year    := (v_hd_Date AND 16#FFFF0000) shr 16;

  if s_Reset.Read() then
     s_DisTimer1.Write(input:=0);
     s_DisTimer2.Write(input:=0);
     s_DisTimer3.Write(input:=0);
     i:=0;
     case_Time:=0;
  end_if;
  
  case case_Time of
    
    0:
      if s_StartStopTimer.Read() then
        v_hd_Time_1 := c_SysTime.Read();  
        case_Time:=10;
      end_if;

    10:
      if s_StartStopTimer.Read()=0 then
        v_hd_Time_2 := c_SysTime.Read();
        case_Time:=20;
      end_if;

        
    20:
      v_tot_seconds := c_timer.TimeDiff(tim1:=v_hd_Time_2, tim2:=v_hd_Time_1);
      case_Time:=30;
      
    30:
      
      v_tot_minutes :=v_tot_seconds / 60; //minuti
      a := v_tot_seconds mod 60; //secondi
      i+=1;
      case_Time:=40;
        
     40:
      
      case i of
        0:
        
        1:
          s_DisTimer1.Write(input:=v_tot_seconds);
          case_Time:=0;
        2:
          s_DisTimer2.Write(input:=v_tot_seconds);
          case_Time:=0;
        3:
          s_DisTimer3.Write(input:=v_tot_seconds);
          case_Time:=50;
        
      end_case;
      
    50:

      
  end_case;

	state := READY;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL DischargeTimer::Init

END_FUNCTION
