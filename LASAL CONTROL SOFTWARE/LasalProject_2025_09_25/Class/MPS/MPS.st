//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "MPS"
	Revision           = "0.0"
	GUID               = "{C4DC2C63-CD65-4E5D-BEA5-A15872295825}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "true"
	DefBackground      = "100 ms"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(600,300)">
	<Channels>
		<Server Name="ClassSvr" GUID="{62ED4AD3-192C-4796-8827-AD5E6B3F2695}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="Ok_From_MPS" GUID="{E2DAB910-3FD6-4FDB-BD92-06D9EC7467A6}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="ReqToMPS" GUID="{5E2D6266-3035-4360-B85E-3A72519444D7}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_MPS_ACK" GUID="{9048FD65-0B67-44C0-889F-55FF97AF3B2E}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="ACKFromMPS" Required="true" Internal="false"/>
		<Client Name="c_ReqToMPS" Required="true" Internal="false"/>
		<Client Name="To_CameraAlignment_Power" Required="true" Internal="false"/>
		<Client Name="To_Manager_Motori" Required="true" Internal="false"/>
	</Channels>
</Class>
*)
MPS : CLASS
	TYPE
	  CaseMPS :  //! <Type Public="true" Name="CaseMPS"/>
	  (
	    MPS_Idle,
	    MPS_Ok_To_IRIS,
	    MPS_No_To_IRIS
	  )$UDINT;
	END_TYPE
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	ReqToMPS 	: SvrCh_DINT;
	Ok_From_MPS 	: SvrCh_CaseMPS_PTofCls_MPS;
	s_MPS_ACK 	: SvrCh_DINT;
  //Clients:
	To_Manager_Motori 	: CltCh_DINT;
	ACKFromMPS 	: CltCh_DINT;
	c_ReqToMPS 	: CltCh_DINT;
	To_CameraAlignment_Power 	: CltCh_DINT;
  //Variables:
		v_CaseMPS 	: CaseMPS;
		ACK 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ReqToMPS::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB MPS::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_MPS
0$UINT, 0$UINT, (SIZEOF(::MPS))$UINT, 
4$UINT, 4$UINT, 0$UINT, 
TO_UDINT(3487210139), "MPS", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::MPS.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::MPS.ReqToMPS.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2646591671), "ReqToMPS", 
(::MPS.Ok_From_MPS.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1134978557), "Ok_From_MPS", 
(::MPS.s_MPS_ACK.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2942131711), "s_MPS_ACK", 
//Clients:
(::MPS.To_Manager_Motori.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(688227429), "To_Manager_Motori", 
(::MPS.ACKFromMPS.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3837853919), "ACKFromMPS", 
(::MPS.c_ReqToMPS.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3278982572), "c_ReqToMPS", 
(::MPS.To_CameraAlignment_Power.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(736704750), "To_CameraAlignment_Power", 
END_FUNCTION


#define USER_CNT_MPS 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_MPS] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION MPS::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_MPS, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ReqToMPS.pMeth			:= StoreMethod( #ReqToMPS::Read(), #M_WR_DIRECT() );
	IF ReqToMPS.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Ok_From_MPS.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Ok_From_MPS.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_MPS_ACK.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF s_MPS_ACK.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL MPS::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
  
  //ACK:=ACKFromMPS.Read(); -> da togliere il commento quando bisogna utilizzare l'ingresso fisico
  s_MPS_ACK.Write(input:=ACK);
  
  if ReqToMPS.Read() then
    c_ReqToMPS.Write(input:=1);
  else
    c_ReqToMPS.Write(input:=0);
  end_if;
  
  if ACK then
    v_CaseMPS:=MPS_Ok_To_IRIS;
  else
    v_CaseMPS:=MPS_No_To_IRIS;
  end_if;


  
  case v_CaseMPS of
  
  MPS_Idle:
  
  MPS_Ok_To_IRIS:
  
    To_Manager_Motori.Write(input:=1);
    To_CameraAlignment_Power.Write(input:=600);//scrivo 600 -> maxCurrent al modulo st151 associato a M6
  //NON DISCOMMENTARE  //Ok_From_MPS.Write(input:=MPS_No_To_IRIS);//faccio questo passaggio altrimenti nel Manager_Motori Rimane la variabile a 1 
    
  MPS_No_To_IRIS:
  
    To_Manager_Motori.Write(input:=0);
   //NON DISCOMMENTARE //Ok_From_MPS.Write(input:=MPS_Idle);
    To_CameraAlignment_Power.Write(input:=0);//scrivo 0 -> maxCurrent al modulo st151 associato a M6
  end_case;


	state := READY;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MPS::ReqToMPS::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	output := ReqToMPS;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MPS::Init
ACK:=0;
END_FUNCTION
