//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES
#define DEVICE_ID_DI160 1024

//}}LSL_DEFINES

//{{LSL_DECLARATION

(*!
<Class
	Name               = "DI160"
	Revision           = "1.12"
	GUID               = "{9646B9C9-B35C-4B3E-86D8-4A36948F8380}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\s-dias.ico"
	SharedCommandTable = "true"
	Objectsize         = "(398,120)"
	Comment            = "This hardware class is used to control the DI160 hardware module with 16 digital inputs.">
	<Channels>
		<Server Name="Input1" GUID="{1A476AB0-45DF-4C72-9223-108E9E23BFCA}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 1 value"/>
		<Server Name="Input10" GUID="{3C4A6C84-7046-40D5-8D7F-0670E764B00E}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 10 value"/>
		<Server Name="Input11" GUID="{F43E223D-8A2A-48A5-A802-C930A9B18774}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 11 value"/>
		<Server Name="Input12" GUID="{E2D272EC-443B-4E7E-B6E2-F10DDAD4F9C8}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 12 value"/>
		<Server Name="Input13" GUID="{780EEDBA-0A5D-4D63-9221-5FBEC1E7B36B}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 13 value"/>
		<Server Name="Input14" GUID="{705CC74F-689A-41CA-8E16-835C2633C21F}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 14 value"/>
		<Server Name="Input15" GUID="{5F42D64D-0321-449B-B285-C0B402324C5B}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 15 value"/>
		<Server Name="Input16" GUID="{5D8DAD81-9B90-4927-80AD-BDCC890211FA}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 16 value"/>
		<Server Name="Input2" GUID="{73466885-C41B-489C-9A99-27AA510E07BC}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 2 value"/>
		<Server Name="Input3" GUID="{4B911962-CEF5-41A9-9ED7-847FE8E0D1B4}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 3 value"/>
		<Server Name="Input4" GUID="{0AE1AD7F-2DC1-4827-B376-DA00172BB280}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 4 value"/>
		<Server Name="Input5" GUID="{4939C74A-D281-4A53-8026-DE9E4B8D99DF}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 5 value"/>
		<Server Name="Input6" GUID="{DEA08B3A-E92A-419F-838A-9339B4F802C2}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 6 value"/>
		<Server Name="Input7" GUID="{A6D29BF8-DA33-4912-A67A-8A266ECED90B}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 7 value"/>
		<Server Name="Input8" GUID="{B2ED6151-79C0-4A28-B5C3-4D337B19348D}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 8 value"/>
		<Server Name="Input9" GUID="{30A869D9-3E20-4CE7-A8B4-B3DA546297D1}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Input 9 value"/>
		<Server Name="InputWord" GUID="{EAA92772-ED27-4429-8968-348383D087B3}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Bit 0 to 15 ... Input 1 to 16"/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek" Author="BeiWol"/>
		<Dokumentation Revision="1.12" Date="12.08.2019" Author="LazJos" Company="Sigmatek" Description="Added support for HWAlarms."/>
		<Dokumentation Revision="1.11" Date="09.01.2019" Author="FurDom" Company="Sigmatek" Description="Added function for Spi Write in SdiasBase class."/>
		<Dokumentation Revision="1.10" Date="08.06.2018" Author="RamAnd" Company="Sigmatek" Description="LASAL Hardware Description (.lhd) file has been updated."/>
		<Dokumentation Revision="1.9" Date="16.05.2017" Author="RamAnd" Company="Sigmatek" Description="When adding an SDO (i.e. via ReadSPIData) from background priority it was possible that the adding process got interrupted by receiving the answer to this SDO which is handled in cyclic priority. In the error case the answer was unexpected and therefore ignored. Then the class signals a timeout while waiting for the answer, which already arrived before waiting for it. Added mutex and changed instruction order to prevent this error."/>
		<Dokumentation Revision="1.8" Date="12.07.2016" Author="SeiChr" Company="Sigmatek" Description="Added Values for the total Current calculation. SA 31571"/>
		<Dokumentation Revision="1.7" Date="01.03.2016" Author="EisMic" Company="Sigmatek" Description="Corrected BoundExceed Error in base class at Write method of LEDControl Server when Place = LSL_DEACTIVATED."/>
		<Dokumentation Revision="1.6" Date="22.06.2015" Author="EisMic" Company="Sigmatek" Description="The servers FPGAVersion, SerialNo, Device ID and status and input servers are now not reset anymore when the module is disconnected."/>
		<Dokumentation Revision="1.5" Date="16.04.2015" Author="EisMic&#13;&#10;LanSte" Company="Sigmatek" Description="Added support for visualisation in graphical hardware editor.&#13;&#10;Added support for calculating resources for graphical hardware editor."/>
		<Dokumentation Revision="1.4" Date="17.03.2015" Author="RamAnd" Company="Sigmatek" Description="Added HW Version for sdias clients."/>
		<Dokumentation Revision="1.3" Date="11.02.2015" Author="PieSte" Company="Sigmatek" Description="Corrected read spi data for hardwaretree in methode GetSPIDataFromID from baseclass."/>
		<Dokumentation Revision="1.2" Date="18.11.2014" Author="PieSte" Company="Sigmatek" Description="Added possibility  to read more data from spi flash then one sdo access.&#13;&#10;Set methode GetDeviceID to global.&#13;&#10;Add methode to calculate checksum of spi flash."/>
		<Dokumentation Revision="1.1" Date="09.07.2014" Author="EisMic" Company="Sigmatek" Description="Added support for reading hardware diagnosis and hardwaretree entry."/>
		<Dokumentation Revision="1.0" Date="27.01.2014" Author="PieSte" Company="Sigmatek" Description="First library version"/>
	</RevDoku>
	<Network Name="DI160">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{3EF630A0-62D3-4172-B4F6-9F63651BA5ED}"
				Class      = "SdiasBase"
				Position   = "(218,120)"
				Visualized = "true">
				<Channels>
					<Server Name="ClassState"/>
					<Server Name="DeviceID"/>
					<Server Name="FPGAVersion"/>
					<Server Name="HwVersion"/>
					<Server Name="LEDControl" Value="0"/>
					<Server Name="RetryCounter"/>
					<Server Name="SDOState"/>
					<Server Name="SerialNo"/>
					<Client Name="Place" Value="0"/>
					<Client Name="Required" Value="1"/>
					<Client Name="SdiasIn"/>
					<Client Name="ToStdLib"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ClassState" Destination="_base.ClassState" Vertices="(804,210),(632,210),"/>
			<Connection Source="this.DeviceID" Destination="_base.DeviceID" Vertices="(804,270),(632,270),"/>
			<Connection Source="this.SerialNo" Destination="_base.SerialNo" Vertices="(804,450),(632,450),"/>
			<Connection Source="this.RetryCounter" Destination="_base.RetryCounter" Vertices="(804,510),(632,510),"/>
			<Connection Source="_base.SdiasIn" Destination="this.SdiasIn" Vertices="(218,210),(38,210),"/>
			<Connection Source="_base.Place" Destination="this.Place" Vertices="(218,270),(38,270),"/>
			<Connection Source="_base.Required" Destination="this.Required" Vertices="(218,330),(38,330),"/>
			<Connection Source="this.LEDControl" Destination="_base.LEDControl" Vertices="(804,570),(632,570),"/>
			<Connection Source="this.FPGAVersion" Destination="_base.FPGAVersion" Vertices="(804,330),(632,330),"/>
			<Connection Source="this.HwVersion" Destination="_base.HwVersion" Vertices="(804,390),(632,390),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using SdiasBase

DI160 : CLASS
: SdiasBase
  //Servers:
	Input1 	: SvrCh_DINT;
	Input2 	: SvrCh_DINT;
	Input3 	: SvrCh_DINT;
	Input4 	: SvrCh_DINT;
	Input5 	: SvrCh_DINT;
	Input6 	: SvrCh_DINT;
	Input7 	: SvrCh_DINT;
	Input8 	: SvrCh_DINT;
	Input9 	: SvrCh_DINT;
	Input10 	: SvrCh_DINT;
	Input11 	: SvrCh_DINT;
	Input12 	: SvrCh_DINT;
	Input13 	: SvrCh_DINT;
	Input14 	: SvrCh_DINT;
	Input15 	: SvrCh_DINT;
	Input16 	: SvrCh_DINT;
	InputWord 	: SvrCh_BDINT;
  //Clients:
  //Variables:
		pReadData 	: ^UINT;
  //Functions:
				//! <Function Comment="Realtime Update Methode which runs in PreScan." Name="UpdateRt"/>
	FUNCTION VIRTUAL GLOBAL UpdateRt;
				//! <Function Comment="Methode is called if this Module gets connected." Name="ConnectEvent"/>
	FUNCTION VIRTUAL GLOBAL ConnectEvent;
				//! <Function Comment="Methode is called if this Module gets disconnected." Name="DisconnectEvent"/>
	FUNCTION VIRTUAL GLOBAL DisconnectEvent;
				//! <Function Comment="This Methode should is used, to check the DeviceID of the Module." Name="CheckDeviceID"/>
	FUNCTION VIRTUAL GLOBAL CheckDeviceID
		VAR_INPUT
			udID2Check 	: UDINT;			//! <Variable Comment="Device ID of connected Module." Name="CheckDeviceID.udID2Check"/>
		END_VAR
		VAR_OUTPUT
			bIsOK 	: BOOL;			//! <Variable Comment="FALSE = Wrong DeviceID for Module&#13;&#10;TRUE  = DeviceID of Module is correct" Name="CheckDeviceID.bIsOK"/>
		END_VAR;
	
	FUNCTION VIRTUAL GetTaskCfg
		VAR_OUTPUT
			TaskCfg 	: BDINT;			//! <Variable Comment="Select which tasks will be available for this module:&#13;&#10;Bit0..Realtime PreScan&#13;&#10;Bit1..Realtime PostScan&#13;&#10;Bit2..Cyclic&#13;&#10;&#13;&#10;e.g. if only realtime postscan is needed:&#13;&#10;2#010" Name="GetTaskCfg.TaskCfg"/>
		END_VAR;
	
	FUNCTION VIRTUAL GetDeviceID
		VAR_OUTPUT
			output 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB DI160::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_DI160
1$UINT, 12$UINT, (SIZEOF(::DI160))$UINT, 
17$UINT, 0$UINT, 0$UINT, 
TO_UDINT(119615581), "DI160", //Class
TO_UDINT(3175101883), "SdiasBase", 1$UINT, 60$UINT, //Baseclass
//Servers:
(::DI160.Input1.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1344628668), "Input1", 
(::DI160.Input2.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3375117830), "Input2", 
(::DI160.Input3.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3190490768), "Input3", 
(::DI160.Input4.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(542085939), "Input4", 
(::DI160.Input5.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1464378277), "Input5", 
(::DI160.Input6.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3460428319), "Input6", 
(::DI160.Input7.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3108422281), "Input7", 
(::DI160.Input8.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(704241432), "Input8", 
(::DI160.Input9.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1593765774), "Input9", 
(::DI160.Input10.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(912000481), "Input10", 
(::DI160.Input11.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1096496503), "Input11", 
(::DI160.Input12.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3629278413), "Input12", 
(::DI160.Input13.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2941604955), "Input13", 
(::DI160.Input14.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(825344504), "Input14", 
(::DI160.Input15.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1178005870), "Input15", 
(::DI160.Input16.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3745489108), "Input16", 
(::DI160.InputWord.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3456773996), "InputWord", 
//Clients:
END_FUNCTION


#define USER_CNT_DI160 25

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_DI160] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION DI160::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= SdiasBase::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= SdiasBase::ClassState.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, SdiasBase::ClassState.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_DI160;
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #UpdateRt();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[5]		:= #ConnectEvent();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[6]		:= #DisconnectEvent();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[8]		:= #CheckDeviceID();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[13]		:= #GetTaskCfg();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[14]		:= #GetDeviceID();

#pragma warning (default : 74)
	SdiasBase::ClassState.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF SdiasBase::ClassState.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
FUNCTION VIRTUAL GLOBAL DI160::UpdateRt
  VAR
    inputMask : UINT;
    newInputs : UINT;
    pInputSrv : ^DINT;
  END_VAR

  newInputs := pReadData^;
  InputMask := InputWord$UINT xor newInputs; //old Input xor new Input (to see changes)
  
  if InputMask <> 0 then
    
    InputWord$DINT  := newInputs;
    pInputSrv         :=#Input1.Ddata;

    repeat
      if InputMask and 1 then
        pInputSrv^ := newInputs and 1;
      end_if;
      inputMask := inputMask shr 1;
      newInputs := newInputs shr 1;
      pInputSrv += sizeof(SvrCh);
    until inputMask = 0 end_repeat;
  end_if;  

END_FUNCTION


FUNCTION VIRTUAL GLOBAL DI160::CheckDeviceID
	VAR_INPUT
		udID2Check 	: UDINT;
	END_VAR
	VAR_OUTPUT
		bIsOK 	: BOOL;
	END_VAR
  
  //look if it is right hardware
	if ( udID2Check <> DEVICE_ID_DI160 ) then
		bIsOK := FALSE;
	else
    bIsOK := TRUE;
	end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL DI160::ConnectEvent

  // start the accesses on the SDIAS (initialize the control byte in the DPRAM)
  if DefaultAccesses.ReadAccess.pControlByte then
    pReadData := DefaultAccesses.ReadAccess.pData$^UINT;

    DefaultAccesses.ReadAccess.pControlByte^.EnableDO := TRUE;
  else
    eInitState := _DOHandleInvalid;
    return;
  end_if;

  // module is ok
  eInitState := _ClassOk;
 
END_FUNCTION


FUNCTION VIRTUAL DI160::GetTaskCfg
	VAR_OUTPUT
		TaskCfg 	: BDINT;
	END_VAR

  TaskCfg := SDIAS_TASK_MASK_RT_PRE;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL DI160::DisconnectEvent

  // reset general module information shown on servers
  SdiasBase::DisconnectEvent();

END_FUNCTION


FUNCTION VIRTUAL DI160::GetDeviceID
	VAR_OUTPUT
		output 	: UDINT;
	END_VAR
  
  output := DEVICE_ID_DI160;

END_FUNCTION
