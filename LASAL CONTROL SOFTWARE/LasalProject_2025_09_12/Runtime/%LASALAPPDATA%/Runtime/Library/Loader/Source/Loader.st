//#undef DUMMY_LOADER
#define DUMMY_LOADER

#ifdef DUMMY_LOADER

#pragma warning(disable:72) // '...' declared but never used
#pragma warning(disable:73) // Parameter '...' is never used
#pragma warning(disable:76) // Return value '...' is not defined
#pragma warning(disable:78) // Redefinition of '...'

#include "Code\comlink.st"
#include "Code\Efloat53.awl"
#include "Code\Float53.awl"
#include "Code\lib.awl"
#include "Code\Lookup.st"
#include "Code\main.st"
#include "Code\Mem.st"
#include "Code\Methlib.awl"
#include "Code\RTOS_Variables.st"
#include "Code\StdMeths.awl"
#include "Code\String.awl"
#include "Code\BefiprAWL.st"
#include "Code\Rtdb_lib.st"
#include "Code\Set_up.st"
#include "Code\FloatLib.st"
#include "Code\HashTab.st"

#include "Include\float_emu_config.h"
#include "MathBSD\dummy_loader.h"

VAR_GLOBAL
	pOsiMeths			: ^void;	// Zeiger auf die OS - Funktions-Tabellen
END_VAR

FUNCTION GLOBAL CLexem::Length
  VAR_OUTPUT
    udLen 	: UDINT;
  END_VAR
END_FUNCTION

// Globale Funktion aus dem ST-File der Klasse TaskReader
FUNCTION GLOBAL InstallTask END_FUNCTION

// Globale Funktion aus dem ST-File der Klasse ProjectReader
FUNCTION GLOBAL LDR_GetPrjInfo END_FUNCTION

// Globale Funktionen aus dem ST-File der Klasse IprMgr
FUNCTION GLOBAL IprMgr_GetInterpreter END_FUNCTION
FUNCTION GLOBAL IprMgr_KillProgs END_FUNCTION
FUNCTION GLOBAL IprMgr_StartLabel END_FUNCTION
FUNCTION GLOBAL IprMgr_SetMaxProgSeqDurationAll_ms END_FUNCTION
FUNCTION GLOBAL IprMgr_SetProgSeqCycleTime_ms END_FUNCTION
FUNCTION GLOBAL IprMgr_SetMaxNbrIprCmds END_FUNCTION

// Globale Funktionen aus dem ST-File der Klasse ProgMgr
FUNCTION GLOBAL ProgMgr_GetProgram END_FUNCTION
FUNCTION GLOBAL ProgMgr_GetProgramPtr END_FUNCTION
FUNCTION GLOBAL ProgMgr_CreateIprProg END_FUNCTION
FUNCTION GLOBAL ProgMgr_LoadIprProg END_FUNCTION
FUNCTION GLOBAL ProgMgr_LoadIprProg2 END_FUNCTION

// Globale Funktionen aus dem ST-File der Klasse ProgIp
FUNCTION GLOBAL ProgIp_GetHead END_FUNCTION
FUNCTION GLOBAL ProgIp_GetActLine END_FUNCTION
FUNCTION GLOBAL ProgIp_DeleteBreakpoint END_FUNCTION
FUNCTION GLOBAL ProgIp_StartProgram END_FUNCTION
FUNCTION GLOBAL ProgIp_StartProgramOfs END_FUNCTION
FUNCTION GLOBAL ProgIp_StopProgram END_FUNCTION
FUNCTION GLOBAL ProgIp_RunProgram END_FUNCTION
FUNCTION GLOBAL ProgIp_SetBreakpoint END_FUNCTION
FUNCTION GLOBAL ProgIp_MakeSingleStep END_FUNCTION
FUNCTION GLOBAL ProgIp_SetCodePointer END_FUNCTION
FUNCTION GLOBAL ProgIp_InitVariables END_FUNCTION
FUNCTION GLOBAL ProgIp_SetPrgHead END_FUNCTION
FUNCTION GLOBAL ProgIp_SetNextInstructionLabelNo END_FUNCTION
FUNCTION GLOBAL ProgIp_SetNextInstruction END_FUNCTION
FUNCTION GLOBAL ProgIp_SetInstructionToProgStart END_FUNCTION
FUNCTION GLOBAL ProgIp_SetMaxProgSeqDuration_ms END_FUNCTION
FUNCTION GLOBAL ProgIp_SetMaxNbrIprCmds END_FUNCTION
FUNCTION GLOBAL ProgIp_InstallIprCallback END_FUNCTION
FUNCTION GLOBAL ProgIp_GetProgsToLoad END_FUNCTION
FUNCTION GLOBAL ProgIp_GetSubStack END_FUNCTION

// Globale Funktionen aus dem ST-File der Klasse ClassReader
FUNCTION GLOBAL ClassReader_NewCls END_FUNCTION

// Globale Funktion aus dem ST-File der Klasse MMConnectionHandler

FUNCTION GLOBAL LDR_MM_StatNameGetNr
  VAR_INPUT
    pszName : ^CHAR;
  END_VAR
  VAR_OUTPUT
    udStationId : UDINT;
  END_VAR
END_FUNCTION
FUNCTION GLOBAL LDR_MM_StatNrGetName END_FUNCTION
FUNCTION GLOBAL LDR_MM_StatNrConnStop END_FUNCTION
FUNCTION GLOBAL LDR_MM_StatNrConnStart END_FUNCTION
FUNCTION GLOBAL LDR_MM_StatNrConnSetStr END_FUNCTION
FUNCTION GLOBAL LDR_MM_StatNrConnGetStr END_FUNCTION
FUNCTION GLOBAL LDR_MM_StatNrConnConfigStr END_FUNCTION
FUNCTION GLOBAL LDR_MM_StatNrIsConnected END_FUNCTION
FUNCTION GLOBAL LDR_MM_SvrIsConnected END_FUNCTION
FUNCTION GLOBAL LDR_MM_SvrGetHandle END_FUNCTION
FUNCTION GLOBAL LDR_MM_SvrGetNameFromHandle END_FUNCTION
FUNCTION GLOBAL LDR_MM_SvrGetHandleFromCmpName  END_FUNCTION
FUNCTION GLOBAL LDR_MM_SvrNewInst END_FUNCTION
FUNCTION GLOBAL LDR_MM_SvrGetState END_FUNCTION
FUNCTION GLOBAL LDR_MM_ReadSvr END_FUNCTION
FUNCTION GLOBAL LDR_MM_ReadSvrByHandle END_FUNCTION
FUNCTION GLOBAL LDR_MM_InstallCallback END_FUNCTION
FUNCTION GLOBAL LDR_MM_UserCallbackPrototyp END_FUNCTION
FUNCTION GLOBAL LDR_MM_SetWaitForReqTimeout END_FUNCTION
FUNCTION GLOBAL LDR_MM_AreAllReqInitialised END_FUNCTION

// Pruefung von Array Grenzen
FUNCTION GLOBAL OS_ISARRAYOUTOFBOUND 
VAR_INPUT
	ARG1		: DINT;
	ARG2		: DINT;
	ARG3		: DINT;
	ARG4		: UDINT;
END_VAR
END_FUNCTION

// Exception ausloesen
FUNCTION GLOBAL OS_RAISEEXCEPTION
VAR_INPUT
	ARG1		: UDINT;
END_VAR
END_FUNCTION

// Globale Funktionen für LREAL
FUNCTION GLOBAL DIAS_L_CMP END_FUNCTION
FUNCTION GLOBAL DIAS_L_SIN_GR END_FUNCTION
FUNCTION GLOBAL DIAS_L_SIN END_FUNCTION
FUNCTION GLOBAL DIAS_L_COS_GR END_FUNCTION
FUNCTION GLOBAL DIAS_L_COS END_FUNCTION
FUNCTION GLOBAL DIAS_L_TAN_GR END_FUNCTION
FUNCTION GLOBAL DIAS_L_TAN END_FUNCTION
FUNCTION GLOBAL DIAS_L_ASIN_GR END_FUNCTION
FUNCTION GLOBAL DIAS_L_ASIN END_FUNCTION
FUNCTION GLOBAL DIAS_L_ACOS_GR END_FUNCTION
FUNCTION GLOBAL DIAS_L_ACOS END_FUNCTION
FUNCTION GLOBAL DIAS_L_ATAN_GR END_FUNCTION
FUNCTION GLOBAL DIAS_L_ATAN END_FUNCTION
FUNCTION GLOBAL DIAS_L_SQRT END_FUNCTION
FUNCTION GLOBAL DIAS_L_LN END_FUNCTION
FUNCTION GLOBAL DIAS_L_LOG END_FUNCTION
FUNCTION GLOBAL DIAS_L_EXP END_FUNCTION
FUNCTION GLOBAL DIAS_L_XHY END_FUNCTION
FUNCTION GLOBAL DIAS_L_ABS END_FUNCTION
FUNCTION GLOBAL DIAS_L_RTOD END_FUNCTION
FUNCTION GLOBAL DIAS_L_UTOR END_FUNCTION
FUNCTION GLOBAL DIAS_L_DTOR END_FUNCTION
FUNCTION GLOBAL DIAS_L_FTOD END_FUNCTION
FUNCTION GLOBAL DIAS_L_SUB END_FUNCTION
FUNCTION GLOBAL DIAS_L_ADD END_FUNCTION
FUNCTION GLOBAL DIAS_L_MUL END_FUNCTION
FUNCTION GLOBAL DIAS_L_DIV END_FUNCTION
FUNCTION GLOBAL DIAS_L_OR END_FUNCTION
FUNCTION GLOBAL DIAS_L_XOR END_FUNCTION
FUNCTION GLOBAL DIAS_L_AND END_FUNCTION
FUNCTION GLOBAL DIAS_L_1DX END_FUNCTION
FUNCTION GLOBAL DIAS_L_NEG END_FUNCTION
FUNCTION GLOBAL DIAS_L_NOT END_FUNCTION
// gnu math functions

FUNCTION GLOBAL  ispos END_FUNCTION
FUNCTION GLOBAL  isposf END_FUNCTION
FUNCTION GLOBAL  exp END_FUNCTION
FUNCTION GLOBAL  expf END_FUNCTION
FUNCTION GLOBAL  fabs END_FUNCTION
FUNCTION GLOBAL  isnan END_FUNCTION
FUNCTION GLOBAL  isnanf END_FUNCTION
FUNCTION GLOBAL  frexp END_FUNCTION
FUNCTION GLOBAL  frexpf END_FUNCTION
FUNCTION GLOBAL  logarithmf END_FUNCTION
FUNCTION GLOBAL  logf END_FUNCTION
FUNCTION GLOBAL  logarithm END_FUNCTION
FUNCTION GLOBAL  log END_FUNCTION
FUNCTION GLOBAL  numtest END_FUNCTION
FUNCTION GLOBAL  numtestf END_FUNCTION
FUNCTION GLOBAL  ldexp END_FUNCTION
FUNCTION GLOBAL  ldexpf END_FUNCTION
FUNCTION GLOBAL  modff END_FUNCTION
FUNCTION GLOBAL  modf END_FUNCTION
FUNCTION GLOBAL  powf END_FUNCTION
FUNCTION GLOBAL  powd END_FUNCTION
FUNCTION GLOBAL  sine END_FUNCTION
FUNCTION GLOBAL  sin END_FUNCTION
FUNCTION GLOBAL  sinef END_FUNCTION
FUNCTION GLOBAL  sinf END_FUNCTION
FUNCTION GLOBAL  cos END_FUNCTION
FUNCTION GLOBAL  cosf END_FUNCTION
FUNCTION GLOBAL  tan END_FUNCTION
FUNCTION GLOBAL  asine END_FUNCTION
FUNCTION GLOBAL  asin END_FUNCTION
FUNCTION GLOBAL  acos END_FUNCTION
FUNCTION GLOBAL  atangent END_FUNCTION
FUNCTION GLOBAL  atan END_FUNCTION
FUNCTION GLOBAL  asinef END_FUNCTION
FUNCTION GLOBAL  asinf END_FUNCTION
FUNCTION GLOBAL  acosf END_FUNCTION
FUNCTION GLOBAL  atangentf END_FUNCTION
FUNCTION GLOBAL  atanf END_FUNCTION
FUNCTION GLOBAL  sqrt END_FUNCTION
FUNCTION GLOBAL  sqrtf END_FUNCTION


 
(* Arithmetic functions *)
#if _USE_SOFT_F32_ADD <> NO_IMPL
FUNCTION GLOBAL __addsf3 END_FUNCTION
#endif
#if _USE_SOFT_F64_ADD <> NO_IMPL
FUNCTION GLOBAL __adddf3 END_FUNCTION
#endif
#if _USE_SOFT_F32_SUB <> NO_IMPL
FUNCTION GLOBAL __subsf3 END_FUNCTION
#endif
#if _USE_SOFT_F64_SUB <> NO_IMPL
FUNCTION GLOBAL __subdf3 END_FUNCTION
#endif
#if _USE_SOFT_F32_MUL <> NO_IMPL
FUNCTION GLOBAL __mulsf3 END_FUNCTION
#endif
#if _USE_SOFT_F64_MUL <> NO_IMPL
FUNCTION GLOBAL __muldf3 END_FUNCTION
#endif

#if _USE_SOFT_F32_DIV <> NO_IMPL
FUNCTION GLOBAL __divsf3 END_FUNCTION
#endif
#if _USE_SOFT_F64_DIV <> NO_IMPL
FUNCTION GLOBAL __divdf3 END_FUNCTION
#endif
#if _USE_SOFT_I32_DIV <> NO_IMPL
FUNCTION GLOBAL __divsi3 END_FUNCTION
#endif
#if _USE_SOFT_I64_DIV <> NO_IMPL
FUNCTION GLOBAL __divdi3 END_FUNCTION
#endif
#if _USE_SOFT_U32_DIV <> NO_IMPL
FUNCTION GLOBAL __udivsi3 END_FUNCTION
#endif
#if _USE_SOFT_U64_DIV <> NO_IMPL
FUNCTION GLOBAL __udivdi3 END_FUNCTION
#endif

#if _USE_SOFT_I32_MOD <> NO_IMPL
FUNCTION GLOBAL __modsi3 END_FUNCTION
#endif
#if _USE_SOFT_I64_MOD <> NO_IMPL
FUNCTION GLOBAL __moddi3 END_FUNCTION	// DS5376
#endif
#if _USE_SOFT_U32_MOD <> NO_IMPL
FUNCTION GLOBAL __umodsi3 END_FUNCTION
#endif
#if _USE_SOFT_U64_MOD <> NO_IMPL
FUNCTION GLOBAL __umoddi3 END_FUNCTION
#endif

#if _USE_SOFT_F32_NEG <> NO_IMPL
FUNCTION GLOBAL __negsf2 END_FUNCTION
#endif
#if _USE_SOFT_F64_NEG <> NO_IMPL
FUNCTION GLOBAL __negdf2 END_FUNCTION
#endif

(* Conversion functions *)
#if _USE_SOFT_F32_F64 <> NO_IMPL
FUNCTION GLOBAL __extendsfdf2 END_FUNCTION
#endif
#if _USE_SOFT_F64_F32 <> NO_IMPL
FUNCTION GLOBAL __truncdfsf2 END_FUNCTION
#endif
#if _USE_SOFT_F32_I32 <> NO_IMPL
FUNCTION GLOBAL __fixsfsi END_FUNCTION
#endif
#if _USE_SOFT_F64_I32 <> NO_IMPL
FUNCTION GLOBAL __fixdfsi END_FUNCTION
#endif
#if _USE_SOFT_F32_I64 <> NO_IMPL
FUNCTION GLOBAL __fixsfdi END_FUNCTION
#endif
#if _USE_SOFT_F64_I64 <> NO_IMPL
FUNCTION GLOBAL __fixdfdi END_FUNCTION
#endif
#if _USE_SOFT_F32_I128 <> NO_IMPL
FUNCTION GLOBAL __fixsfti END_FUNCTION
#endif
#if _USE_SOFT_F64_I128 <> NO_IMPL
FUNCTION GLOBAL __fixdfti END_FUNCTION
#endif
#if _USE_SOFT_F32_U32 <> NO_IMPL
FUNCTION GLOBAL __fixunssfsi END_FUNCTION
#endif
#if _USE_SOFT_F64_U32 <> NO_IMPL
FUNCTION GLOBAL __fixunsdfsi END_FUNCTION
#endif
#if _USE_SOFT_F32_U64 <> 0
FUNCTION GLOBAL __fixunssfdi END_FUNCTION
#endif
#if _USE_SOFT_F64_U64 <> 0
FUNCTION GLOBAL __fixunsdfdi END_FUNCTION
#endif
#if _USE_SOFT_F32_U128 <> NO_IMPL
FUNCTION GLOBAL __fixunssfti END_FUNCTION
#endif
#if _USE_SOFT_F64_U128 <> NO_IMPL
FUNCTION GLOBAL __fixunsdfti END_FUNCTION
#endif
#if _USE_SOFT_I32_F32 <> NO_IMPL
FUNCTION GLOBAL __floatsisf END_FUNCTION
#endif
#if _USE_SOFT_I32_F64 <> NO_IMPL
FUNCTION GLOBAL __floatsidf END_FUNCTION
#endif
#if _USE_SOFT_I64_F32 <> NO_IMPL
FUNCTION GLOBAL __floatdisf END_FUNCTION
#endif
#if _USE_SOFT_I64_F64 <> NO_IMPL
FUNCTION GLOBAL __floatdidf END_FUNCTION
#endif
#if _USE_SOFT_I128_F32 <> NO_IMPL
FUNCTION GLOBAL __floattisf END_FUNCTION
#endif
#if _USE_SOFT_I128_F64 <> NO_IMPL
FUNCTION GLOBAL __floattidf END_FUNCTION
#endif
#if _USE_SOFT_U32_F32 <> NO_IMPL
FUNCTION GLOBAL __floatunsisf END_FUNCTION
#endif
#if _USE_SOFT_U32_F64 <> NO_IMPL
FUNCTION GLOBAL __floatunsidf END_FUNCTION
#endif
#if _USE_SOFT_U64_F32 <> NO_IMPL
FUNCTION GLOBAL __floatundisf END_FUNCTION
#endif
#if _USE_SOFT_U64_F64 <> NO_IMPL
FUNCTION GLOBAL __floatundidf END_FUNCTION
#endif
#if _USE_SOFT_U128_F32 <> NO_IMPL
FUNCTION GLOBAL __floatuntisf END_FUNCTION
#endif
#if _USE_SOFT_U128_F64 <> NO_IMPL
FUNCTION GLOBAL __floatuntidf END_FUNCTION
#endif
#if _USE_SOFT_CMP_F32 <> NO_IMPL
FUNCTION GLOBAL __cmpsf2 END_FUNCTION
FUNCTION GLOBAL __unordsf2 END_FUNCTION
FUNCTION GLOBAL __eqsf2 END_FUNCTION
FUNCTION GLOBAL __nesf2 END_FUNCTION
FUNCTION GLOBAL __gesf2 END_FUNCTION
FUNCTION GLOBAL __ltsf2 END_FUNCTION
FUNCTION GLOBAL __lesf2 END_FUNCTION
FUNCTION GLOBAL __gtsf2 END_FUNCTION
#endif
#if _USE_SOFT_CMP_F64 <> NO_IMPL
FUNCTION GLOBAL __cmpdf2 END_FUNCTION
FUNCTION GLOBAL __unorddf2 END_FUNCTION
FUNCTION GLOBAL __eqdf2 END_FUNCTION
FUNCTION GLOBAL __nedf2 END_FUNCTION
FUNCTION GLOBAL __gedf2 END_FUNCTION
FUNCTION GLOBAL __ltdf2 END_FUNCTION
FUNCTION GLOBAL __ledf2 END_FUNCTION
FUNCTION GLOBAL __gtdf2 END_FUNCTION
#endif

FUNCTION GLOBAL __isnanf END_FUNCTION	// DS5379
FUNCTION GLOBAL __isnand END_FUNCTION	// DS5379

#if _USE_SOFT_U32_CLZ <> NO_IMPL
FUNCTION GLOBAL __clzsi2 END_FUNCTION	// DS5380
#endif
#if _USE_SOFT_U64_CLZ <> NO_IMPL
FUNCTION GLOBAL __clzdi2 END_FUNCTION	// DS5380
#endif

#ifdef _LSL_TARGETARCH_ARM

FUNCTION GLOBAL DIAS_R_CMP END_FUNCTION
FUNCTION GLOBAL DIAS_R_ADD END_FUNCTION
FUNCTION GLOBAL DIAS_R_SUB END_FUNCTION
FUNCTION GLOBAL DIAS_R_ABS END_FUNCTION
FUNCTION GLOBAL DIAS_R_MUL END_FUNCTION
FUNCTION GLOBAL DIAS_R_DTOR END_FUNCTION
FUNCTION GLOBAL DIAS_R_RTOD END_FUNCTION
FUNCTION GLOBAL DIAS_R_UTOR END_FUNCTION
FUNCTION GLOBAL DIAS_R_COS END_FUNCTION
FUNCTION GLOBAL DIAS_R_SIN END_FUNCTION
FUNCTION GLOBAL DIAS_R_DIV END_FUNCTION
FUNCTION GLOBAL DIAS_R_1DX END_FUNCTION
FUNCTION GLOBAL DIAS_R_NEG END_FUNCTION
FUNCTION GLOBAL DIAS_R_NOT END_FUNCTION
FUNCTION GLOBAL DIAS_R_LOG END_FUNCTION
FUNCTION GLOBAL DIAS_R_XHY END_FUNCTION
FUNCTION GLOBAL DIAS_R_SIN_GR END_FUNCTION
FUNCTION GLOBAL DIAS_R_COS_GR END_FUNCTION
FUNCTION GLOBAL DIAS_R_TAN_GR END_FUNCTION
FUNCTION GLOBAL DIAS_R_TAN END_FUNCTION
FUNCTION GLOBAL DIAS_R_ASIN_GR END_FUNCTION
FUNCTION GLOBAL DIAS_R_ASIN END_FUNCTION
FUNCTION GLOBAL DIAS_R_ACOS_GR END_FUNCTION
FUNCTION GLOBAL DIAS_R_ACOS END_FUNCTION
FUNCTION GLOBAL DIAS_R_ATAN_GR END_FUNCTION
FUNCTION GLOBAL DIAS_R_ATAN END_FUNCTION
FUNCTION GLOBAL DIAS_R_SQRT END_FUNCTION
FUNCTION GLOBAL DIAS_R_LN END_FUNCTION
FUNCTION GLOBAL DIAS_R_EXP END_FUNCTION

FUNCTION GLOBAL __cdecl MathHelperSqrt32 var_input value:udint; end_var var_output retcode:udint; end_var END_FUNCTION
FUNCTION GLOBAL __cdecl MathHelperSqrt64 var_input loval:udint; hival:udint; end_var var_output retcode:udint; end_var END_FUNCTION
FUNCTION GLOBAL __cdecl FloatHelperEmu_udivdi6432 VAR_INPUT lo : UDINT; hi : UDINT; denominator : UDINT; END_VAR VAR_OUTPUT retcode : UDINT; END_VAR END_FUNCTION
FUNCTION GLOBAL __cdecl FloatHelperEmu_mod_udivdi6432 VAR_INPUT resMod : ^UDINT; lo : UDINT; hi : UDINT; denominator : UDINT; END_VAR VAR_OUTPUT retcode : UDINT; END_VAR END_FUNCTION
FUNCTION GLOBAL __cdecl FloatHelperEmu_mod_divdi6432 VAR_INPUT resMod : ^DINT; lo : UDINT; hi : UDINT; denominator : UDINT; END_VAR VAR_OUTPUT retcode : DINT; END_VAR END_FUNCTION
FUNCTION GLOBAL __cdecl __udivdi6432   VAR_INPUT     lo : udint;     hi : udint;     denominator : udint;   END_VAR   VAR_OUTPUT     retcode : udint;   END_VAR END_FUNCTION
FUNCTION GLOBAL __cdecl __divdi6432     VAR_INPUT     lo : udint;     hi : udint;     denominator : udint;   END_VAR   VAR_OUTPUT     retcode : dint;   END_VAR END_FUNCTION

#endif


// Globale Funktionen zur Interaktion mit DataService
FUNCTION GLOBAL __cdecl LDR_DS_CTor VAR_INPUT tcpip_port:udint; END_VAR END_FUNCTION
FUNCTION GLOBAL __cdecl LDR_DS_RunCy END_FUNCTION
FUNCTION GLOBAL __cdecl LDR_DS_RunBk  END_FUNCTION
FUNCTION GLOBAL __cdecl LDR_DS_Send VAR_INPUT pcd:^DsComData; END_VAR VAR_OUTPUT retcode:udint; END_VAR END_FUNCTION
FUNCTION GLOBAL __cdecl LDR_DS_SendWithResponse VAR_INPUT  pcd:^DsComData; timeout:udint; END_VAR VAR_OUTPUT retcode:udint; END_VAR END_FUNCTION
FUNCTION GLOBAL __cdecl LDR_DS_Register_pCB_RecieveData VAR_INPUT pfkt:^void; END_VAR VAR_OUTPUT retcode:udint; END_VAR END_FUNCTION
FUNCTION GLOBAL __cdecl LDR_DS_ComBufferCreate VAR_INPUT statbuff:^DsComData; expected_size:udint; END_VAR VAR_OUTPUT retcode:^DsComData; END_VAR END_FUNCTION
FUNCTION GLOBAL __cdecl LDR_DS_ComBufferDestroy VAR_INPUT statbuff:^DsComData; buffer:^DsComData; END_VAR VAR_OUTPUT retcode:^DsComData; END_VAR END_FUNCTION     

// ab DATASERVICE_VERSION 2
FUNCTION GLOBAL __cdecl LDR_DS_Register_pCB_SpyData VAR_INPUT pfkt:^void; END_VAR VAR_OUTPUT retcode:udint; END_VAR END_FUNCTION
FUNCTION GLOBAL __cdecl LDR_DS_Register_pCB_LevelWatchDog VAR_INPUT pfkt:^void; END_VAR VAR_OUTPUT retcode:udint; END_VAR END_FUNCTION
// ab DATASERVICE_VERSION 3
FUNCTION GLOBAL __cdecl LDR_DS_SendEX VAR_INPUT port:^void; pcd:^DsComData; END_VAR VAR_OUTPUT retcode:udint; END_VAR END_FUNCTION
FUNCTION GLOBAL __cdecl LDR_DS_Register_pCB_RecieveDataEx VAR_INPUT pfkt:^void; END_VAR VAR_OUTPUT retcode:udint; END_VAR END_FUNCTION
FUNCTION GLOBAL __cdecl LDR_DS_Register_pCB_UnRegClient VAR_INPUT pfkt:^void; END_VAR VAR_OUTPUT retcode:udint; END_VAR END_FUNCTION
FUNCTION GLOBAL __cdecl LDR_DS_GetClientId VAR_INPUT port:^void; END_VAR VAR_OUTPUT retcode:udint; END_VAR END_FUNCTION
FUNCTION GLOBAL __cdecl LDR_DS_Register VAR_INPUT id:udint; ptr:^void; END_VAR VAR_OUTPUT retcode:udint; END_VAR END_FUNCTION
// ab DATASERVICE_VERSION 4
FUNCTION GLOBAL __cdecl LDR_DS_GetUserText VAR_INPUT port:^void; END_VAR VAR_OUTPUT retcode:^char; END_VAR;

#pragma warning(default:78)
#pragma warning(default:76)
#pragma warning(default:73)
#pragma warning(default:72)

#endif
