//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "MainSequence"
	Revision           = "0.0"
	GUID               = "{3AEFA7D1-644A-457C-95DB-DE96745FB6AB}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	DefCyclictime      = "100 ms"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(806,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{DD30832B-4247-4A66-B68C-53E61E88A4EB}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="MainSequenceStep" GUID="{3AC3B7A3-9575-4616-A18A-48C0FF95B106}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="s_All_Motor_Homed" GUID="{6C5384A1-7CCD-4179-BED9-F27BBD39EEBD}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_All_Tablets_Charged" GUID="{999A0E89-5A14-43FB-8C4F-39B38572C3DB}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_EasyGUI" GUID="{ECD35EB7-FD3A-4DC0-AAFB-DF78F7FEA2FC}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="Charge_complete" Required="false" Internal="false"/>
		<Client Name="Comando_manager_globale" Required="true" Internal="false"/>
		<Client Name="Comando_manager_motori" Required="true" Internal="false"/>
		<Client Name="Discharge_complete" Required="false" Internal="false"/>
		<Client Name="Irradiation_complete" Required="false" Internal="false"/>
		<Client Name="Motor_Homed" Required="false" Internal="false"/>
		<Client Name="Motor_Phased" Required="false" Internal="false"/>
	</Channels>
	<Separators>
		<Clients>
			<SepChn Position="2"/>
		</Clients>
	</Separators>
</Class>
*)
MainSequence : CLASS
	TYPE
	  t_MainSequence_step :  //! <Type Public="true" Name="t_MainSequence_step"/>
	  (
	    Idle,
	    Homing,
	    Phasing,
	    Charge,
	    Irradiation,
	    Discharge,
	    Stop,
	    Reset,
	    Error,
	    HardReset
	  )$UDINT;
	  t_Sequence_Cmd :  //! <Type Public="true" Name="t_Sequence_Cmd"/>
	  (
	    Cmd_idle,
	    Cmd_start,
	    Cmd_stop,
	    Cmd_reset,
	    Cmd_charge,
	    Cmd_irradiation,
	    Cmd_Discharge,
	    Cmd_misure,
	    Cmd_error
	  )$UDINT;
	END_TYPE
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	MainSequenceStep 	: SvrCh_t_MainSequence_step_PTofCls_MainSequence;
	s_All_Motor_Homed 	: SvrCh_DINT;
	s_All_Tablets_Charged 	: SvrCh_DINT;
	s_EasyGUI 	: SvrCh_DINT;
  //Clients:
	Comando_manager_motori 	: CltChCmd_ManagerMotori;
	Comando_manager_globale 	: CltChCmd_Manager_globale;
	Motor_Homed 	: CltCh_DINT;
	Motor_Phased 	: CltCh_DINT;
	Charge_complete 	: CltCh_DINT;
	Irradiation_complete 	: CltCh_DINT;
	Discharge_complete 	: CltCh_DINT;
  //Variables:
		ActCommand 	: t_Sequence_Cmd;
		v_motor_homed 	: DINT;
		v_irradiation_complete 	: DINT;
		v_charge_complete 	: DINT;
		v_IrradiationStartOver 	: BOOL;
		v_irradiation_Step 	: DINT;
		v_misuration_Step 	: DINT;
		v_MeasurementStartOver 	: BOOL;
		v_Discharge_complete 	: DINT;
		v_Stop 	: DINT;
		v_StateBeforeStop 	: t_MainSequence_step;
		v_ActCommandBeforeStop 	: t_Sequence_Cmd;
		vFlag 	: DINT;
		vFlag2 	: DINT;
		v_recoupledM3 	: DINT;
		v_recoupledM3_status 	: DINT;
		v_EasyGUI 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION GLOBAL SetSequenceState
		VAR_INPUT
			Cmd 	: t_Sequence_Cmd;
		END_VAR
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
	
	FUNCTION GLOBAL SetHomingStatus
		VAR_INPUT
			Status 	: DINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;
		END_VAR;
	
	FUNCTION GLOBAL SetPhasingStatus
		VAR_INPUT
			Status 	: BOOL;
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;
		END_VAR;
	
	FUNCTION GLOBAL SetChargeStatus
		VAR_INPUT
			Status 	: DINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;
		END_VAR;
	
	FUNCTION GLOBAL SetIrradiationStatus
		VAR_INPUT
			Status 	: BOOL;
		END_VAR
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
	
	FUNCTION GLOBAL SetIrradiationStartOver
		VAR_INPUT
			Status 	: BOOL;
		END_VAR;
	
	FUNCTION GLOBAL SetMisurationStartOver
		VAR_INPUT
			Status 	: BOOL;
		END_VAR;
	
	FUNCTION GLOBAL SetDischargeStatus
		VAR_INPUT
			Status 	: DINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;
		END_VAR;
	
	FUNCTION GLOBAL SetStop
		VAR_INPUT
			Status 	: DINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;
		END_VAR;
	
	FUNCTION GLOBAL SetRecoupledM3
		VAR_INPUT
			Status 	: DINT;
		END_VAR;
	
	FUNCTION GLOBAL GetRecoupledM3
		VAR_OUTPUT
			OutParam 	: DINT;
		END_VAR;
	
	FUNCTION GLOBAL SetSequenceState_2
		VAR_INPUT
			Param 	: t_MainSequence_step;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_All_Motor_Homed::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_All_Tablets_Charged::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL s_EasyGUI::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd Manager_globale
#pragma usingLtd ManagerMotori


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB MainSequence::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_MAINSEQUENCE
0$UINT, 0$UINT, (SIZEOF(::MainSequence))$UINT, 
5$UINT, 7$UINT, 0$UINT, 
TO_UDINT(1203230383), "MainSequence", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::MainSequence.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::MainSequence.MainSequenceStep.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2854010645), "MainSequenceStep", 
(::MainSequence.s_All_Motor_Homed.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(749740913), "s_All_Motor_Homed", 
(::MainSequence.s_All_Tablets_Charged.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1695159870), "s_All_Tablets_Charged", 
(::MainSequence.s_EasyGUI.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2269656371), "s_EasyGUI", 
//Clients:
(::MainSequence.Comando_manager_motori.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2931013951), "Comando_manager_motori", TO_UDINT(365955750), "ManagerMotori", 0$UINT, 0$UINT, 
(::MainSequence.Comando_manager_globale.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3335880404), "Comando_manager_globale", TO_UDINT(3218456232), "Manager_globale", 0$UINT, 0$UINT, 
(::MainSequence.Motor_Homed.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(2691842071), "Motor_Homed", 
(::MainSequence.Motor_Phased.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(906203230), "Motor_Phased", 
(::MainSequence.Charge_complete.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(93563568), "Charge_complete", 
(::MainSequence.Irradiation_complete.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3567401221), "Irradiation_complete", 
(::MainSequence.Discharge_complete.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(3642711235), "Discharge_complete", 
END_FUNCTION


#define USER_CNT_MainSequence 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_MainSequence] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION MainSequence::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_MainSequence, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
	vmt.CmdTable.CyWork		:= #CyWork();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_All_Motor_Homed.pMeth			:= StoreMethod( #s_All_Motor_Homed::Read(), #M_WR_DIRECT() );
	IF s_All_Motor_Homed.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_All_Tablets_Charged.pMeth			:= StoreMethod( #s_All_Tablets_Charged::Read(), #M_WR_DIRECT() );
	IF s_All_Tablets_Charged.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_EasyGUI.pMeth			:= StoreMethod( #s_EasyGUI::Read(), #M_WR_DIRECT() );
	IF s_EasyGUI.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL MainSequence::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR

  v_motor_homed:=Motor_Homed;
  v_EasyGUI:=s_EasyGUI.Read();
  s_All_Motor_Homed.Write(input:=v_motor_homed); 
  s_All_Tablets_Charged.Write(input:=v_charge_complete); 
  
  
  case MainSequenceStep of
  
  Idle:
      
    if Comando_manager_motori.GetErrorState() & vFlag=0 then// vFlag serve per far entrare solamente 1 volta in questa condizione altrimenti rimane bloccata.
       vFlag:=1;
       ActCommand:=Cmd_error;
       Comando_manager_globale.SetSequenceStep(Cmd:=Manager_globale::ErrorState);
    end_if;
      
      
    case ActCommand of
    
      Cmd_idle:
      
       
      Cmd_start:   
 
      if v_motor_homed=0 then
        MainSequenceStep:=Homing;
      end_if;

      
      Cmd_charge:
      
        MainSequenceStep:=Charge;
      
      Cmd_irradiation:
        
        MainSequenceStep:=Irradiation;
        
      Cmd_Discharge:
      
        MainSequenceStep:=Discharge;
        
      Cmd_error:
      
      Cmd_stop:
        MainSequenceStep:=Stop;
      
      Cmd_reset:
      
        MainSequenceStep:=Reset;

  
    end_case;
//===========================================================================================     
    Homing:
    
      if Comando_manager_motori.GetErrorState() then
        MainSequenceStep:=Idle;
        ActCommand:=Cmd_error;
        Comando_manager_globale.SetSequenceStep(Cmd:=Manager_globale::Idle);
      end_if;

        Comando_manager_motori.SetSequenceState(Cmd_ManagerMotori:=Cmd_ManagerMotori_homing, StartCase:=10);//MODIFICATO 10->5

        if v_Motor_Homed then
          Comando_manager_globale.SetSequenceStep(Cmd:=Manager_globale::Idle);
          ActCommand:=Cmd_idle;
          MainSequenceStep:=Idle;
        end_if;

//===========================================================================================          
    Charge:
    
      if Comando_manager_motori.GetErrorState() then
        MainSequenceStep:=Idle;
        ActCommand:=Cmd_error;
        Comando_manager_globale.SetSequenceStep(Cmd:=Manager_globale::Idle);
      end_if;
          
        IF v_charge_complete=2 THEN
        
          if v_EasyGUI then
            Comando_manager_globale.SetSequenceStep(Cmd:=Manager_globale::Irradiation);
          else
            Comando_manager_globale.SetSequenceStep(Cmd:=Manager_globale::Idle);
          end_if;
          
          MainSequenceStep:=Idle;
          ActCommand:=Cmd_idle;
        ELSE
          Comando_manager_motori.SetSequenceState(Cmd_ManagerMotori:=ManagerMotori::Cmd_ManagerMotori_charge, StartCase:=10);
        END_IF;

//===========================================================================================    
      
    Irradiation:
    
      if Comando_manager_motori.GetErrorState() then
        MainSequenceStep:=Idle;
        ActCommand:=Cmd_error;
        Comando_manager_globale.SetSequenceStep(Cmd:=Manager_globale::Idle);
      end_if;

       if v_irradiation_complete then
          
          if v_EasyGUI then
            Comando_manager_globale.SetSequenceStep(Cmd:=Manager_globale::Discharge);
          else
            Comando_manager_globale.SetSequenceStep(Cmd:=Manager_globale::Idle);
          end_if;
          
          ActCommand:=Cmd_idle;
          MainSequenceStep:=Idle;
        else
            Comando_manager_motori.SetSequenceState(Cmd_ManagerMotori:=Cmd_ManagerMotori_irradiation, StartCase:=10);//MODIFICATO
            Comando_manager_motori.SetIrradiationStartOver(Status:=v_IrradiationStartOver); 
        
        end_if; 
   
//===========================================================================================    
   
    Discharge:

      if Comando_manager_motori.GetErrorState() then
        MainSequenceStep:=Idle;
        ActCommand:=Cmd_error;
        Comando_manager_globale.SetSequenceStep(Cmd:=Manager_globale::Idle);
      end_if;
      
       if v_Discharge_complete=1 then
          Comando_manager_globale.SetSequenceStep(Cmd:=Manager_globale::Idle);
          ActCommand:=Cmd_idle;
          MainSequenceStep:=Idle;
       else
          Comando_manager_motori.SetSequenceState(Cmd_ManagerMotori:=ManagerMotori::Cmd_ManagerMotori_discharge, StartCase:=10);
          Comando_manager_motori.SetMisurationStartOver(Status:=v_MeasurementStartOver);
       end_if; 


//=========================================================================================== 
    Stop:

      MainSequenceStep:=Idle;
      ActCommand:=Cmd_error;
    
      Comando_manager_globale.SetSequenceStep(Cmd:=Manager_globale::Stop);
//=========================================================================================== 
      
    Error:
    //RIMANI IN QUESTA CONDIZIONE
//=========================================================================================== 
      
    Reset:

      Comando_manager_motori.SetSequenceState(Cmd_ManagerMotori:=ManagerMotori::Cmd_ManagerMotori_reset, StartCase:=0);
      Comando_manager_globale.SetSequenceStep(Cmd:=Manager_globale::Idle);
      
      MainSequenceStep:=Idle;
      ActCommand:=Cmd_idle;
      vFlag:=0;
      
      v_motor_homed:=0;
      v_irradiation_complete:=0;
      v_charge_complete:=0;
      v_IrradiationStartOver:=FALSE;
      v_irradiation_Step:=0;
      v_misuration_Step:=0;
      v_MeasurementStartOver:=0;
      v_Discharge_complete:=FALSE;
      v_Stop:=FALSE;
      v_recoupledM3:=0;
      v_recoupledM3_status:=0;
      
      Charge_complete.Write(input:=0);
      Irradiation_complete.Write(input:=0);
      
      s_EasyGUI.Write(input:=0);
      

//===========================================================================================    
      
  end_case;

	state := READY;
  
END_FUNCTION


FUNCTION GLOBAL MainSequence::SetSequenceState
	VAR_INPUT
		Cmd 	: t_Sequence_Cmd;
	END_VAR
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR

  ActCommand:=Cmd;
  retcode:=true;
  
  
END_FUNCTION


FUNCTION GLOBAL MainSequence::SetHomingStatus
	VAR_INPUT
		Status 	: DINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: DINT;
	END_VAR
  
    Motor_Homed:=Status;
    retcode:=true;
    
END_FUNCTION


FUNCTION GLOBAL MainSequence::SetPhasingStatus
	VAR_INPUT
		Status 	: BOOL;
	END_VAR
	VAR_OUTPUT
		retcode 	: DINT;
	END_VAR
  
    Motor_Phased:=Status;
    retcode:=true;
    
END_FUNCTION


FUNCTION VIRTUAL GLOBAL MainSequence::Init
v_motor_homed:=0;
v_irradiation_complete:=0;
v_charge_complete:=0;
v_IrradiationStartOver:=FALSE;
v_irradiation_Step:=0;
v_misuration_Step:=0;
v_MeasurementStartOver:=0;
v_Discharge_complete:=FALSE;
v_Stop:=FALSE;

v_recoupledM3:=0;
vFlag:=0;
v_recoupledM3_status:=0;

v_EasyGUI:=0;

//s_EasyGUI.Write(input:=1);

END_FUNCTION


FUNCTION GLOBAL MainSequence::SetIrradiationStatus
	VAR_INPUT
		Status 	: BOOL;
	END_VAR
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR
  
  Irradiation_complete:=Status;
  v_irradiation_complete:=Irradiation_complete;
  retcode:=true;
  
END_FUNCTION


FUNCTION GLOBAL MainSequence::SetChargeStatus
	VAR_INPUT
		Status 	: DINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: DINT;
	END_VAR
  Charge_complete:=Status;
  
  v_charge_complete:=Charge_complete;//MODIFICA
  
  retcode:=true;
  
END_FUNCTION



FUNCTION GLOBAL MainSequence::SetIrradiationStartOver
	VAR_INPUT
		Status 	: BOOL;
	END_VAR

v_IrradiationStartOver:=Status;
END_FUNCTION


FUNCTION GLOBAL MainSequence::SetMisurationStartOver
	VAR_INPUT
		Status 	: BOOL;
	END_VAR
v_MeasurementStartOver:=Status;
END_FUNCTION


FUNCTION GLOBAL MainSequence::SetDischargeStatus
	VAR_INPUT
		Status 	: DINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: DINT;
	END_VAR
  
  Discharge_complete:=Status;
  
  v_Discharge_complete:=Discharge_complete;
  
retcode:=TRUE;

END_FUNCTION


FUNCTION GLOBAL MainSequence::SetStop
	VAR_INPUT
		Status 	: DINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: DINT;
	END_VAR

  v_Stop:=Status;
  retcode:=TRUE;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL MainSequence::s_All_Motor_Homed::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	output := s_All_Motor_Homed;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MainSequence::s_All_Tablets_Charged::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	output := s_All_Tablets_Charged;

END_FUNCTION


FUNCTION GLOBAL MainSequence::SetRecoupledM3
	VAR_INPUT
		Status 	: DINT;
	END_VAR
v_recoupledM3:=Status;
END_FUNCTION


FUNCTION GLOBAL MainSequence::GetRecoupledM3
	VAR_OUTPUT
		OutParam 	: DINT;
	END_VAR
OutParam:=v_recoupledM3_status;
END_FUNCTION


FUNCTION GLOBAL MainSequence::SetSequenceState_2
	VAR_INPUT
		Param 	: t_MainSequence_step;
	END_VAR
  
  MainSequenceStep:=Param;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MainSequence::s_EasyGUI::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	output := s_EasyGUI;

END_FUNCTION
