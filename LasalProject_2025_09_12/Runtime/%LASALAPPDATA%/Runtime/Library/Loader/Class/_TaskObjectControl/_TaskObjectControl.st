//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION
#include "..\..\Source\code\OsiBaseNew.h"

(*!
<Class
	Name               = "_TaskObjectControl"
	Revision           = "1.0"
	GUID               = "{BC147441-61AA-11D6-8832-0048545E88BC}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "true"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\OBJECT.ICO"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)"
	Comment            = "provides an interface to investigate/manipulate objects and their tasks">
	<Channels>
		<Server Name="Server0" GUID="{BC147442-61AA-11D6-8832-0048545E88BC}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Source\code\OsiBaseNew.h" Include="true"/>
		</Files>
	</Dependencies>
</Class>
*)
_TaskObjectControl : CLASS
	TYPE
	  OS_TASK : STRUCT  //! <Type Comment="interface list" Name="OS_TASK"/>
	    AddCyclicFunction : ^void;
	    AddCyclicObject : ^void;
	    RemoveCyclicTask : ^void;
	    SignalCyclicTask : ^void;
	    AddRTFunction : ^void;
	    AddRTObject : ^void;
	    RemoveRTTask : ^void;
	    SignalRTTask : ^void;
	    StartMeasCyc : ^void;
	    StopMeasCyc : ^void;
	    StartMeasRT : ^void;
	    StopMeasRT : ^void;
	    AddFRGFunction : ^void;
	    AddFRGObject : ^void;
	    SuspendFRGTask : ^void;
	    ResumeFRGTask : ^void;
	    InitTaskModul : ^void;
	    GetTaskList : ^void;
	    AddHPUserObject : ^void;
	    Dummy2 : ^void;
	    Dummy3 : ^void;
	    Dummy4 : ^void;
	    GetKernelCyclic : ^void;
	    SuspendKernelCyclic : ^void;
	    SetObjectState : ^void;
	    ResetTaskState : ^void;
	    GetObjectInfo : ^void;
	    BackupObject : ^void;
	    RestoreObject : ^void;
	  END_STRUCT;
	END_TYPE
  //Servers:
	Server0 	: SvrChCmd_DINT;
  //Clients:
  //Variables:
  //Functions:
	
	FUNCTION __CDECL VIRTUAL GLOBAL GetObjectInfo
		VAR_INPUT
			thispointer 	: ^void;
			tasktype 	: USINT;
			objinfo 	: ^LSLOBJ_INFO;
		END_VAR
		VAR_OUTPUT
			EAX 	: DINT;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL ChangeObjectState
		VAR_INPUT
			thispointer 	: ^void;
			actioncmd 	: USINT;
			tasktype 	: USINT;
			debugobj 	: USINT;
			newtime 	: UDINT;
		END_VAR
		VAR_OUTPUT
			EAX 	: DINT;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL BackUpObject
		VAR_INPUT
			thispointer 	: ^void;
			tasktype 	: USINT;
		END_VAR
		VAR_OUTPUT
			EAX 	: DINT;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL RestoreObject
		VAR_INPUT
			thispointer 	: ^void;
			tasktype 	: USINT;
		END_VAR
		VAR_OUTPUT
			EAX 	: DINT;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL AddCyclicFunction
		VAR_INPUT
			pFunction 	: ^void;
			pParam 	: ^void;
			udMode 	: UDINT;
			udTime 	: UDINT;
			udPhase 	: UDINT;
		END_VAR
		VAR_OUTPUT
			EAX 	: ^void;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL AddCyclicObject
		VAR_INPUT
			pObj 	: ^void;
			udMode 	: UDINT;
			udTime 	: UDINT;
			udPhase 	: UDINT;
		END_VAR
		VAR_OUTPUT
			EAX 	: ^void;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL AddRealTimeFunction
		VAR_INPUT
			pFunction 	: ^void;
			pParam 	: ^void;
			udMode 	: UDINT;
			udTime 	: UDINT;
			udPhase 	: UDINT;
		END_VAR
		VAR_OUTPUT
			EAX 	: ^void;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL AddRealTimeObject
		VAR_INPUT
			pObj 	: ^void;
			udMode 	: UDINT;
			udTime 	: UDINT;
			udPhase 	: UDINT;
		END_VAR
		VAR_OUTPUT
			EAX 	: ^void;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL AddForegroundFunction
		VAR_INPUT
			pFunction 	: ^void;
			pParam 	: ^void;
			stack 	: UDINT;
		END_VAR
		VAR_OUTPUT
			EAX 	: ^void;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL AddForegroundObject
		VAR_INPUT
			pObj 	: ^void;
			stack 	: UDINT;
		END_VAR
		VAR_OUTPUT
			EAX 	: ^void;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL AddHPUserObject
		VAR_INPUT
			pMeth 	: ^void;
			pThis 	: ^void;
			nSlot 	: DINT;
		END_VAR
		VAR_OUTPUT
			EAX 	: DINT;
		END_VAR;
	
	FUNCTION __CDECL VIRTUAL GLOBAL ResetTaskState
		VAR_INPUT
			tasktype 	: USINT;
		END_VAR
		VAR_OUTPUT
			EAX 	: DINT;
		END_VAR;
	
	FUNCTION _TaskObjectControl
		VAR_OUTPUT
			ret_code 	: ConfStates;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _TaskObjectControl::@CT_
0$UINT,
2#0100000000001000$UINT, //TY__TASKOBJECTCONTROL
1$UINT, 0$UINT, (SIZEOF(::_TaskObjectControl))$UINT, 
1$UINT, 0$UINT, 0$UINT, 
TO_UDINT(1584830088), "_TaskObjectControl", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::_TaskObjectControl.Server0.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(2759080719), "Server0", 
//Clients:
END_FUNCTION


#define USER_CNT__TaskObjectControl 12

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__TaskObjectControl] OF ^Void;
	END_STRUCT;
END_TYPE



//{{LSL_IMPLEMENTATION


//*********************Inserted from <.\OS Interface\code\ObjectControl_01_00.st>*********************



 



#include <rtos_interfaces.h> // we need this for the SysCIL functions
#include "..\..\Source\code\OsiBaseNew.h"
#include ".\RTOS_PrivHeader.h"

FUNCTION  _TaskObjectControl::_TaskObjectControl
VAR_OUTPUT
	ret_code		: CONFSTATES;
END_VAR
VAR
    pTask   : ^OS_TASK;
	aMeths	: ARRAY[0..USER_CNT__TaskObjectControl] OF ^void;
	retv    : SYS_ERROR;
END_VAR;

	retv := OS_CILGet("LASALTASK", #pTask$void);

	if retv <> SYS_ERR_NONE then

		TRACE_ERR("ERROR: OBJECT-CONTROL Interface not available with this version/platform!");
    LSLCLI_LoaderTracePrint("ERROR: OBJECT-CONTROL Interface not available with this version/platform!", 12);
		ret_code	:= C_UNKNOWN_CONSTR;
    else
		
		aMeths [0]	:= pTask^.GetObjectInfo;
		aMeths [1]	:= pTask^.SetObjectState;

		aMeths [2]  := pTask^.BackupObject;
		aMeths [3]  := pTask^.RestoreObject;

		aMeths [4]  := pTask^.AddCyclicFunction;
		aMeths [5]  := pTask^.AddCyclicObject;
		//aMeths [2]  := pTask^.RemoveCyclicTask
		//aMeths [2]  := pTask^.SignalCyclicTask
		aMeths [6]  := pTask^.AddRTFunction;
		aMeths [7]  := pTask^.AddRTObject;
		//aMeths [2]  := pTask^.RemoveRTTask
		//aMeths [2]  := pTask^.SignalRTTask
		//aMeths [2]  := pTask^.StartMeasCyc
		//aMeths [2]  := pTask^.StopMeasCyc
		//aMeths [2]  := pTask^.StartMeasRT
		//aMeths [2]  := pTask^.StopMeasRT
		aMeths [8]  := pTask^.AddFRGFunction;
		aMeths [9]  := pTask^.AddFRGObject;
		//aMeths [2]  := pTask^.SuspendFRGTask
		//aMeths [2]  := pTask^.ResumeFRGTask
		//aMeths [2]  := pTask^.InitTaskModul
		//aMeths [2]  := pTask^.GetTaskList
		aMeths [10]  := pTask^.AddHPUserObject;
		//aMeths [2]  := pTask^.Dummy2
		//aMeths [2]  := pTask^.Dummy3
		//aMeths [2]  := pTask^.Dummy4
		//aMeths [2]  := pTask^.GetKernelCyclic
		//aMeths [2]  := pTask^.SuspendKernelCyclic
		aMeths [11]  := pTask^.ResetTaskState;

		ret_code	:= InitOsiM_new(#aMeths[0]$void, USER_CNT__TaskObjectControl);
	end_if;

END_FUNCTION //  ObjectControl::ObjectControl

