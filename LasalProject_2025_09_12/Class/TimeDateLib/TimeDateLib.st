//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "TimeDateLib"
	Revision           = "1.1"
	GUID               = "{A7B27224-E334-4F5C-9CB5-7D3E5B4A523B}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)"
	Comment            = "This class is for calculating time- and date differences;&#13;&#10;For converting seconds to time and reversely;&#13;&#10;For add time and date and also to get the day of week;">
	<Channels>
		<Server Name="ClassSvr" GUID="{EA0E7714-795F-4934-A84E-356263633656}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="Connect this server to get access to the global methods"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Class\TimeDateLib\TimDatC.cpp"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="Sigmatek" Author="KolOtt"/>
		<Dokumentation Revision="1.1" Date="2012-03-21" Author="FesGue" Company="Sigmatek" Description="Insert function GetCalendarWeek"/>
		<Dokumentation Revision="1.0" Date="2011-09-28" Author="SpiMar" Company="Sigmatek" Description="First entry in Rev. docu"/>
	</RevDoku>
</Class>
*)
TimeDateLib : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
  //Clients:
  //Variables:
  //Functions:
				//! <Function Comment="get time1 - time2 in seconds" Name="TimeDiff"/>
	FUNCTION GLOBAL TimeDiff
		VAR_INPUT
			tim1 	: UDINT;			//! <Variable Comment="HHHHHHHHMMMMMMMM SSSSSSSS00000000&#13;&#10;H...hour&#13;&#10;M...minute&#13;&#10;s...second" Name="TimeDiff.tim1"/>
			tim2 	: UDINT;			//! <Variable Comment="HHHHHHHHMMMMMMMM SSSSSSSS00000000&#13;&#10;H...hour&#13;&#10;M...minute&#13;&#10;s...second" Name="TimeDiff.tim2"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="timediff (tim1-tim2) in seconds" Name="TimeDiff.retcode"/>
		END_VAR;
				//! <Function Comment="get tim - 00:00:00 in seconds" Name="TimeToSecond"/>
	FUNCTION GLOBAL TimeToSecond
		VAR_INPUT
			tim 	: UDINT;			//! <Variable Comment="HHHHHHHHMMMMMMMM SSSSSSSS00000000&#13;&#10;H...hour&#13;&#10;M...minute&#13;&#10;s...second" Name="TimeToSecond.tim"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="timediff (00:00:00-tim) in seconds" Name="TimeToSecond.retcode"/>
		END_VAR;
				//! <Function Comment="bring seconds to time" Name="SecondToTime"/>
	FUNCTION GLOBAL SecondToTime
		VAR_INPUT
			second 	: DINT;			//! <Variable Comment="seconds from 00:00:00" Name="SecondToTime.second"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: UDINT;			//! <Variable Comment="HHHHHHHHMMMMMMMM SSSSSSSS00000000&#13;&#10;H...hour&#13;&#10;M...minute&#13;&#10;s...second" Name="SecondToTime.retcode"/>
		END_VAR;
				//! <Function Comment="add given seconds to given time" Name="AddTime"/>
	FUNCTION GLOBAL AddTime
		VAR_INPUT
			tim 	: UDINT;			//! <Variable Comment="HHHHHHHHMMMMMMMM SSSSSSSS00000000&#13;&#10;H...hour&#13;&#10;M...minute&#13;&#10;s...second" Name="AddTime.tim"/>
			seconds 	: DINT;			//! <Variable Comment="secondes to add" Name="AddTime.seconds"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: UDINT;			//! <Variable Comment="HHHHHHHHMMMMMMMM SSSSSSSS00000000&#13;&#10;H...hour&#13;&#10;M...minute&#13;&#10;s...second" Name="AddTime.retcode"/>
		END_VAR;
				//! <Function Comment="get date1 - date2 in days" Name="DateDiff"/>
	FUNCTION GLOBAL DateDiff
		VAR_INPUT
			dat1 	: UDINT;			//! <Variable Comment="JJJJJJJJJJJJJJJJ MMMMTTTTTTTT0000&#13;&#10;J...Year&#13;&#10;M...Month&#13;&#10;T...Day" Name="DateDiff.dat1"/>
			dat2 	: UDINT;			//! <Variable Comment="JJJJJJJJJJJJJJJJ MMMMTTTTTTTT0000&#13;&#10;J...Year&#13;&#10;M...Month&#13;&#10;T...Day" Name="DateDiff.dat2"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="difference (dat1-dat2) in days" Name="DateDiff.retcode"/>
		END_VAR;
				//! <Function Comment="add given days to given date" Name="AddDate"/>
	FUNCTION GLOBAL AddDate
		VAR_INPUT
			dat 	: UDINT;			//! <Variable Comment="JJJJJJJJJJJJJJJJ MMMMTTTTTTTT0000&#13;&#10;J...Year&#13;&#10;M...Month&#13;&#10;T...Day" Name="AddDate.dat"/>
			days 	: DINT;			//! <Variable Comment="days to add" Name="AddDate.days"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: UDINT;			//! <Variable Comment="JJJJJJJJJJJJJJJJ MMMMTTTTTTTT0000&#13;&#10;J...Year&#13;&#10;M...Month&#13;&#10;T...Day" Name="AddDate.retcode"/>
		END_VAR;
				//! <Function Comment="get weekday of date" Name="GetDayOfWeek"/>
	FUNCTION GLOBAL GetDayOfWeek
		VAR_INPUT
			dat 	: UDINT;			//! <Variable Comment="JJJJJJJJJJJJJJJJ MMMMTTTTTTTT0000&#13;&#10;J...Year&#13;&#10;M...Month&#13;&#10;T...Day" Name="GetDayOfWeek.dat"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="0..Sunday&#13;&#10;1..Monday&#13;&#10;2..Tuesday&#13;&#10;3..Wednesday&#13;&#10;4..Thursday&#13;&#10;5..Friday&#13;&#10;6..Saturday" Name="GetDayOfWeek.retcode"/>
		END_VAR;
				//! <Function Comment="get calenderweek of date (DIN1355/ISO8601)" Name="GetCalendarWeek"/>
	FUNCTION GLOBAL GetCalendarWeek
		VAR_INPUT
			dat 	: UDINT;			//! <Variable Comment="JJJJJJJJJJJJJJJJ MMMMTTTTTTTT0000&#13;&#10;J...Year&#13;&#10;M...Month&#13;&#10;T...Day" Name="GetCalendarWeek.dat"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="Calendarweek" Name="GetCalendarWeek.retcode"/>
		END_VAR;
	
	FUNCTION CW53Possible
		VAR_INPUT
			Year 	: UDINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB TimeDateLib::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_TIMEDATELIB
1$UINT, 1$UINT, (SIZEOF(::TimeDateLib))$UINT, 
1$UINT, 0$UINT, 0$UINT, 
TO_UDINT(1512043018), "TimeDateLib", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::TimeDateLib.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
//Clients:
END_FUNCTION


#define USER_CNT_TimeDateLib 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_TimeDateLib] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION TimeDateLib::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR

	ret_code := C_OK;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION global __cdecl TdGetAbsday var_input dat : udint; end_var var_output retcode : dint; end_var;
FUNCTION global __cdecl TdIncDecDate var_input dat : udint; val : dint; end_var var_output retcode : udint; end_var;
FUNCTION global __cdecl TdEmboly var_input year : int; end_var var_output retcode : uint; end_var;

#define WEEKDAYS 7
// JJJJJJJJJJJJJJJJ MMMMTTTTTTTT0000
// HHHHHHHHMMMMMMMM SSSSSSSS00000000

FUNCTION GLOBAL TimeDateLib::TimeDiff
	VAR_INPUT
		tim1 	: UDINT;
		tim2 	: UDINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: DINT;
	END_VAR

  retcode := TimeToSecond(tim1) - TimeToSecond(tim2);

END_FUNCTION


FUNCTION GLOBAL TimeDateLib::TimeToSecond
	VAR_INPUT
		tim 	: UDINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: DINT;
	END_VAR
  var
    hour, mins : udint;
  end_var
  
  hour := (tim shr 24) and 16#FF;
  mins := (tim shr 16) and 16#FF;
  retcode := to_dint(((hour * 60) + mins) * 60 + ((tim shr 8) and 16#FF));

END_FUNCTION


FUNCTION GLOBAL TimeDateLib::SecondToTime
	VAR_INPUT
		second 	: DINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: UDINT;
	END_VAR
  VAR
    th, tm, ts : udint;
  END_VAR

  second := second mod 86400;
  
  if(second < 0) then
    second += 86400;
  end_if;
    
  th := second$udint / 3600;
  second$udint := second$udint - th * 3600;
  
  tm := second$udint / 60;
  ts := second$udint - tm * 60;
  
  retcode := (th shl 24) or (tm shl 16) or (ts shl 8);

END_FUNCTION


FUNCTION GLOBAL TimeDateLib::DateDiff
	VAR_INPUT
		dat1 	: UDINT;
		dat2 	: UDINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: DINT;
	END_VAR

  retcode := TdGetAbsday(dat1) - TdGetAbsday(dat2);

END_FUNCTION


FUNCTION GLOBAL TimeDateLib::AddTime
	VAR_INPUT
		tim 	: UDINT;
		seconds 	: DINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: UDINT;
	END_VAR
  
  retcode := SecondToTime(TimeToSecond(tim) + seconds);

END_FUNCTION


FUNCTION GLOBAL TimeDateLib::AddDate
	VAR_INPUT
		dat 	: UDINT;
		days 	: DINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: UDINT;
	END_VAR

  retcode := TdIncDecDate(dat, days);

END_FUNCTION


FUNCTION GLOBAL TimeDateLib::GetDayOfWeek
	VAR_INPUT
		dat 	: UDINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: DINT;
	END_VAR

  retcode := TdGetAbsday(dat) mod 7;

END_FUNCTION


FUNCTION GLOBAL TimeDateLib::GetCalendarWeek
	VAR_INPUT
		dat 	: UDINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: DINT;
	END_VAR
  VAR
  	FirstWeekDate : UDINT;
    Year         : UDINT;
    FirstJanDay  : DINT;
    DiffDate     : DINT;
  END_VAR

  Year := dat shr 16    and 2#00000000000000001111111111111111;
  FirstWeekDate := (Year and 2#00000000000000001111111111111111) shl 16;
  FirstWeekDate += (1    and 2#000000000000000000000000000001111) shl 12;
  FirstWeekDate += (1    and 2#000000000000000000000000011111111) shl 04;
  
  //Calculate the weekday of the 1st jan
  FirstJanDay := GetDayOfWeek(FirstWeekDate);
  
  //Calculate the first day of the first week
  if FirstJanDay > 4 then
    FirstWeekDate := AddDate(dat:= FirstWeekDate, days:= (WEEKDAYS - FirstJanDay) +1);
  elsif FirstJanDay = 0 then
    FirstWeekDate := AddDate(dat:= FirstWeekDate, days:= 1);
  elsif FirstJanDay <= 4 then
    FirstWeekDate := AddDate(dat:= FirstWeekDate, days:= (FirstJanDay -1)* -1);
  end_if;


  //Calculate calendarweek
  DiffDate := DateDiff(dat1:= dat, dat2:= FirstWeekDate);
  if DiffDate >= 0 then
    retcode := (DiffDate/WEEKDAYS) + 1;
    if retcode > 52 & (CW53Possible(Year) = false) then
      retcode := 1;
    end_if;
  else
    if (CW53Possible(Year - 1) = false)  then
      retcode := 52;
    else
      retcode := 53;
    end_if;

    
  end_if;



END_FUNCTION


FUNCTION TimeDateLib::CW53Possible
	VAR_INPUT
		Year 	: UDINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR
  VAR
  	FirstJan : UDINT;
    FirstJanDay : DINT;
  END_VAR

  retcode := false;

  FirstJan := (Year and 2#00000000000000001111111111111111) shl 16;
  FirstJan += (1    and 2#000000000000000000000000000001111) shl 12;
  FirstJan += (1    and 2#000000000000000000000000011111111) shl 04;

  FirstJanDay := GetDayOfWeek(FirstJan);
  if (FirstJanDay = 4) | ((TdEmboly(Year$INT) = True) & (FirstJanDay = 3))  then
    retcode := true;
  end_if;



END_FUNCTION
