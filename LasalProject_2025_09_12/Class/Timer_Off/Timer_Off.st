//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Timer_Off"
	Revision           = "1.0"
	GUID               = "{CFD1B2A1-B48A-11D4-AB39-00A024AEA053}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\Timer_Off\timer off.ico"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)"
	Comment            = "V1.0 Timer off Class |  Object starts if InValue &lt;&gt; 0 | Unit of the Delaytime  [ms]">
	<Channels>
		<Server Name="OutValue" GUID="{CFD1B2A2-B48A-11D4-AB39-00A024AEA053}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Out value&#13;&#10;read this server to get the delayed value"/>
		<Server Name="PastTime" GUID="{CFD1B2A5-B48A-11D4-AB39-00A024AEA053}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="the time passed by [ms]"/>
		<Client Name="DelayTime" Required="false" Internal="false" Comment="Delay time [ms]"/>
		<Client Name="InValue" Required="true" Internal="false" Comment="Input value &lt;&gt; -&gt; start"/>
	</Channels>
</Class>
*)
Timer_Off : CLASS
  //Servers:
	OutValue 	: SvrChCmd_DINT;
	PastTime 	: SvrCh_UDINT;
  //Clients:
	InValue 	: CltCh_DINT;
	DelayTime 	: CltCh_UDINT;
  //Variables:
		timemark 	: UDINT;
		trgmem 	: BOOL;
  //Functions:
				//! <Function Comment=" ******************************************************************&#13;&#10;                Timer Off function&#13;&#10;  (Timebase is &quot;ops.tAbsolut&quot; so we have got 1 ms as Timebase)&#13;&#10; ------------------------------------------------------------------&#13;&#10;   CLIENT: InValue -&gt; value to be spent&#13;&#10;     DelayTime -&gt; Timebase [1ms]&#13;&#10;    SERVER: OutValue-&gt; after Delaytime, OutValue=InValue&#13;&#10;   PastTime: past time [ms]&#13;&#10; ------------------------------------------------------------------&#13;&#10;                operation of READ function&#13;&#10; ------------------------------------------------------------------&#13;&#10; DelayTime in [1ms]&#13;&#10; Operation starts when InValue &lt;&gt; 0&#13;&#10; To restart the Function: at first you have to set the InValue := 0&#13;&#10; it only works, if the readfunction is called&#13;&#10; ------------------------------------------------------------------&#13;&#10;   created   :     BS   :        KW44/01&#13;&#10; ******************************************************************&#13;&#10;   tested: BS | 29.11.2001 | Lasal V00.53 | OPS V4.00&#13;&#10; ------------------------------------------------------------------&#13;&#10; last changes RM | 26:11:01 | 14:33 | Doku&#13;&#10; ******************************************************************&#13;&#10; ******************************************************************&#13;&#10;                     Ausschaltverzögerung&#13;&#10;  (Zeitbasis ist &quot;ops.tAbsolut&quot; d.h. die Zeitbasis ist 1 ms)&#13;&#10; ------------------------------------------------------------------&#13;&#10;   CLIENT: InValue -&gt; zu Verzögerndes Signal&#13;&#10;     DelayTime -&gt; Verzögerungszeit [1ms]&#13;&#10;    SERVER: OutValue-&gt; nach der Verzögerungszeit =&gt;&#13;&#10;                  OutValue=InValue&#13;&#10;   PastTime: Verstrichene Zeit [ms]&#13;&#10; ------------------------------------------------------------------&#13;&#10;                        READ Funktion&#13;&#10; ------------------------------------------------------------------&#13;&#10; DelayTime in [1ms]&#13;&#10; Operation startet wenn InValue &lt;&gt; 0&#13;&#10; Um die Funktion reinitialisiert wenn InValue := 0;&#13;&#10; Um die Klasse zu verwenden rufen sie die Readfunktion&#13;&#10; ------------------------------------------------------------------&#13;&#10;   created   :     BS   :        KW44/01&#13;&#10; ******************************************************************&#13;&#10;   getested: BS | 29.11.2001 | Lasal V00.53 | OPS V4.00&#13;&#10; ------------------------------------------------------------------&#13;&#10; last changes RM | 26:11:01 | 14:33 | Doku&#13;&#10; ******************************************************************&#13;&#10;" Name="Init"/>
	FUNCTION VIRTUAL GLOBAL Init;
				//! <Function Comment=" ******************************************************************&#13;&#10;                Timer Off function&#13;&#10;  (Timebase is &quot;ops.tAbsolut&quot; so we have got 1 ms as Timebase)&#13;&#10; ------------------------------------------------------------------&#13;&#10;   CLIENT: InValue -&gt; value to be spent&#13;&#10;     DelayTime -&gt; Timebase [1ms]&#13;&#10;    SERVER: OutValue-&gt; after Delaytime, OutValue=InValue&#13;&#10;   PastTime: past time [ms]&#13;&#10; ------------------------------------------------------------------&#13;&#10;                operation of READ function&#13;&#10; ------------------------------------------------------------------&#13;&#10; DelayTime in [1ms]&#13;&#10; Operation starts when InValue &lt;&gt; 0&#13;&#10; To restart the Function: at first you have to set the InValue := 0&#13;&#10; it only works, if the readfunction is called&#13;&#10; ------------------------------------------------------------------&#13;&#10;   created   :     BS   :        KW44/01&#13;&#10; ******************************************************************&#13;&#10;   tested: BS | 29.11.2001 | Lasal V00.53 | OPS V4.00&#13;&#10; ------------------------------------------------------------------&#13;&#10; last changes RM | 26:11:01 | 14:33 | Doku&#13;&#10; ******************************************************************&#13;&#10; ******************************************************************&#13;&#10;                     Ausschaltverzögerung&#13;&#10;  (Zeitbasis ist &quot;ops.tAbsolut&quot; d.h. die Zeitbasis ist 1 ms)&#13;&#10; ------------------------------------------------------------------&#13;&#10;   CLIENT: InValue -&gt; zu Verzögerndes Signal&#13;&#10;     DelayTime -&gt; Verzögerungszeit [1ms]&#13;&#10;    SERVER: OutValue-&gt; nach der Verzögerungszeit =&gt;&#13;&#10;                  OutValue=InValue&#13;&#10;   PastTime: Verstrichene Zeit [ms]&#13;&#10; ------------------------------------------------------------------&#13;&#10;                        READ Funktion&#13;&#10; ------------------------------------------------------------------&#13;&#10; DelayTime in [1ms]&#13;&#10; Operation startet wenn InValue &lt;&gt; 0&#13;&#10; Um die Funktion reinitialisiert wenn InValue := 0;&#13;&#10; Um die Klasse zu verwenden rufen sie die Readfunktion&#13;&#10; ------------------------------------------------------------------&#13;&#10;   created   :     BS   :        KW44/01&#13;&#10; ******************************************************************&#13;&#10;   getested: BS | 29.11.2001 | Lasal V00.53 | OPS V4.00&#13;&#10; ------------------------------------------------------------------&#13;&#10; last changes RM | 26:11:01 | 14:33 | Doku&#13;&#10; ******************************************************************&#13;&#10;" Name="OutValue.Read"/>
	FUNCTION VIRTUAL GLOBAL OutValue::Read
		VAR_OUTPUT
			EAX 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Timer_Off::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_TIMER_OFF
1$UINT, 0$UINT, (SIZEOF(::Timer_Off))$UINT, 
2$UINT, 2$UINT, 0$UINT, 
TO_UDINT(382408688), "Timer_Off", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Timer_Off.OutValue.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(1600974400), "OutValue", 
(::Timer_Off.PastTime.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3988057053), "PastTime", 
//Clients:
(::Timer_Off.InValue.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1437395281), "InValue", 
(::Timer_Off.DelayTime.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(249777087), "DelayTime", 
END_FUNCTION


#define USER_CNT_Timer_Off 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Timer_Off] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Timer_Off::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_Timer_Off, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Read		:= #Read();
	vmt.CmdTable.Write		:= #M_WR_DIRECT();
	vmt.CmdTable.Init		:= #Init();
	OutValue.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF OutValue.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	PastTime.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF PastTime.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


//*********************Inserted from .\code\C_Timer_Off.st*********************



 



//[#ENGLISH]
// ******************************************************************
//                Timer Off function
//  (Timebase is "ops.tAbsolut" so we have got 1 ms as Timebase)
// ------------------------------------------------------------------
//			CLIENT: InValue -> value to be spent
//					DelayTime -> Timebase [1ms]
//  		SERVER: OutValue-> after Delaytime, OutValue=InValue
//			PastTime: past time [ms]
// ------------------------------------------------------------------
//                operation of READ function
// ------------------------------------------------------------------
// DelayTime in [1ms]
// Operation starts when InValue <> 0
// To restart the Function: at first you have to set the InValue := 0
// it only works, if the readfunction is called
// ------------------------------------------------------------------
//			created 		:     BS  	:	       KW44/01
// ******************************************************************
//   tested: BS | 29.11.2001 | Lasal V00.53 | OPS V4.00
// ------------------------------------------------------------------
// last changes RM | 26:11:01 | 14:33 | Doku
// ******************************************************************
//[#DEUTSCH]
// ******************************************************************
//                     Ausschaltverzögerung
//  (Zeitbasis ist "ops.tAbsolut" d.h. die Zeitbasis ist 1 ms)
// ------------------------------------------------------------------
//			CLIENT: InValue -> zu Verzögerndes Signal
//					DelayTime -> Verzögerungszeit [1ms]
//  		SERVER: OutValue-> nach der Verzögerungszeit =>
//                  OutValue=InValue
//			PastTime: Verstrichene Zeit [ms]
// ------------------------------------------------------------------
//                        READ Funktion
// ------------------------------------------------------------------
// DelayTime in [1ms]
// Operation startet wenn InValue <> 0
// Um die Funktion reinitialisiert wenn InValue := 0;
// Um die Klasse zu verwenden rufen sie die Readfunktion
// ------------------------------------------------------------------
//			created 		:     BS  	:	       KW44/01
// ******************************************************************
//   getested: BS | 29.11.2001 | Lasal V00.53 | OPS V4.00
// ------------------------------------------------------------------
// last changes RM | 26:11:01 | 14:33 | Doku
// ******************************************************************
FUNCTION VIRTUAL GLOBAL Timer_Off::Init

    InValue := InValue.read(); 
    IF InValue = 0 THEN
		Trgmem		:= TRUE;
		DelayTime 	:= DelayTime.read();			// reading channel
  		OutValue	:= 0;                    		// 0
  		PastTime	:= DelayTime;
		TimeMark	:= ops.tAbsolute - PastTime; 
	END_IF;

END_FUNCTION //VIRTUAL GLOBAL Timer_Off::Init
//[#ENGLISH]
// ******************************************************************
//                Timer Off function
//  (Timebase is "ops.tAbsolut" so we have got 1 ms as Timebase)
// ------------------------------------------------------------------
//			CLIENT: InValue -> value to be spent
//					DelayTime -> Timebase [1ms]
//  		SERVER: OutValue-> after Delaytime, OutValue=InValue
//			PastTime: past time [ms]
// ------------------------------------------------------------------
//                operation of READ function
// ------------------------------------------------------------------
// DelayTime in [1ms]
// Operation starts when InValue <> 0
// To restart the Function: at first you have to set the InValue := 0
// it only works, if the readfunction is called
// ------------------------------------------------------------------
//			created 		:     BS  	:	       KW44/01
// ******************************************************************
//   tested: BS | 29.11.2001 | Lasal V00.53 | OPS V4.00
// ------------------------------------------------------------------
// last changes RM | 26:11:01 | 14:33 | Doku
// ******************************************************************
//[#DEUTSCH]
// ******************************************************************
//                     Ausschaltverzögerung
//  (Zeitbasis ist "ops.tAbsolut" d.h. die Zeitbasis ist 1 ms)
// ------------------------------------------------------------------
//			CLIENT: InValue -> zu Verzögerndes Signal
//					DelayTime -> Verzögerungszeit [1ms]
//  		SERVER: OutValue-> nach der Verzögerungszeit =>
//                  OutValue=InValue
//			PastTime: Verstrichene Zeit [ms]
// ------------------------------------------------------------------
//                        READ Funktion
// ------------------------------------------------------------------
// DelayTime in [1ms]
// Operation startet wenn InValue <> 0
// Um die Funktion reinitialisiert wenn InValue := 0;
// Um die Klasse zu verwenden rufen sie die Readfunktion
// ------------------------------------------------------------------
//			created 		:     BS  	:	       KW44/01
// ******************************************************************
//   getested: BS | 29.11.2001 | Lasal V00.53 | OPS V4.00
// ------------------------------------------------------------------
// last changes RM | 26:11:01 | 14:33 | Doku
// ******************************************************************
FUNCTION VIRTUAL Timer_OFF::Read
VAR_OUTPUT
	EAX		: DINT;
END_VAR

    InValue := InValue.read(); 
    IF InValue <> 0 THEN  
		Trgmem		:= FALSE;
		OutValue	:= InValue;
		PastTime	:= 0;
	ELSE
		IF Trgmem = FALSE THEN
			Trgmem		:= TRUE;
			TimeMark 	:= ops.tAbsolute;				// store Time
			DelayTime 	:= DelayTime.read();			// reading channel
			IF DelayTime = 0 THEN
				OutValue	:= InValue;
			END_IF;
		ELSE
      		PastTime := ops.tAbsolute - timeMark; 
  	  		IF PastTime > DelayTime | OutValue = 0 THEN	// Wait for Time is over
		  		OutValue	:= 0;                    	// Then Write 0
		  		PastTime	:= DelayTime;
	      		TimeMark	:= ops.tAbsolute - PastTime; 
			END_IF;
		END_IF;
	END_IF;

	EAX := OutValue$UDINT;
END_FUNCTION //VIRTUAL TOFF::Read

