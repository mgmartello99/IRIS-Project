//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES
#define MaxDragDelayCycles 20

// define of NewInst index to read hardware diagnosis data from HWK
#define LMCCONTROLLER_GET_HARDWARE_DIAGNOSIS      16#83B1

// defines to mark maximum values of DINT as floating number
#ifndef LMCCONTROLLER_DINT_MIN_LREAL
  #define LMCCONTROLLER_DINT_MIN_LREAL -2147483648.0
#endif

#ifndef LMCCONTROLLER_DINT_MAX_LREAL
  #define LMCCONTROLLER_DINT_MAX_LREAL 2147483647.0
#endif
//}}LSL_DEFINES

//{{LSL_DECLARATION

(*!
<Class
	Name               = "Controller"
	Revision           = "1.46"
	GUID               = "{2EE15EB7-1F89-11D5-90C4-006063018AE8}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)"
	Comment            = "Base class for the different types of the controller">
	<Channels>
		<Server Name="Signal_Input" GUID="{2EE15EB8-1F89-11D5-90C4-006063018AE8}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="This server shows the actual internal control variable and is &#13;&#10;connected to the _LMCAxis or CNC class."/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek"/>
		<Dokumentation Revision="1.46" Date="2023-06-28" Author="StePhi" Company="Sigmatek" Description="Improvement: Added interface SendSafetyData() and ReceiveSafetyData() to provide safety communication interface for connected axis class."/>
		<Dokumentation Revision="1.45" Date="2023-06-14" Author="StePhi" Company="Sigmatek" Description="Improvement: New parameter _LMCCONTROLLER_PAR_SET_QUICKSTOP_ERRRORREACTION added to _LMCCONTROLLER_SETPARAMETER type."/>
		<Dokumentation Revision="1.44" Date="2022-04-25" Author="MarTho" Company="Sigmatek" Description="Improvement: A SetParameter() method was added."/>
		<Dokumentation Revision="1.43" Date="2020-09-30" Author="MarTho&#13;&#10;StePhi" Company="Sigmatek" Description="Improvement: Added method declaration of ReadHWDiagnosisDriveAxis to read HW Diagnisos Data from a connected DriveAxis object.&#13;&#10;Bugfix: The definition &quot;MaxDragDelayCycles&quot; caused an identical redefinition warning when compiling. Therefore the definition was moved into the base class &quot;Controller&quot;."/>
		<Dokumentation Revision="1.42" Date="2018-06-26" Author="SatChr" Company="Sigmatek" Description="Bugfix: All virtual methods, which should be overridden, do not return an uninitialzed return value."/>
		<Dokumentation Revision="1.41" Date="2015-03-06" Author="SatChr" Company="Sigmatek" Description="Improvement: New methodes: ControlLongReal, CheckHwReady, ReadActPosition, ReadPDO, IsReadyToSwitchOn (for future use)"/>
		<Dokumentation Revision="1.40" Date="2013-07-18" Author="SliMic" Company="Sigmatek" Description="1. Add some comments to the methodes and variables"/>
		<Dokumentation Revision="1.30" Date="2012-09-27" Author="RauAnd" Company="Sigmatek" Description="Modified for use with the _LMCAxis class."/>
		<Dokumentation Revision="1.20" Date="2011-05-02" Author="FuchsH" Company="Sigmatek" Description="Comments newly formatted."/>
		<Dokumentation Revision="1.10" Date="08.04.2010" Author="RauAnd" Company="Sigmatek" Description="Updating of the clients, server and methods documentation"/>
		<Dokumentation Revision="1.2" Date="22.01.2010" Author="RauAnd" Company="Sigmatek" Description="Updating of the clients, server and methods documentation"/>
		<Dokumentation Revision="1.1" Date="05.05.2008" Author="Rauand" Company="Sigmatek" Description="Improvement to use the position control in the drive"/>
		<Dokumentation Revision="1.0" Company="Sigmatek" Description="Creation"/>
	</RevDoku>
</Class>
*)
Controller : CLASS
	TYPE
	  _AXISCLASS :
	  (
	    _AXIS_CNC,
	    _AXIS_LMCAXIS,
	    _AXIS_CNC_NO_HW,
	    _AXIS_LMCAXIS_NO_HW,
	    _AXIS_CNC_OPT_HWCLASS_v1,
	    _AXIS_LMCAXIS_OPT_HWCLASS_v1
	  )$UDINT;
	  _LMCCONTROLLER_SETPARAMETER :  //! <Type Public="true" Comment="Parameter-ID" Name="_LMCCONTROLLER_SETPARAMETER"/>
	  (
	    _LMCCONTROLLER_PAR_SET_CYCLIC_DRIVE_ENABLED_CHECK,  //! <Type Comment="Parameter to deactivate/activate the cyclic read check of client &quot;DriveEnabled&quot;.&#13;&#10;Value = &#13;&#10;0 ... deactivate the cyclic check&#13;&#10;1 ... activate the cyclic check (default)" Name="_LMCCONTROLLER_SETPARAMETER._LMCCONTROLLER_PAR_SET_CYCLIC_DRIVE_ENABLED_CHECK"/>
	    _LMCCONTROLLER_PAR_SET_QUICKSTOP_ERRORREACTION  //! <Type Comment="Parameter to set the error reaction for VFDControl. When this option is set the controller will trigger a quick stop instead of the default ramp in case of an error.&#13;&#10;Value = 0 ... default brake ramp in case of an error&#13;&#10;Value = 1 ... quickstop ramp in case of an error" Name="_LMCCONTROLLER_SETPARAMETER._LMCCONTROLLER_PAR_SET_QUICKSTOP_ERRORREACTION"/>
	  )$UDINT;
	  t_e_LMCCONTROLLER_SAFETY_PARAM :  //! <Type Public="true" Comment="Public type defining the interface parameter for SendSafetyRequest() und ReceiveSafetyRequest().&#13;&#10;Interface between _LMCAxis and Controller class to pass safety information between them.&#13;&#10;Not every parameter is bidirectional. Check the comment of the single parameter to see how it is used." Name="t_e_LMCCONTROLLER_SAFETY_PARAM"/>
	  (
	    _LMCCONTROLLER_SAFETY_GETVERIFYSTATE,  //! <Type Comment="Returns the verify state of the axis. The command triggers the command, wait until the result is valid and returns the result.&#13;&#10;Only ReceiveSafetyRequest().&#13;&#10;para1 = Verify command state&#13;&#10;para2 = Verify command value&#13;&#10;para3 = Verify execution state&#13;&#10;para4 = Verify execution value" Name="t_e_LMCCONTROLLER_SAFETY_PARAM._LMCCONTROLLER_SAFETY_GETVERIFYSTATE"/>
	    _LMCCONTROLLER_SAFETY_GETREFERENCESTATE,  //! <Type Comment="Returns the reference state of the axis. The command triggers the command, wait until the result is valid and returns the result.&#13;&#10;Only ReceiveSafetyRequest().&#13;&#10;para1 = Reference command state&#13;&#10;para2 = Reference command value&#13;&#10;para3 = Reference execution state&#13;&#10;para4 = Reference execution value" Name="t_e_LMCCONTROLLER_SAFETY_PARAM._LMCCONTROLLER_SAFETY_GETREFERENCESTATE"/>
	    _LMCCONTROLLER_SAFETY_GETSAFETYRUNSTATE,  //! <Type Comment="Returns the actual safety state of the axis. No active request to the drive - only the value on the HWK.&#13;&#10;Only ReceiveSafetyRequest())" Name="t_e_LMCCONTROLLER_SAFETY_PARAM._LMCCONTROLLER_SAFETY_GETSAFETYRUNSTATE"/>
	    _LMCCONTROLLER_SAFETY_GETSBTSTATE,  //! <Type Comment="Returns the state of the safe brake test feature.&#13;&#10;Only ReceiveSafetyRequest()&#13;&#10;para1 = SafeBrakeTestStatus&#13;&#10;para2 = BrakeTestStatus&#13;&#10;para3 = BrakeTestErrorInfo&#13;&#10;para4 = TimeTillNextTest" Name="t_e_LMCCONTROLLER_SAFETY_PARAM._LMCCONTROLLER_SAFETY_GETSBTSTATE"/>
	    _LMCCONTROLLER_SAFETY_GETSBTTESTTIME,  //! <Type Comment="Interface to read the test duration of a SBT test for a single application of the test torque." Name="t_e_LMCCONTROLLER_SAFETY_PARAM._LMCCONTROLLER_SAFETY_GETSBTTESTTIME"/>
	    _LMCCONTROLLER_SAFETY_GETSBTMINTORQUE,  //! <Type Comment="Interface to read the minimal torque which is applied when a SBT test is active." Name="t_e_LMCCONTROLLER_SAFETY_PARAM._LMCCONTROLLER_SAFETY_GETSBTMINTORQUE"/>
	    _LMCCONTROLLER_SAFETY_GETSBTTESTINTERVAL,  //! <Type Comment="Interface to read the configured test interval for SBT tests. Every test interval time a SBT test must be performed." Name="t_e_LMCCONTROLLER_SAFETY_PARAM._LMCCONTROLLER_SAFETY_GETSBTTESTINTERVAL"/>
	    _LMCCONTROLLER_SAFETY_GETSAFETYERROR,  //! <Type Comment="Parameter to read the safety error from the hardware class.&#13;&#10;It can be decided by the mode if the error information of the first or second controller is received&#13;&#10;Mode := 0 ... Error information from the first safety controller&#13;&#10;Mode := 1 ... Error information from the second safety controller&#13;&#10;The para values are written in following form&#13;&#10;pPara1 = SafetyErrorCode_SCx&#13;&#10;pPara2 = SafetyErrorInformation1_SCx&#13;&#10;pPara3 = SafetyErrorInformation2_SCx&#13;&#10;pPara4 = SafetyErrorInformation3_SCx&#13;&#10;" Name="t_e_LMCCONTROLLER_SAFETY_PARAM._LMCCONTROLLER_SAFETY_GETSAFETYERROR"/>
	    _LMCCONTROLLER_SAFETY_GETSAFETYFUNCERROR,  //! <Type Comment="Parameter to read the safety function error info &#13;&#10;para1 = SafeErrorWord&#13;&#10;para2 = SafeFunctionErrorID&#13;&#10;para3 = SafeFunctionInErrID&#13;&#10;para4 = SafeFunctionErrSubID" Name="t_e_LMCCONTROLLER_SAFETY_PARAM._LMCCONTROLLER_SAFETY_GETSAFETYFUNCERROR"/>
	    _LMCCONTROLLER_SAFETY_READAXISSTATE:=101,  //! <Type Comment="Read value of AxisState server of hardware class. Only ReceiveSafetyRequest()." Name="t_e_LMCCONTROLLER_SAFETY_PARAM._LMCCONTROLLER_SAFETY_READAXISSTATE"/>
	    _LMCCONTROLLER_SAFETY_GETSAFECNTRLSTATEWORD,  //! <Type Comment="Parameter to read the safety function error info &#13;&#10;para1 = SafeControlWord&#13;&#10;para2 = SafeStateWord&#13;&#10;para3 = ActiveSafeFunctions&#13;&#10;para4 = Valid" Name="t_e_LMCCONTROLLER_SAFETY_PARAM._LMCCONTROLLER_SAFETY_GETSAFECNTRLSTATEWORD"/>
	    _LMCCONTROLLER_SAFETY_DOSAFETYAXERRORQUIT:=201,  //! <Type Comment="Parameter can be used to send a safety quit error to the connected axis.&#13;&#10;Following modes are supported&#13;&#10;1 ... Restart Acknowledge of safety function error word for safety functions like STO, SS1, ...&#13;&#10;2 ... Error Acknowledge of safety function error word for safety functions like SLS, SLA, SMS, SMP, ...&#13;&#10;4 ... Quit Error for safety fw errors " Name="t_e_LMCCONTROLLER_SAFETY_PARAM._LMCCONTROLLER_SAFETY_DOSAFETYAXERRORQUIT"/>
	    _LMCCONTROLLER_SAFETY_SETVERIFYAXIS,  //! <Type Comment="Set VerifyAxis for axis. Can be triggered via _LMCAxis VOV or SetSafetyState(). Only SendSafetyRequest()." Name="t_e_LMCCONTROLLER_SAFETY_PARAM._LMCCONTROLLER_SAFETY_SETVERIFYAXIS"/>
	    _LMCCONTROLLER_SAFETY_SETREFERENCEAXIS,  //! <Type Comment="Set safety reference for axis. Triggers the procedure for a safety reference of the axis on drive.&#13;&#10;Only SendSafetyRequest()." Name="t_e_LMCCONTROLLER_SAFETY_PARAM._LMCCONTROLLER_SAFETY_SETREFERENCEAXIS"/>
	    _LMCCONTROLLER_SAFETY_SETACKZEROPOSITION,  //! <Type Comment="Set acknowledge of the position of the axis after returning to the safety reference position.&#13;&#10;Only SendSafetyRequest()." Name="t_e_LMCCONTROLLER_SAFETY_PARAM._LMCCONTROLLER_SAFETY_SETACKZEROPOSITION"/>
	    _LMCCONTROLLER_SAFETY_SETSBTSTATE,  //! <Type Comment="Start and trigger SBT Test.&#13;&#10;Only SendSafetyRequest()." Name="t_e_LMCCONTROLLER_SAFETY_PARAM._LMCCONTROLLER_SAFETY_SETSBTSTATE"/>
	    _LMCCONTROLLER_SAFETY_SBTACTIVE,  //! <Type Comment="Internal handling between _LMCAxis and controller. Controller receives the actual state of the SBT.&#13;&#10;Only SendSafetyRequest()." Name="t_e_LMCCONTROLLER_SAFETY_PARAM._LMCCONTROLLER_SAFETY_SBTACTIVE"/>
	    _LMCCONTROLLER_SAFETY_CHANGESERVICEMODE,  //! <Type Comment="Parameter to send a command to change the service mode of the connected drive.&#13;&#10;ParamValue := 1 ... Set Service Mode&#13;&#10;ParamValue := 2 ... Leave Service Mode" Name="t_e_LMCCONTROLLER_SAFETY_PARAM._LMCCONTROLLER_SAFETY_CHANGESERVICEMODE"/>
	    _LMCCONTROLLER_SAFETY_LOGINAXIS:=301  //! <Type Comment="Special command to allow login of _LMCAxis object at DriveMngBase to receive safety updates via callback" Name="t_e_LMCCONTROLLER_SAFETY_PARAM._LMCCONTROLLER_SAFETY_LOGINAXIS"/>
	  )$UDINT;
	END_TYPE
  //Servers:
	Signal_Input 	: SvrChCmd_DINT;
  //Clients:
  //Variables:
		AxisType 	: _AXISCLASS;
  //Functions:
				//! <Function Comment="Receives as input from the CNC/_LMCAxis, the Actual Position and the Internal Position." Name="control"/>
	FUNCTION VIRTUAL GLOBAL control
		VAR_INPUT
			ActPos 	: DINT;
			IntPos 	: DINT;
		END_VAR
		VAR_OUTPUT
			Result 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ControlLongReal
		VAR_INPUT
			ActPos 	: LREAL;
			IntPos 	: LREAL;
			IntSpeed 	: LREAL;
		END_VAR;
				//! <Function Comment="Updates the CNC StateFlags and the CNC ControlFlags" Name="StatePtr"/>
	FUNCTION VIRTUAL GLOBAL StatePtr
		VAR_INPUT
			StatePtr 	: ^CncFlags;
			CncstatePtr 	: ^CntrFlgs;
		END_VAR
		VAR_OUTPUT
			Result 	: DINT;
		END_VAR;
				//! <Function Comment="Adopts the addresses of the Servers: AxisStatus, AxisError and the Bitfield:AxisControl&#13;&#10;around this for reading and updating" Name="SetAxisFlgs"/>
	FUNCTION VIRTUAL GLOBAL SetAxisFlgs
		VAR_INPUT
			pAxisStatus 	: ^_LMCAXIS_STATUS;
			pAxisError 	: ^_LMCAXIS_ERROR;
			pAxisControl 	: ^_LMCAXIS_CONTROLBITS;
		END_VAR
		VAR_OUTPUT
			Result 	: _LMCCONTROLLERTYPE;
		END_VAR;
				//! <Function Comment="Function to test if we have a controller connected to the CNC/_LMCAxis" Name="WriteConstant"/>
	FUNCTION VIRTUAL GLOBAL WriteConstant
		VAR_INPUT
			Resolution 	: DINT;
			Timebase 	: DINT;
			Accel 	: DINT;
			ptrCNCIntStruct 	: ^CNCInternalStruct;
		END_VAR
		VAR_OUTPUT
			StartSpeed 	: DINT;
		END_VAR;
				//! <Function Comment="Function used for transmitting the Speed value from the CNC/_LMCAxis to the controller" Name="Speed"/>
	FUNCTION VIRTUAL GLOBAL Speed
		VAR_INPUT
			ActSpeed 	: DINT;
		END_VAR;
				//! <Function Comment="set Client values" Name="SetClients"/>
	FUNCTION VIRTUAL GLOBAL SetClients
		VAR_INPUT
			No 	: DINT;			//! <Variable Comment="The parameter number of the client that should be changed." Name="SetClients.No"/>
			Value 	: DINT;			//! <Variable Comment="The value to which the client should be changed." Name="SetClients.Value"/>
		END_VAR
		VAR_OUTPUT
			State 	: DINT;			//! <Variable Comment="0 =&gt; Error : The number entered was invalid or controller is active&#13;&#10;1 =&gt; Ok" Name="SetClients.State"/>
		END_VAR;
				//! <Function Comment="checks if the drive is enabled or not" Name="PowerIsOn"/>
	FUNCTION VIRTUAL GLOBAL PowerIsOn
		VAR_OUTPUT
			RetCode 	: BOOL;			//! <Variable Comment="true ... Drive is enabled" Name="PowerIsOn.RetCode"/>
		END_VAR;
				//! <Function Comment="checks if a Hardware Error is activ" Name="CheckHWError"/>
	FUNCTION VIRTUAL GLOBAL CheckHWError
		VAR_OUTPUT
			Retcode 	: BOOL;
		END_VAR;
				//! <Function Comment="Check wether the hardware is ready for communication." Name="CheckHwReady"/>
	FUNCTION VIRTUAL GLOBAL CheckHwReady
		VAR_OUTPUT
			IsReady 	: BOOL;
		END_VAR;
				//! <Function Comment="Controller parameters can be set with this method. " Name="SetParameter"/>
	FUNCTION VIRTUAL GLOBAL SetParameter
		VAR_INPUT
			ParNr 	: _LMCCONTROLLER_SETPARAMETER;			//! <Variable Comment="Parameter number" Name="SetParameter.ParNr"/>
			Value 	: DINT;			//! <Variable Comment="New value" Name="SetParameter.Value"/>
		END_VAR
		VAR_OUTPUT
			RetCode 	: DINT;			//! <Variable Comment="Return code of the method call.&#13;&#10;In the case of a value smaller than 0, the set parameter call failed." Name="SetParameter.RetCode"/>
		END_VAR;
				//! <Function Comment="Read Controller specific parameters" Name="ReadParameter"/>
	FUNCTION VIRTUAL GLOBAL ReadParameter
		VAR_INPUT
			No 	: DINT;			//! <Variable Comment="Parameter number" Name="ReadParameter.No"/>
		END_VAR
		VAR_OUTPUT
			Value 	: DINT;
		END_VAR;
				//! <Function Comment="Read the actual encoder position from the drive&#13;&#10;for DrivePosControl and _LMCSigControl only." Name="ReadActPosition"/>
	FUNCTION VIRTUAL GLOBAL ReadActPosition
		VAR_OUTPUT
			BinPos 	: DINT;			//! <Variable Comment="actual position in external units" Name="ReadActPosition.BinPos"/>
		END_VAR;
				//! <Function Comment="This methode is called at the beginig of each realtime cycle by the _LMCAxis object. DrivePosControl and _LMCSigControl use this interface to get all information from the hardware class _DriveAxis" Name="ReadPDO"/>
	FUNCTION VIRTUAL GLOBAL ReadPDO;
				//! <Function Comment="function to quit a hardware error" Name="QuitHWError"/>
	FUNCTION VIRTUAL GLOBAL QuitHWError;
				//! <Function Comment="Check whether the hardware is ready for switch on." Name="IsReadyToSwitchOn"/>
	FUNCTION VIRTUAL GLOBAL IsReadyToSwitchOn
		VAR_OUTPUT
			IsReady 	: DINT;
		END_VAR;
				//! <Function Comment="Method declaration to read the HW Diagnosis data of a connected DriveAxis object. &#13;&#10;Must be overwritten." Name="ReadHWDiagnosisDriveAxis"/>
	FUNCTION VIRTUAL GLOBAL ReadHWDiagnosisDriveAxis
		VAR_OUTPUT
			pHWDiagnosis 	: ^DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ReceiveSafetyRequest
		VAR_INPUT
			SafetyParam 	: t_e_LMCCONTROLLER_SAFETY_PARAM;
			pPara1 	: ^DINT;
			pPara2 	: ^DINT;
			pPara3 	: ^DINT;
			pPara4 	: ^DINT;
			Mode 	: DINT;
		END_VAR
		VAR_OUTPUT
			RSRRetState 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL SendSafetyRequest
		VAR_INPUT
			SafetyParam 	: t_e_LMCCONTROLLER_SAFETY_PARAM;
			ParamValue 	: DINT;
			ParamMode 	: DINT;
		END_VAR
		VAR_OUTPUT
			SSRRetState 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Controller::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_CONTROLLER
1$UINT, 46$UINT, (SIZEOF(::Controller))$UINT, 
1$UINT, 0$UINT, 0$UINT, 
TO_UDINT(1198357413), "Controller", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Controller.Signal_Input.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(2233060755), "Signal_Input", 
//Clients:
END_FUNCTION


#define USER_CNT_Controller 19

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Controller] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Controller::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_Controller, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Write		:= #M_WR_DIRECT();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #control();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #ControlLongReal();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[2]		:= #StatePtr();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[3]		:= #SetAxisFlgs();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[4]		:= #WriteConstant();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[5]		:= #Speed();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[6]		:= #SetClients();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[7]		:= #PowerIsOn();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[8]		:= #CheckHWError();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[9]		:= #CheckHwReady();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[10]		:= #SetParameter();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[11]		:= #ReadParameter();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[12]		:= #ReadActPosition();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[13]		:= #ReadPDO();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[14]		:= #QuitHWError();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[15]		:= #IsReadyToSwitchOn();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[16]		:= #ReadHWDiagnosisDriveAxis();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[17]		:= #ReceiveSafetyRequest();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[18]		:= #SendSafetyRequest();

#pragma warning (default : 74)
	Signal_Input.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Signal_Input.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
//{{LSL_ENCRYPTION 16#800
B80450B9F342212FF2412A957A14F9956E214CC0267D80FC6F6EF994D820730C4A115A26B3AB3706F29E5AB8E148BA21EA32FB359AC5ACDE85FFA05018A534DC4B34B3649722668A786E69CB01A0D98CF497BA0254C044069CDE519E978BB29551B86BEF
CA102A9AF996BB8305449BACC13EC3476B78E563138DC1313A16B605CED19863224670A121F53D37CFFA838ED77B824BF8730D78ACC5895708535903B6FFEAFB4125DD4C8CB6D0325C5590AECD2A2A6DCD0B0F6CDA8B7F32253F921EEB39A6BD4FBE2130
4A5F3513CC56AB8009B4C59BD9A4F6F10A5FFC89D1205ED4D3C83FC30DA34C5F953B25864AC68E3C67208A32FC0DC4835F027967EADAE1BBAA919AA06E5CD551FF8C1CA5FFBDA2D5843DCE499E5A0EC0E48229B794FFBFD2E0DBA388DBA6A9DA3EB94E14
CF810F5B42CD3FA8B881804D8FE48C027B4585214EFC0AB17AB90F157CD842BDF9403C161F6BC681B36C344AAD05B4FE5E2CD76B421975778B52F6EF1E6C2C1209F7A4998C70D2FE40D9F0F371D16987F42CA8B5E8B157696D3FD265645231E00C1EE110
D14C218D63A26B0010894B8EFA4188CB6000B5928259859B836C3132BF77EC124FDA5F4B2CD3C1BEBE6C323F1BBA619F1B168F7DAC620505341E80E9F89A4EC51D4ADE2F9B7C2ED75F775B6382C06057527A8AB32D222EFE7C73509543B2FC0351959655
2CCD86395EF8CDE82294A447E4EF55EFEBBF74661A4A0C264F9136D68DC6FDBD9AC103B0B9F6848F5F6724116507E4FB402A5AEC4CF5AD95FD12814F180A1ADEBB36D052948C005FC14651B80FD7E586AF7923DCF505722D53EBF661EF6FBB5954A0E6E7
FBE4783F8F2DC55F96EC4C1B975A259F33C7152B1257913DD33EB1B30E6AD1A01A18092D09E54538D005B7F08929AB83756B97E45925A7DBB72ADC67C5B04587FA7C029DD4F31CB314B70FAC268393F54E09EB6D6ADE4AA956C2A304CE2AB19E01D91757
9B99978D3E31841E541E936C5555370FAE316408569D4DA7940BE786AACEAAABE29593F8F429FF705ECFBBE3F98E289787B5FD4EC6894BF3C29DA21E108D6CB631EBDB1AE8AEC45302CD35DF38DD2FDDCCE67E7CF592F2C45DFD5BE9CF4251854F5EEDF4
341E20E12B08939C61CFB40A62C66924F21F67289B9608A2DE8D14B35E1EFCC50503DDF9C5743AD78CDB7F7D1FD96C536DFD8FC559EFDA1E8E96A9FAA2E12AC54F529CA3AE01CD60F1E297A223A3BB90DCBBC33870E0DFA8178FB0F7073485E04806F70B
316B07936A7D2BEDCAAF254EE2781FA967CE1C675F1F4C09B1578C1EA5E99405B75ACE4AF4CE1383A63A4C8D3F510A63D6A5A205B841C5BF88DCFDF07C1D3F8861A3BBB31B5F18512E42E72B04AF2FB1CFDC44EE6B363A074B7677B6CE4279ACA33823F4
D2140A4860233131D6254BAB07749275515A853382D9E6B634DDC893630BED4D0A537A9FC2DBA45A0D0AD13A08EDCE87BB43F2A3656A1BCA715D486D200DF8E19D7ABEFCF32B047F57AC36AA09264953DDFC9CC52D9B9E286284C8619D27DF47B897F2EF
7F5028E721A3A6B4A906B20A9F0A672AB23E8D99922B6A9F0048BE8A6FA45FD46451EE2530B14E0E02A4B9CF76FAE348CFD6A54510AFA2F4D92F9058DF4E7BC32155E47EDCDA49BEFA6DAF3FAF76305321018A2B6940A495B6C9D78BF5EC6BA15B21D845
1D991CC53FA3B3D3BA2AD8B7F42239923EADF5E43A5DDA4EF5F711AB9D2B1E4561BBAA1929072A1463C9EC413AA804AF785A072668ED5E2C49CFCE6036395D0B36E995D4B47FAE4D5CAA0080652900F79447B13302A844FC26FC13BF89ACFFB16E3A49EB
C2DFD82E88C6EF2A3E2AAD2D83666F9983AF04E843FFE68087C9F7E9550C6BDD26A28845799A2FDE119184537FF18CDE446DCA96FE188E5FB100AEAB061FC57BE3D75F50E2A8AB34732E4D8189ADE3EE8E3E71CFFCE3E0EB0EBC2B7F77D3B51C165DF40D
0EDE4C639943EB02C64E139B9760FE35E36D41A5091D75C5B004BC629BA64E98C7F8E3DF4E4347052377D280993F271BC48BBC351CC989DBABD4C70A173C24B8BEC5D692E904FE590B84F0915CF8600573DB6F7C6C4DE7A998E6C31A051247B59B9B94E9
657F2AEDBB76AE0506F122B6FE87C3654832A5AE990E96071A467B03BB8758AD19ACEFE12B0AF50959D1F30B64E7EB7179044DD677FFDEB6A84B871D113CEF35CF7E889DE5CBE7D9123224F4B4B29ECEC0455E676D42097F2E2F63E988A2E99739CEE346
F81EB6670F452025A98EDDCCE4219FFDCB9271F6C4C4DB6856FE363E4B6F91EF72515787FBE2D381A2BCD60E078A3E24E576D33B710ADE398A06A1D278A2BF71EF255FB7C60B84F7E5FA3AECC2488287C4965C31EDB3B9AB5950BD2CD189CE9F1016A56D
C44BE93BC4D3ED8D1A85AAFA7DD5E77645C7C9CF7F919A222DA159B06847D3BC1EB602695C5013866DC793411427AF4E02900AABEC0BE1F7238846B6E3521506497DAD973B5FD46B1948212D1479346F650C062103149563BD114B948F7E87558A8671EC
4D2CE10BA49479BEAC22BF4CBB4920C649B0033A7DB8C572C833790DE4D7C220B1823B156F46D3E990D5F089E35735C2E4C4D4D0613D1CEE472B723542BD52A6D2407910D0F816B4735576CFF3C8954E3797D156EF31BC810C0150EB76800A3764A700B7
6C4A459169A570CB642155574C932BC6F603EF2BA250D8F69545A5F932C4CF1BEFE4D20A8D7C989C2DFB45AFA4AA4F941691549F91248FB934CB2B04F9A5237F40B79975B5330FA1760926067087A29D3DC9BA5ECF5BBAF0E9C216D3A61A598050B3455C
7A8842EE4FE63F3E2A32C4E0449B8A751D22D904AD8E3EA6D2279B10D003F6051619F43134494CF6CF8C9B6BE0022304AE1FD9C6E3BC6F5AF658B5FAB634EBDDAC3F36F0787C9FF6A6488FD50630E81120DF3CB5A67B723FA59AB06924EC924DAA6B79A8
FC0528DE3B2CAA79788324F6A86C665D633B7585D89E2974EE508EFD2BB689992830E7E6732A2D7FFF40179CE5C01F0CFA723764B8C35FA066BFB17015F6847BFA55D6A74DAE4FFB6777DE2D98480FF1C88C21509831C7A1DEBDD419BD1E65A8347B0782
FCD3BFEFFC28228CC2BD114EEEE0F2AFEEC6C67FDAA304DF6D05ACE1EB95360538D5BFBCC44292346435CE62B75DC9C478B4F84F34F82BAF4DF09796786BAD29DC77933932A5B1119BC7DEA24929E4E3500FC2AE43EC7FC05934C3E13D62FAD183AFE34C
499EFDA6E20F20A752B28AF5426D43EADAB4978384ED1C03C42FF74CC07497D3D99633E47DC4980102CB046AF65FE9BE15C17E532DAF2DFA3B9CC2BB7F66EB54D735665DD2F652435AE6118DDD1869FFA460592EFE16671BCB272CE719EC06AF5ED54134
6BE7C0FB771978253148C15C335C4122E470A1C273B3AAE7E8B8703FBA3962B2CF9DE3F8AE75311F5A6086D2BC921883C732AEF6A71697FE2A38FAE0015C5655CBB70349AF89C40285320F6A9CD24E89749A4A1DD5CC7BD9BF4CCB3C451E1BBB9C5A020B
C0B4D598998EC6AFFEC0E56037406357371A7B20F248D33075EE5DC6027E536D6AC1A44F8C36BF360171A9D4E79AD1CE96DC6AF78AAD353BB30BA30A65A0371DE04D020911D4990EFE4396CBB94EC72F8D5CA2A912C0D88339F5FEB170426878D6E7842B
F6FB263675D972E0908C0C4E390FC2D56E40D3115099C35F2682471676E5639E3B8C15702917C6FBB7E88F911E43F645AB6AFECDA07CCCFB099297E10F9BE1F30D86D1D55B4C4180F55958FE16DD98BA06E7B373ECE37EF50241305A700B80F457E57E38
EF4735C9E0DE56457B5B1F99844B7AB79C4411341916932755043E168D5E661DF101864725D3422F65FA74AC1C05BE18C64B8279C5A824C601495B137550C73B2C2612A0787F3A82F5C1413FFB1A6DBAAB7E5F8C4A5A03F5A3EB489279D2202D418EB065
A0E6FDF77BC3E5BCAC6D7E1D38E94A4A54569680FD52D91D86DEB4D842656AF056339CA01598E0C1A3DF8A22BB868B6C2DF54DF9C439810721332C7C357BBEB6ABAC46D01B6FAB70407B52CDE69578CDDA975348ACBFACFD1A7F55EB082DFDEC2668326A
F49B81AE94A65988379FC710C61CABC6D47AA27E20BB5224937D50369F4FC16C50D7BB3ECA25F6AF744870E120335C2BFB1E7FB3A9B4FC0C73BB16D253BBE42BEDA3BFEFBA8F95AC0769A78290190CABE2A31212201B75B63E24968A2E313B0615B71023
13DC58FA4FD623FA17F63E1F1F6161F17DFB6C4CF247251059A8C60958EFC20C1F7C345B2BDF557C37FCD8D6755412322A662CFBEAB14D65ED78CE17F00983D228454DFACC3C45D890F3929FD702CE724B1E2E17C6386F90F77F5F7A56054948A4E36639
4615C74A6BF88EA6EEEE346FB1BEF50AB84EF08B9C5087BC803EA60F8D7E2437F8F633B3A8B7E842AF54B6AE60C7C60181952A2186DE5F5A91430DAB151C033AD9E782B996F88841F5BBCC9580830B57E7DA13F38BE404DEFC61D9D527B46D1A21FBAEE0
0728713385A13D073E849EA4B8C22004AFC3659492B856ECB66B7891A7B38103C609BA928E0873778F64228DCA3054DF5ADBF84DBB801AD15BCAC1F9DFBCAB2496A7AF752B41E2F6394E485570B1A132F7FDA7F32D84E0037129B284A02D20CE35F76083
A347B356FD0AA6FFEC411A79834447F1550E775FDC55FE2BC261276E6D840646B5027E055A9BEE242F9FD35431A325463BD635D65CC0441C69A3B7BD13CD32E246B915826314AAB262A64173476CCE529A24320BDBFDA2BEED243D516D7AD97836F86368
E5AFC83A8E6067ABFB5F9C324CD33E20A8AC9A38A38941E3DD9B20C9B804F33E0049AB7838047525D01EA35B480A2C570737D805E969F4B08BB3DA919D1252D40674D8717D74246DC00F3BBE1CB2150AE6CF78EAF1B40D1B10F5B48E8B94AB6C259CCA0B
3C3376153E5DEE87D6ACC7EB1538B18B550CB4A51E59C28FE9F33C6CE77151C988A91B85BB0840BCC24550288685C9DCDE18CBB53E8A6547D79520389EE84BBF6374E1350347D1FA16A33BBC738C76C05BE2E5FAEB711B3E196ADF46D3B929FE4E508E32
3B6F57011F12F5D292707FC2B0A81FE01E1855DA534B104A833D389480821D72D5EDDC53CC3E16B19F14DDC553478F82EA4D30D91CA334D39EB18597EDE8C85F9850735A1188F7ABCF50056E49C75EFB958A4FCA806354E94EEC295105313F5DA3E20A11
CAE6D0450BB4AA2B8345F4BA5BCD47819367D82B4511FAF4CD24885D9318E5E59DF999DB1127EC087FD52F59082E4C4DC81E9A0F16BD56025ACC6DB69DCED2FEC709786766CDFC19ACE24784F91B4E1BF9F09FE2266DD07D66FD20C3FD2F4740DBEE2A88
0F9D76F57BB0AAFE74FFA933161EE0DD22E482629BDE91EBB776DEAB60E3386443D575FC38CA193234307CEC4C84A11B0932B8C35ADDAABC6BA6078CDEAD2150A11CFD93823DE6ABDE84C10861134A1754FA6EA9303A766816D8B6698A73A29555ADDA8B
4637C4A06CA1D60418B7154803C4FCF98EE64732275ED777189710938942D5BDF29D72AE76676BBA1947E24E7E0E1FB85CC7216E676C411D8E76EDDDE290DC0294220EE16F67D64D0121A8052074BC9D300BC4A515A693A40CE79A59CB17D75336549DA3
5A566C9FBBDCF6D212FD8E8DEA1FECA156A470D5356A96BF7AC704D5B721004B9C591DC5DA35D66E70A316192CDF22EA1CDC2933AE0BBD2927BB8D7D2DBA118D2BF80223F8BB6FCAAC1481A950F12A500CAEFD5CCA4875C2B3291D7953224130