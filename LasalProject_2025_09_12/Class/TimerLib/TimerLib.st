//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "TimerLib"
	Revision           = "1.0"
	GUID               = "{B11B81F5-C173-47DB-946B-F3802F4EED23}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\TimerLib\TimerLib.ico"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)"
	Comment            = "//[#ENGLISH]&#13;&#10;//****************************************************************&#13;&#10;//-- This class is for realizing a timer --&#13;&#10;//-- You can call the methods global or with an object channel --&#13;&#10;//****************************************************************">
	<Channels>
		<Server Name="ClassSvr" GUID="{8446D642-8B2D-421D-B92A-F844076069F5}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="//[#ENGLISH]&#13;&#10;//************************************************************&#13;&#10;//--  Interface for the object channel&#13;&#10;//************************************************************"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Class\TimerLib\TimeLibDef.h" Include="false"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="Sigmatek" Author="hötant"/>
		<Dokumentation Revision="1.0" Date="05.07.10" Author="hötant" Company="Sigmatek" Description="creation of Class"/>
	</RevDoku>
</Class>
*)
TimerLib : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
  //Clients:
  //Variables:
  //Functions:
				//! <Function Comment="//[#ENGLISH]&#13;&#10;//************************************************************&#13;&#10;//-- This method saves the starttime on the variable --&#13;&#10;//************************************************************&#13;&#10;" Name="TimerStart"/>
	FUNCTION GLOBAL TimerStart
		VAR_INPUT
			pudStartTime 	: ^UDINT;			//! <Variable Comment="//[#ENGLISH]&#10;//******************************************************************&#10;//-- This method sets the time stamp variable of the user object --&#10;//-- to the actual time.                     --&#10;//******************************************************************&#13;&#10;" Name="TimerStart.pudStartTime"/>
		END_VAR;
				//! <Function Comment="//[#ENGLISH]&#10;//************************************************************&#10;//-- This method returns the remaining time, calculated out --&#10;//-- of a time stamp and a duration [ms].            --&#10;//************************************************************&#13;&#10;" Name="TimerRest"/>
	FUNCTION GLOBAL TimerRest
		VAR_INPUT
			pudStartTime 	: ^UDINT;
			udDuration 	: UDINT;
		END_VAR
		VAR_OUTPUT
			udRemainingTime 	: UDINT;
		END_VAR;
				//! <Function Comment="//[#ENGLISH]&#10;//************************************************************************&#10;//-- This method checks, if the given duration has passed since calling --&#10;//-- the method TimerStart.                       --&#10;//************************************************************************" Name="IsTimerFinished"/>
	FUNCTION GLOBAL IsTimerFinished
		VAR_INPUT
			pudStartTime 	: ^UDINT;
			udDuration 	: UDINT;
		END_VAR
		VAR_OUTPUT
			fFinished 	: BOOL;
		END_VAR;
				//! <Function Comment="//[#ENGLISH]&#10;//******************************************************************&#10;//-- This method returns the time, which has passed since calling --&#10;//-- the method TimerStart.                    --&#10;//******************************************************************" Name="TimerAct"/>
	FUNCTION GLOBAL TimerAct
		VAR_INPUT
			pudStartTime 	: ^UDINT;
		END_VAR
		VAR_OUTPUT
			udPassedTime 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB TimerLib::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_TIMERLIB
1$UINT, 0$UINT, (SIZEOF(::TimerLib))$UINT, 
1$UINT, 0$UINT, 0$UINT, 
TO_UDINT(3890592521), "TimerLib", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::TimerLib.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
//Clients:
END_FUNCTION


#define USER_CNT_TimerLib 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_TimerLib] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION TimerLib::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR

	ret_code := C_OK;

END_FUNCTION

//{{LSL_IMPLEMENTATION
//[#ENGLISH]
//************************************************************
//-- This method saves the starttime on the variable --
//************************************************************
FUNCTION GLOBAL TimerLib::TimerStart
	VAR_INPUT
		pudStartTime 	: ^UDINT;
	END_VAR

	pudStartTime^ := ops.tAbsolute;

END_FUNCTION
//[#ENGLISH]
//************************************************************
//-- This method returns the remaining time, calculated out --
//-- of a time stamp and a duration [ms].            --
//************************************************************
FUNCTION GLOBAL TimerLib::TimerRest
	VAR_INPUT
		pudStartTime 	: ^UDINT;
		udDuration 	: UDINT;
	END_VAR
	VAR_OUTPUT
		udRemainingTime 	: UDINT;
	END_VAR

  if ((ops.tAbsolute - pudStartTime^) >= udDuration) then //If the timer is finished
    udRemainingTime := 0;
  else 
		udRemainingTime := pudStartTime^ - (ops.tAbsolute - udDuration);
  end_if;

END_FUNCTION
//[#ENGLISH]
//************************************************************************
//-- This method checks, if the given duration has passed since calling --
//-- the method TimerStart.                       --
//************************************************************************
FUNCTION GLOBAL TimerLib::IsTimerFinished
	VAR_INPUT
		pudStartTime 	: ^UDINT;
		udDuration 	: UDINT;
	END_VAR
	VAR_OUTPUT
		fFinished 	: BOOL;
	END_VAR

  fFinished := FALSE;

	// this is the right syntax for avoiding errors if ops.tAbsolute has
	// an overflow.
	//*******************************************************************
	if ((ops.tAbsolute - pudStartTime^) >= udDuration) then
		fFinished := TRUE;
	end_if;

END_FUNCTION
//[#ENGLISH]
//******************************************************************
//-- This method returns the time, which has passed since calling --
//-- the method TimerStart.                    --
//******************************************************************
FUNCTION GLOBAL TimerLib::TimerAct
	VAR_INPUT
		pudStartTime 	: ^UDINT;
	END_VAR
	VAR_OUTPUT
		udPassedTime 	: UDINT;
	END_VAR
  
	udPassedTime := ops.tAbsolute - pudStartTime^;

END_FUNCTION
//[#ENGLISH]
//************************************************************************
//-- This method checks, if the given duration has passed since calling --
//-- the method TimerStart.                       --
//************************************************************************
FUNCTION GLOBAL IsTimerFinished
	VAR_INPUT
		pudStartTime 	: ^UDINT;
		udDuration 	: UDINT;
	END_VAR
	VAR_OUTPUT
		fFinished 	: BOOL;
	END_VAR

  fFinished := FALSE;

	// this is the right syntax for avoiding errors if ops.tAbsolute has
	// an overflow.
	//*******************************************************************
	if ((ops.tAbsolute - pudStartTime^) >= udDuration) then
		fFinished := TRUE;
	end_if;

END_FUNCTION

FUNCTION GLOBAL TimerStart
	VAR_INPUT
		pudStartTime 	: ^UDINT;
	END_VAR

	pudStartTime^ := ops.tAbsolute;

END_FUNCTION
//************************************************************
//-- This method returns the remaining time, calculated out --
//-- of a time stamp and a duration [ms].            --
//************************************************************
FUNCTION GLOBAL TimerRest
	VAR_INPUT
		pudStartTime 	: ^UDINT;
		udDuration 	: UDINT;
	END_VAR
	VAR_OUTPUT
		udRemainingTime 	: UDINT;
	END_VAR

  if ((ops.tAbsolute - pudStartTime^) >= udDuration) then //If the timer is finished
    udRemainingTime := 0;                                 
  else 
		udRemainingTime := pudStartTime^ - (ops.tAbsolute - udDuration);
  end_if;

END_FUNCTION
//[#ENGLISH]
//******************************************************************
//-- This method returns the time, which has passed since calling --
//-- the method TimerStart.                    --
//******************************************************************
FUNCTION GLOBAL TimerAct
	VAR_INPUT
		pudStartTime 	: ^UDINT;
	END_VAR
	VAR_OUTPUT
		udPassedTime 	: UDINT;
	END_VAR
  
	udPassedTime := ops.tAbsolute - pudStartTime^;

END_FUNCTION
