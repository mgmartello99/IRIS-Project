//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "MoveTimer"
	Revision           = "0.0"
	GUID               = "{7EEAF13F-448E-4913-8A78-B905C3D5DE47}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	DefCyclictime      = "100 ms"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(530,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{A8BE368E-05C5-4A09-9F4E-97AE216A277B}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="s_1_3_pelletMode" GUID="{177E68B0-0E70-4CBB-8817-AA74D36B1311}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_MovTimer1" GUID="{0D8A8DF2-E16A-4A00-8734-75ECBC627E85}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_MovTimer2" GUID="{9DF822B2-43F8-4DE7-B9FD-F70418B9E298}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_MovTimer3" GUID="{D5F33AEE-B282-4268-8DD0-9AE3D11D1920}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_Reset" GUID="{564A0642-18FF-423D-9BA7-6FAFA4CAEBE8}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="s_StartStopTimer" GUID="{651B6161-04AB-4CFE-B9F8-FBE1438BA51F}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="c_SysDate" Required="true" Internal="false"/>
		<Client Name="c_SysTime" Required="true" Internal="false"/>
		<Client Name="c_timer" Required="true" Internal="false"/>
	</Channels>
</Class>
*)
MoveTimer : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	s_StartStopTimer 	: SvrCh_DINT;
	s_MovTimer1 	: SvrCh_DINT;
	s_MovTimer2 	: SvrCh_DINT;
	s_MovTimer3 	: SvrCh_DINT;
	s_Reset 	: SvrCh_DINT;
	s_1_3_pelletMode 	: SvrCh_DINT;
  //Clients:
	c_timer 	: CltChCmd_TimeDateLib;
	c_SysDate 	: CltCh_DINT;
	c_SysTime 	: CltCh_TIME_LSL;
  //Variables:
		v_hd_Date 	: HDINT;
		v_hd_Time_1_Start 	: HDINT;
		v_hd_Time_2_Start 	: HDINT;
		v_hd_Time_3_Start 	: HDINT;
		v_hd_Time_1_Stop 	: HDINT;
		v_hd_Time_2_Stop 	: HDINT;
		v_hd_Time_3_Stop 	: HDINT;
		v_day 	: UDINT;
		v_month 	: UDINT;
		v_year 	: UDINT;
		v_tot_minutes 	: DINT;
		case_Time 	: DINT;
		a 	: DINT;
		i 	: DINT;
		v_tot_seconds_1 	: DINT;
		v_tot_seconds_2 	: DINT;
		v_tot_seconds_3 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd TimeDateLib


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB MoveTimer::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_MOVETIMER
0$UINT, 0$UINT, (SIZEOF(::MoveTimer))$UINT, 
7$UINT, 3$UINT, 0$UINT, 
TO_UDINT(2103413850), "MoveTimer", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::MoveTimer.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::MoveTimer.s_StartStopTimer.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(22117594), "s_StartStopTimer", 
(::MoveTimer.s_MovTimer1.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1495383918), "s_MovTimer1", 
(::MoveTimer.s_MovTimer2.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3223908052), "s_MovTimer2", 
(::MoveTimer.s_MovTimer3.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3073367618), "s_MovTimer3", 
(::MoveTimer.s_Reset.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(325196950), "s_Reset", 
(::MoveTimer.s_1_3_pelletMode.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2239501700), "s_1_3_pelletMode", 
//Clients:
(::MoveTimer.c_timer.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1324474639), "c_timer", TO_UDINT(1512043018), "TimeDateLib", 1$UINT, 1$UINT, 
(::MoveTimer.c_SysDate.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1985007834), "c_SysDate", 
(::MoveTimer.c_SysTime.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3009052645), "c_SysTime", 
END_FUNCTION


#define USER_CNT_MoveTimer 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_MoveTimer] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION MoveTimer::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_MoveTimer, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
	vmt.CmdTable.CyWork		:= #CyWork();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_StartStopTimer.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF s_StartStopTimer.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_MovTimer1.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF s_MovTimer1.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_MovTimer2.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF s_MovTimer2.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_MovTimer3.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF s_MovTimer3.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_Reset.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF s_Reset.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	s_1_3_pelletMode.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF s_1_3_pelletMode.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL MoveTimer::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR


  //READ ACTUAL TIME AND DATE FROM CLIENTS; shr for shift bits
  //v_hd_Date := c_SysDate.Read();
  //v_hd_Time_1_Start := c_SysTime.Read();
  
  ///v_seconds_1 := (v_hd_Time_1_Start AND 16#0000FF00) shr 8;
  //v_minutes_1 := (v_hd_Time_1_Start AND 16#00FF0000) shr 16;
  //v_hours_1   := (v_hd_Time_1_Start AND 16#FF000000) shr 24;
  
  //v_day     := (v_hd_Date AND 16#00000FF0) shr 4;
  //v_month   := (v_hd_Date AND 16#0000F000) shr 12;
  //v_year    := (v_hd_Date AND 16#FFFF0000) shr 16;

  if s_Reset.Read() then
     s_MovTimer1.Write(input:=0);
     s_MovTimer2.Write(input:=0);
     s_MovTimer3.Write(input:=0);
     case_Time:=0;
  end_if;
      
  case case_Time of
    
    0://START 1
      if s_StartStopTimer.Read() then
        v_hd_Time_1_Start := c_SysTime.Read();
        
        if s_1_3_pelletMode.Read()=1 then
          s_StartStopTimer.Write(input:=1);
          case_Time:=30;
        elsif s_1_3_pelletMode.Read()=0 then
          s_StartStopTimer.Write(input:=0);
          case_Time:=10;
        end_if;

        
      end_if;

    10://START 2
    
      if s_StartStopTimer.Read() then
        v_hd_Time_2_Start := c_SysTime.Read();
        s_StartStopTimer.Write(input:=0);
        case_Time:=20;
      end_if;
    
    20://START 3
    
       if s_StartStopTimer.Read() then
        v_hd_Time_3_Start := c_SysTime.Read();
        s_StartStopTimer.Write(input:=1);
        case_Time:=30;
      end_if;
      
    30://STOP 1
    
      if s_StartStopTimer.Read()=0 then
        v_hd_Time_1_Stop:= c_SysTime.Read();
        v_tot_seconds_1:=c_timer.TimeDiff(tim1:=v_hd_Time_1_Stop, tim2:=v_hd_Time_1_Start);
        s_StartStopTimer.Write(input:=1);
        case_Time:=35;
      end_if;
    35:
      s_MovTimer1.Write(input:=v_tot_seconds_1);
      if s_1_3_pelletMode.Read()=1 then
        case_Time:=60;
      elsif s_1_3_pelletMode.Read()=0 then
        case_Time:=40;
      end_if;

      
    
    40://STOP 2
    
      if s_StartStopTimer.Read()=0 then
        v_hd_Time_2_Stop:= c_SysTime.Read();
        v_tot_seconds_2 := c_timer.TimeDiff(tim1:=v_hd_Time_2_Stop, tim2:=v_hd_Time_2_Start);
        s_StartStopTimer.Write(input:=1);
        case_Time:=45;
      end_if;
      
    45:
    
      s_MovTimer2.Write(input:=v_tot_seconds_2);
      case_Time:=50;
        
    50://STOP 3    
        
      if s_StartStopTimer.Read()=0 then
        v_hd_Time_3_Stop:= c_SysTime.Read();
        v_tot_seconds_3 := c_timer.TimeDiff(tim1:=v_hd_Time_3_Stop, tim2:=v_hd_Time_3_Start);
        s_StartStopTimer.Write(input:=1);
        case_Time:=55;
      end_if;
    
    55:
      s_MovTimer3.Write(input:=v_tot_seconds_3);
      case_Time:=60;   
    
    60:


    
      
  end_case;

	state := READY;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MoveTimer::Init

END_FUNCTION
