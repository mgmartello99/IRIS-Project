//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "MMServer4ByteImpl"
	Revision           = "0.0"
	GUID               = "{0D0DA539-84F9-4A2C-A3A1-71D2AEDD6229}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
		<Server Name="Data" WriteProtected="false">
		</Server>
	</Channels>
	<Network Name="MMServer4ByteImpl">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{783D8152-8603-4A6F-8F00-538D9AC4B211}"
				Class      = "MMServerImpl"
				Position   = "(218,120)"
				Visualized = "false">
				<Channels>
					<Server Name="Data"/>
					<Client Name="DataBuffer"/>
					<Client Name="DataBufferOut"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.Data" Destination="_base.Data" Vertices="(1216,210),(1044,210),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using MMServerImpl

MMServer4ByteImpl : CLASS
: MMServerImpl
  //Servers:
  //Clients:
  //Variables:
  //Functions:
	
	FUNCTION MMServer4ByteImpl
		VAR_OUTPUT
			ret_code 	: ConfStates;
		END_VAR;
				//! <Function Comment=" The function doesn&apos;t provide default functionality&#13;&#10; Please overwrite it for derived classes.&#13;&#10; Die Funktion stellt keine Standard-Implementierung dar. Sie muß für abgeleitete&#13;&#10; Klassen überschrieben werden.&#13;&#10;" Name="WriteDataOff"/>
	FUNCTION VIRTUAL GLOBAL WriteDataOff
		VAR_INPUT
			udLen 	: UDINT;			//! <Variable Comment=" Length of initialization data block" Name="WriteDataOff.udLen"/>
			udOff 	: UDINT;			//! <Variable Comment=" form this offset the data is read" Name="WriteDataOff.udOff"/>
			pData 	: ^USINT;
		END_VAR;
				//! <Function Comment=" Diese Funktion muß für abgeleitete Klassen überschrieben werden. Sie soll die&#13;&#10; Daten vom angegebenen Offset im Datenpuffer auf den übergebenen Pointer kopieren.&#13;&#10; Maximal dürfen udLen-Bytes kopiert werden.&#13;&#10; Die Funktion wird durch das READ_DATA-Kommando der NewInst-Methode aufgerufen.&#13;&#10; Overwrite this function for derived classes, copy the data from offset udOff&#13;&#10; to the pointer pData. Copy at maximum udLen - bytes of data.&#13;&#10; The function is called on the READ_DATA-command in the NewInst-&#13;&#10; method.&#13;&#10;[&gt;udSize] data length to be copied&#13;&#10;[&gt;udAt] offset where data should be copied from&#13;&#10;" Name="GetDataAt"/>
	FUNCTION VIRTUAL GLOBAL GetDataAt
		VAR_INPUT
			pData 	: ^USINT;			//! <Variable Comment=" Zeiger auf die Daten" Name="GetDataAt.pData"/>
			udSize 	: UDINT;			//! <Variable Comment=" Länge der Daten die kopiert werden sollen" Name="GetDataAt.udSize"/>
			udAt 	: UDINT;			//! <Variable Comment=" Offset innerhalb des internen Datenpuffers, von dem die Daten kopiert werden sollen" Name="GetDataAt.udAt"/>
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL GetBufferLen
		VAR_INPUT
			nBufferId 	: UDINT;
		END_VAR
		VAR_OUTPUT
			udLen 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ReadDataOff
		VAR_INPUT
			udOff 	: UDINT;
			pData 	: ^USINT;
			udMax 	: UDINT;
		END_VAR
		VAR_OUTPUT
			udLen 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL GetDataPtrIn
		VAR_OUTPUT
			pData 	: ^USINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL GetBufferAt
		VAR_INPUT
			nBufferId 	: UDINT;
			pData 	: ^USINT;
			udSize 	: UDINT;
			udAt 	: UDINT;
		END_VAR;
				//! <Function Comment=" Overwrite this function for derived classes. It should return&#13;&#10; the length of the internal data buffer. If it&apos;s not possible&#13;&#10; to return the length, then overwrite the NewInst method, too,&#13;&#10; and use a different way to return the data.&#13;&#10; Diese Funktion gehört für abgeleitete Klassen überschrieben. Sie soll&#13;&#10; die Länge des internen Datenpuffers zurückliefern. Falls das nicht&#13;&#10; möglich ist, muß auch die NewInst-Methode überschrieben werden (READ_DATA).&#13;&#10;" Name="GetLength"/>
	FUNCTION VIRTUAL GLOBAL GetLength
		VAR_OUTPUT
			udLen 	: UDINT;			//! <Variable Comment=" length of internal data buffer" Name="GetLength.udLen"/>
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL WriteBufferOff
		VAR_INPUT
			nBufferId 	: UDINT;
			udLen 	: UDINT;
			udOff 	: UDINT;
			pData 	: ^USINT;
		END_VAR;
	
	FUNCTION VIRTUAL GetData
		VAR_INPUT
			nBufferId 	: UDINT;
		END_VAR
		VAR_OUTPUT
			pData 	: ^USINT;
		END_VAR;
	
	FUNCTION VIRTUAL GetBuffer
		VAR_INPUT
			nBufferId 	: UDINT;
		END_VAR
		VAR_OUTPUT
			pBuffer 	: ^void;
		END_VAR;
	
	FUNCTION VIRTUAL CalcCrc;
	
	FUNCTION VIRTUAL GLOBAL SetBufferSize
		VAR_INPUT
			nBufferId 	: UDINT;
			udLen 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL SetBufferSizeForce
		VAR_INPUT
			nBufferId 	: UDINT;
			udLen 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Data::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Data::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB MMServer4ByteImpl::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_MMSERVER4BYTEIMPL
0$UINT, 0$UINT, (SIZEOF(::MMServer4ByteImpl))$UINT, 
0$UINT, 0$UINT, 0$UINT, 
TO_UDINT(2836936216), "MMServer4ByteImpl", //Class
TO_UDINT(522987795), "MMServerImpl", 0$UINT, 0$UINT, //Baseclass
//Servers:
//Clients:
END_FUNCTION


#define USER_CNT_MMServer4ByteImpl 16

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_MMServer4ByteImpl] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION MMServer4ByteImpl::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= MMServerImpl::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= MMServerBase::Data.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, MMServerBase::Data.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_MMServer4ByteImpl;
	vmt.CmdTable.Read		:= #Data::Read();
	vmt.CmdTable.Write		:= #Data::Write();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #WriteDataOff();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[3]		:= #GetDataAt();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[4]		:= #GetBufferLen();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[5]		:= #ReadDataOff();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[6]		:= #GetDataPtrIn();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[7]		:= #GetBufferAt();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[8]		:= #GetLength();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[10]		:= #WriteBufferOff();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[11]		:= #GetData();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[12]		:= #GetBuffer();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[13]		:= #CalcCrc();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[14]		:= #SetBufferSize();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[15]		:= #SetBufferSizeForce();

#pragma warning (default : 74)
	MMServerBase::Data.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF MMServerBase::Data.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ret_code	:= MMServer4ByteImpl();

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL MMServer4ByteImpl::Data::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	output := 0;
  
  IF (IsLasalIdValid() = FALSE) THEN
    RETURN;
  END_IF;
  
	output := Data;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MMServer4ByteImpl::Data::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

  result := ACCESS_DENIED;
  
  IF ((m_flFlags AND _MM_PROP_RO) = _MM_PROP_RO) THEN
    RETURN;
  END_IF;
  
  DataOut := input;

  // m_sendReqCnt wird inkrementiert, wenn eine Sendeanforerung ansteht
  // m_sendReqDone wird von m_sendReqCnt übernommen, wenn eine Sendeanforderung erfolgreich ausgeführt wurde
  m_sendReqCnt += 1;
  
	result := input;

END_FUNCTION


FUNCTION VIRTUAL MMServer4ByteImpl::GetBuffer
	VAR_INPUT
		nBufferId 	: UDINT;
	END_VAR
	VAR_OUTPUT
		pBuffer 	: ^void;
	END_VAR
  
  pBuffer := NIL;
  
  IF (nBufferId = MM_BufferIn) THEN
    pBuffer := #Data;
  ELSIF (nBufferId = MM_BufferOut) THEN
    pBuffer := #DataOut;
  END_IF;

END_FUNCTION


FUNCTION VIRTUAL MMServer4ByteImpl::CalcCrc

  m_udCrcIn := 1;

END_FUNCTION


FUNCTION VIRTUAL MMServer4ByteImpl::GetData
	VAR_INPUT
		nBufferId 	: UDINT;
	END_VAR
	VAR_OUTPUT
		pData 	: ^USINT;
	END_VAR
  
  pData := GetBuffer(nBufferId)$^USINT;

END_FUNCTION

#pragma warning(disable:73);
FUNCTION VIRTUAL GLOBAL MMServer4ByteImpl::GetBufferAt
	VAR_INPUT
		nBufferId 	: UDINT;
		pData 	: ^USINT;
		udSize 	: UDINT;
		udAt 	: UDINT;
	END_VAR
  
  (pData$^DWORD)^ := (GetBuffer(nBufferId)$^DWORD)^;

END_FUNCTION
#pragma warning(default:73);

#pragma warning(disable:73);
FUNCTION VIRTUAL GLOBAL MMServer4ByteImpl::GetBufferLen
	VAR_INPUT
		nBufferId 	: UDINT;
	END_VAR
	VAR_OUTPUT
		udLen 	: UDINT;
	END_VAR

  udLen := 4;

END_FUNCTION
#pragma warning(default:73);

#pragma warning(disable:73);
FUNCTION VIRTUAL GLOBAL MMServer4ByteImpl::GetDataAt
	VAR_INPUT
		pData 	: ^USINT;
		udSize 	: UDINT;
		udAt 	: UDINT;
	END_VAR
  
  (pData$^DWORD)^ := (Data$^DWORD)^;

END_FUNCTION
#pragma warning(default:73);

FUNCTION VIRTUAL GLOBAL MMServer4ByteImpl::GetDataPtrIn
	VAR_OUTPUT
		pData 	: ^USINT;
	END_VAR

  pData := (#Data)$^USINT;

END_FUNCTION

#pragma warning(disable:73);
FUNCTION VIRTUAL GLOBAL MMServer4ByteImpl::SetBufferSize
	VAR_INPUT
		nBufferId 	: UDINT;
		udLen 	: UDINT;
	END_VAR
  
  // do nothing, always 4

END_FUNCTION
#pragma warning(default:73);

FUNCTION VIRTUAL GLOBAL MMServer4ByteImpl::GetLength
	VAR_OUTPUT
		udLen 	: UDINT;
	END_VAR
  
  udLen := 4;

END_FUNCTION

#pragma warning(disable:73);
FUNCTION VIRTUAL GLOBAL MMServer4ByteImpl::ReadDataOff
	VAR_INPUT
		udOff 	: UDINT;
		pData 	: ^USINT;
		udMax 	: UDINT;
	END_VAR
	VAR_OUTPUT
		udLen 	: UDINT;
	END_VAR
  
  udLen := 4;
  (pData$^DWORD)^ := (Data$^DWORD)^;

END_FUNCTION
#pragma warning(default:73);

#pragma warning(disable:73);
FUNCTION VIRTUAL GLOBAL MMServer4ByteImpl::WriteBufferOff
	VAR_INPUT
		nBufferId 	: UDINT;
		udLen 	: UDINT;
		udOff 	: UDINT;
		pData 	: ^USINT;
	END_VAR
  VAR
  	psvr : ^void;
  END_VAR

  psvr := GetBuffer(nBufferId);
  (psvr$^DWORD)^ := (pData$^DWORD)^;

END_FUNCTION
#pragma warning(default:73);

FUNCTION VIRTUAL GLOBAL MMServer4ByteImpl::WriteDataOff
	VAR_INPUT
		udLen 	: UDINT;
		udOff 	: UDINT;
		pData 	: ^USINT;
	END_VAR

  IF ((m_flFlags AND _MM_PROP_RO) = _MM_PROP_RO) THEN
    RETURN;
  END_IF;
  
  (DataOut$^DWORD)^ := (pData$^DWORD)^;
  
  // m_sendReqCnt wird inkrementiert, wenn eine Sendeanforerung ansteht
  // m_sendReqDone wird von m_sendReqCnt übernommen, wenn eine Sendeanforderung erfolgreich ausgeführt wurde
  m_sendReqCnt += 1;

END_FUNCTION
  

FUNCTION MMServer4ByteImpl::MMServer4ByteImpl
	VAR_OUTPUT
		ret_code 	: ConfStates;
	END_VAR

  m_flServerType := _MM_CHTY_4BYTE;

	ret_code := C_OK;

END_FUNCTION

#pragma warning(disable:73);
FUNCTION VIRTUAL GLOBAL MMServer4ByteImpl::SetBufferSizeForce
	VAR_INPUT
		nBufferId 	: UDINT;
		udLen 	: UDINT;
	END_VAR
  
  // do nothing, always 4

END_FUNCTION
#pragma warning(default:73);
