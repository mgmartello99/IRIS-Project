//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
#define OBJECTS_CONFIG

//Define part of class SdiasBase
//Address to access the Dataobject list via SPI SDO Read
#define SDIAS_SPI_DATA_OBJECT_LIST_PAGE_ADDRESS               16#FFFF
#define SDIAS_SPI_DATA_OBJECT_LIST_PAGE_OFFSET                16#00
#define SDIAS_SPI_DATA_OBJECT_LIST_IDENTIFIER                 16#12345678

//Defines the number of optional list elements in the SPI List

#define SDIAS_SPI_NUMBER_OF_OPTIONAL_ELEMENTS                 16   

#define SDIAS_SPI_HEADER_BEFORE_OPTIONAL_ELEMENTS             16#18
#define SDIAS_SPI_HARDWARE_VERSION_OFFSET                     16#C
#define SDIAS_SPI_VENDOR_ID_OFFSET                            16#0

#define SDIAS_SPI_MASTER_ADRESS_TRANSMIT_BUFFER0              16#0000
#define SDIAS_SPI_MASTER_ADRESS_TRANSMIT_BUFFER1              16#0080
#define SDIAS_SPI_MASTER_ADRESS_RECEIVE_BUFFER0               16#0000
#define SDIAS_SPI_MASTER_ADRESS_RECEIVE_BUFFER1               16#0080
#define SDIAS_SPI_MASTER_ADRESS_PAGE_ADRESS                   16#0100
#define SDIAS_SPI_MASTER_ADRESS_PREDEFINED_COMMAND_REGISTER   16#0102
#define SDIAS_SPI_MASTER_ADRESS_SINGLE_COMMAND_REGISTER       16#0103
#define SDIAS_SPI_MASTER_ADRESS_STATUS_REGISTER               16#0104
#define SDIAS_SPI_MASTER_ADRESS_REQUEST_REGISTER              16#0105
#define SDIAS_SPI_MASTER_ADRESS_GRANT_REGISTER                16#0106
#define SDIAS_SPI_MASTER_ADRESS_CLEAR_REQUEST_REGISTER        16#0107
#define SDIAS_SPI_MASTER_ADRESS_FEATURE_REGISTER              16#0108

#define SDIAS_SPI_MASTER_SOFTWARE_REQUEST                     1

#define SDIAS_SPI_MASTER_COMMAND_PAGE_READ                    16#01
#define SDIAS_SPI_MASTER_COMMAND_PAGE_PROGRAM                 16#02
#define SDIAS_SPI_MASTER_COMMAND_SECTOR_ERASE                 16#03
#define SDIAS_SPI_MASTER_COMMAND_REBOOT_FPGA                  16#F0

#define SDIAS_SPI_MASTER_STATE_BUSY                           16#00
#define SDIAS_SPI_MASTER_STATE_READY                          16#01

#define SDIAS_SPI_SECTOR_SIZE                                 65536 // 256*256
#define SDIAS_SPI_PAGE_SIZE                                   256

#define SDIAS_SPI_WRITE_MAX_RETRIES                           2
#define SDIAS_SPI_TIMEOUT                                     500  //timeout for spi accesses
#define SDIAS_SPI_LOCK_TIMEOUT                                6   //this value is multiplied with the buscycletime [µs] (6*1000=6.000 msec timeout)


//SPI List IDs
#define SDIAS_SPI_IDENTIFICATION_LIST_ID  1
#define SDIAS_SPI_FLASH_CONFIGURATION_ID  2
#define SDIAS_SPI_VENDOR_NAME_ID          3
#define SDIAS_SPI_DEVICE_NAME_ID          4
#define SDIAS_SPI_SERIAL_NUMBER_ID        5
#define SDIAS_SPI_ORDERING_NUMBER_ID      6
#define SDIAS_SPI_DOCUMENTATION_PDF_ID    7
#define SDIAS_SPI_CALIB_DATA_ID           10
#define SDIAS_SPI_PDO_INFORMATION_ID      128

//SPI Access
#define SDIAS_SPI_ACCESS_ID_HW_TREE          1
#define SDIAS_SPI_ACCESS_ID_HWK_INTERNAL     2
#include "..\..\Class\SdiasManager\SdiasManager.h"
#include "..\..\Class\SdiasBase\SdiasBase.h"
#include "..\..\Class\HwControl\HwControl.h"
#include "..\..\Source\interfaces\lsl_st_hardwaretree.h"
#include "..\..\Source\interfaces\lsl_st_mt.h"
//Define part of class AI084
#define DEVICE_ID_AI084 1026    // TODO Anpassen

#define AI084_ADDR_CYC_WRITE        16#000
#define AI084_ADDR_CYC_READ         16#080
#define AI084_ADDR_CFG_FIRMWARE     16#100
#define AI084_ADDR_STATE_FIRMWARE   16#180

#define AI084_SDO_RESPONSE_TIMEOUT  SDIAS_SDO_TIMEOUT * 2

#define AI084_LENGTH_STATE_FIRMWARE 2 // TODO Check
#define AI084_NUMBER_OF_ANALOG_IN   8
#define AI084_INVALID_VALUE         16#80000010$DINT

#define AI084_FIRMWARE_MIN          0  // Check 0 - 20000
#define AI084_FIRMWARE_MIN_4000     4000 //For config mode 1
#define AI084_FIRMWARE_MAX          20000   // Check 0 - 20000
//Define part of class BusInterfaceSDIASInternal
#define BUSIF_INTERNAL_MAX_NR_DO 100

// Defines for Mutex Generation
#define INTERNAL_STR_MUTEX_NAME_SEPERATOR ".."
#define INTERNAL_MUTEX_NAME_END_LENGTH 5
#define INTERNAL_MUTEX_NAME_MAX_LENGTH 32
#include "..\..\Source\BusInterface.h"
//Define part of class DI160
#define DEVICE_ID_DI160 1024
#include "..\..\Class\HwControl\watchdog.h"
#include "..\..\Source\interfaces\lsl_st_sysinfo.h"
#include "..\..\Source\interfaces\lsl_st_systrace.h"
#include "..\..\Class\HwControl\_HWKScope.h"
#include "..\..\Runtime\%LASALAPPDATA%\Runtime\Include\LSL\lsl_st_mt.h"
//Define part of class SafetyUDP
#define SAFETY_UDP_MAX_SOCKETS                6     // Max number of socket

#define SAFETY_UDP_CLT_SEND_OK                0    // Send ok
#define SAFETY_UDP_CLT_INVALID_HANDLE        -1    // Invalid handle
#define SAFETY_UDP_CLT_NOT_OPEN              -2    // Socket is not open
#define SAFETY_UDP_CLT_SEND_FAILED           -3    // Send failed
#define SAFETY_UDP_CLT_SEND_BUFFER_FULL      -4    // Send buffer is full
#define SAFETY_UDP_CLT_DATA_TO_BIG           -5    // Data to big

#define SAFETY_UDP_MAXIMUM_SEGMENT_SIZE    1452    // Maximum of user data

#define SAFETY_UDP_TIMEOUT_OPENSOCKET    (1000)    //timeout for opening socket

#define SAFETY_UDP_RECEIVE_TIMEOUT          800

#define SAFETY_UDP_TX_BUFFER_SIZE          1024
//Define part of class SafetyManager
#define LogBufferSize 1000
#include "..\..\Class\SafetyManager\SafetyManager.h"
#include "..\..\Source\interfaces\lsl_st_safetydll.h"
//Define part of class SdiasManager
#define SDIAS_SDO_MAX_LENGTH              128
#define SDIAS_SDO_RINGBUFFER_NO            64
#define SDIAS_SDO_CHANNEL_NO                3   // fixed in the VI hardware to be 3

// watchdog trigger interval (after 130ms of no trigger the SDIAS HW goes into reset again and takes at least another 10ms to be ready again)
#define SDIAS_WATCHDOG_TRIGGER_TIME        40

// time needed by sdias modules to start up after the watchdog is triggered the first time in ms
#define SDIAS_HARDWARE_STARTUP_TIME        15

// sdias manager needs 2 ticks to handle event for read task (measure sync time)
#define SDIAS_SYNC_MEASURE_TICKS            2

// after activating the PLL SyncOut it takes 3 cycles until the SDIAS sync can be injected
#define SDIAS_CYCLES_WAIT_AFTER_SYNC_ENABLE 3

// wait 1 bus cycle at start to get valid numbers in the task info
#define SDIAS_TASKINFO_READY_TICKS          1

// time to wait (in ms) until other tasks in the same or lower priority than post init have done their stuff
#define SDIAS_WAIT_TIME_IN_POST_INIT        1

#define SIZE_PER_SDIAS_CLIENT               16#0400

// for far memory accesses: 1 module can hold maximum 256 1K blocks (0-255)
#define SDIAS_1K_BLOCK_NO                       256

// far memory accesses maximum length in bytes
#define SDIAS_MAX_SIZE_FAR_MEM_ACCESS           127


#define SDIAS_OFFSET_HW_CONFIG              16#FF00
#define SDIAS_OFFSET_TASK_EVENT_IDS         16#FF10
#define SDIAS_OFFSET_FEATURE_INFO           16#FF18
#define SDIAS_OFFSET_APPLI_LED_STATES       16#FF20
#define SDIAS_OFFSET_SYNC_INJECTION_CFG     16#FF3D
#define SDIAS_OFFSET_TRIGGER_UNIT_SETUP_0   16#FF41
#define SDIAS_OFFSET_TRIGGER_UNIT_SETUP_1   16#FF45
#define SDIAS_OFFSET_TASK_START_CFG_0       16#FF60
#define SDIAS_OFFSET_TASK_CONFIG_0          16#FF86
#define SDIAS_OFFSET_TASK_CONFIG_1          16#FF96
#define SDIAS_OFFSET_TASK_INFO_1            16#FF94
#define SDIAS_OFFSET_TASK_HANDSHAKE_1       16#FF9B
#define SDIAS_OFFSET_TASK_DURATION_TIME_1   16#FF9C
#define SDIAS_OFFSET_TASK_DURATION_TIME_2   16#FFAC
#define SDIAS_OFFSET_TASK_CONFIG_2          16#FFA6

#define SDIAS_RETRIES_ALLOWED         2

// mask to get global error flag out of message counter byte of SDO responses
#define SDIAS_MASK_GLOBAL_ERROR_FLAG        16#80

// mask to get message counter out of message counter byte of SDO responses
#define SDIAS_MASK_MESSAGE_COUNTER          16#3F


#define SDIAS_EVENT_MASK_ID_SYNC_OUT0       16#10
#define SDIAS_EVENT_MASK_ID_SYNC_OUT1       16#11
#define SDIAS_EVENT_MASK_ID_SYNC_OUT2       16#12
#define SDIAS_EVENT_MASK_ID_SYNC_OUT3       16#13

#define SDIAS_MANAGER_SYNC_SYNCOUT_ID       16#85
#define SDIAS_TASK_START_EVENT_SYNCOUT_ID   16#86


#define SDIAS_PLACE_NO_MODULE_ADDED_SO_FAR  16#80000000

#define SDIAS_TRIGGER_UNIT_BYTE_SIZE        2

#define SDIAS_WAIT_TIME_FIRMWARE_HANDSHAKE  5 * 1000

// if the firmware version is below this, there might be problems with SCP111 and other modules => print warning at startup
#define SDIAS_FW_VERSION_SDO_ERROR_FIXED    16#120

// if the protocol version ist below this, Control Read/Broadcast Write Command is not supported by sdiasmanager
#define SDIAS_PROTOCOLVERSION_BROADCAST     16#120

// if the cil version ist below this, Control Read/Broadcast Write Command is not supported by OS for local SDIAS.
#define SDIAS_CILVERSION_BROADCAST         16#5001 

// timeout for blocking the init during initialisation (in ms)
#define SDIAS_INIT_BLOCK_TIMEOUT            20 * 1000

#define SDIAS_MUTEX_NAME_END_LENGTH 3
#define SDIAS_MUTEX_NAME_MAX_LENGTH 32
#define SDIAS_MUTEX_STR_SEPERATOR   ".."

//#define SDIAS_RT_TIME_MEASUREMENT
#ifdef SDIAS_RT_TIME_MEASUREMENT
  #pragma message("ATTENTION: SDIAS real time measurement is active and needs additional ressources in the realtime task")
#endif

(* SDIAS data object commands  *)
#define	 SDIAS_CMD_END							  0x00			(* End command										          *)
#define	 SDIAS_CMD_ACC_MEMORY				  0x01			(* Access dpram memory								      *)
#define	 SDIAS_CMD_ACC_CONTROL				0x02			(* Access dpram control memory						  *)
#define	 SDIAS_CMD_GLOBAL						  0x03			(* SDIAS global command								      *)
#define	 SDIAS_CMD_COPY_LOCAL					0x04			(* DPRAM copy command in local dpram				*)
#define	 SDIAS_CMD_JMP_LOCAL					0x05			(* DPRAM jump command in local dpram 				*)
#define  SDIAS_CMD_ACC_MEMORY_FAR     0x07      (* SDIAS Far Memory Access                  *)

(* SDIAS defines for data object handling *)
// Write data oject list
#define	 SDIAS_DOL_WRITE_USAGE_DOL_EMPTY	  0x20			(* Usage of empty write dol list (wachtdog trigger + end command)   *)
#define	 SDIAS_DOL_WRITE_USAGE_DTA_EMPTY	  0x03			(* Usage of empty write dol data (DO ctrl of 2x copy command for task information + DO ctrl of watchdog trigger      *)
#define	 SDIAS_DOL_WRITE_OFFSET_END_CMD			0x10			(* One data object in list - offset = 1 DO size = 0x10						  *)
#define	 SDIAS_DOL_WRITE_OFFSET_FIRST_DTA		0x02			(* Offset of first data byte of second copy command = 2 (DO ctrl)   *)
#define	 SDIAS_DOL_WRITE_OFFSET_LAST_DTA		0x02			(* Offset of last data byte of second copy command = 2 (DO ctrl )   *)

// Read data oject list
#define	 SDIAS_DOL_READ_USAGE_DOL_EMPTY	    0x30			(* Usage of empty read dol list (2x task info copy command + end command)   *)
#define	 SDIAS_DOL_READ_USAGE_DTA_EMPTY	    0x0D			(* Usage of empty write dol data (DO ctrl of 2x copy command for task information + DO ctrl of watchdog trigger      *)
#define	 SDIAS_DOL_READ_OFFSET_END_CMD			0x20			(* One data object in list - offset = 1 DO size = 0x10						          *)
#define	 SDIAS_DOL_READ_OFFSET_FIRST_DTA		0x07			(* Offset of first data byte of second copy command = 7 = DO state          *)
#define	 SDIAS_DOL_READ_OFFSET_LAST_DTA		  0x0C			(* Offset of last data byte of second copy command = 12 (last byte of task information)       *)

//Versionsnumber where SDIAS SPI Read Accesses are available
#define  SDIAS_SDO_SPI_FIRMWARE_VERSION_AVAILABLE 16#0120

//error info mask
#define  SDIAS_ERROR_INFO_MASK    2#1000011000011111

// Broadcast DO Info
#define SDIAS_OFFSET_CLIENT_CTRLTIMESTAMP   16#0190
#define SDIAS_NR_TIMEBROADCAST_DOS 2
#define SDIAS_TIMEBROADCAST_SUBCMD 16#B0
#include "..\..\source\interfaces\lsl_st_pll.h"
//Define part of class SdiasPLC
#define SDIASM_OBJECT_PATH            16#88000002   // Object Path for VSDIASmanager Length = 2 (First 2byte), Domain = 0 (3rd byte), Escape Sequence SDIAS (4th byte)
//Define part of class ST151Base
#define DEVICE_ID_ST151                                                    1086
                                
#define ST151_ADDR_PDO_WRITE                                            16#0000
#define ST151_ADDR_PDO_READ                                             16#0038
#define ST151_ADDR_SDO_1                                                16#0008
#define ST151_ADDR_SDO_2           (ST151_ADDR_SDO_1+sizeof(t_s_ConfigModule1))
#define ST151_ADDR_SDO_3                                (ST151_ADDR_PDO_READ+6)  //only read sdo!!!
#define ST151_ADDR_SDO_4           (ST151_ADDR_SDO_3+sizeof(t_s_ConfigModule3))
#define ST151_ADDR_SDO_5           (ST151_ADDR_SDO_4+sizeof(t_s_ConfigModule4))
#define ST151_ADDR_SDO_6           (ST151_ADDR_SDO_5+sizeof(t_s_ConfigModule5))
#define ST151_ADDR_SDO_7                                                16#0006


#define ST151_OSZI_ADDR_WRITE                                           16#0800
#define ST151_OSZI_ADDR_READ                                            16#0808
#define ST151_OSZI_ADDR_DATA                                            16#0820
#define ST151_OSZI_READPOINTER_OFFSET                                   16#0020
#define ST151_OSZI_ONE_PDOSIZE                                              126
#define ST151_OSZI_VALUES_DATA             (ST151_OSZI_ONE_PDOSIZE/sizeof(UINT))
#define ST151_OSZI_BUFFER_SIZE                                             1024
#define ST151_OSZI_MAX_SAMPLES             (ST151_OSZI_BUFFER_SIZE/sizeof(UINT))
#define ST151_OSZI_MAX_PDOREAD   ((ST151_OSZI_BUFFER_SIZE/ST151_OSZI_ONE_PDOSIZE)+1)

// in MHz
#define ST151_FREQUENCY_MHZ                             125
// in Hz
#define ST151_FREQUENCY_HZ   (ST151_FREQUENCY_MHZ * 1000000)

#define ST151_SDO_RESPONSE_TIMEOUT   (SDIAS_SDO_TIMEOUT * 2)
#define ST151_SDO_MAX_RETRYS                              3

#define ST151_MAXFREQUENCY_OUT                   2_000_000 // 2Mhz/64 max frequency of module output
#define ST151_MAXSTEPPING_MODES                          6
#define ST151_FREQLIMITS_TABLESIZE      (ST151_MAXSTEPPING_MODES*sizeof(UDINT)*2)
                                    
#define ST151_MAX_ALLOWED_PERCENT                      100 // maximum value for percent value
#define ST151_BLANKING_TIME                             10 // minimum on time of pwm (*20ns)

#define ST151_CYCLICREFRESHDATA_TIME                   200 // time to refresh asynchrone values
#define ST151_INVALID_VALUE                   16#8000_0010 // invalid value for server
#define ST151_AUTOSET_FREQUENCYLIMIT          16#0000_0000 // value for autoset limit
#define ST151_DEACTIVATE_FREQUENCYLIMIT       16#FFFF_FFFF // value for deactivate limit

#define ST151_MAX_ALLOWED_CURRENT                     5000 // max allowed current (5A) in mA, from h-bridge according to hw-documentation
#define ST151_MAX_ALLOWED_CHOPPEROFFTIME              2500 // max allowed chopper off time in 20ns steps
#define ST151_MIN_ALLOWED_CHOPPEROFFTIME              1500 // min allowed chopper off time in 20ns steps
#define ST151_STALL_CURRENT_LIMIT                     1000 // calculation for stall current in permille
#define ST151_CURRENTOFFSETADJUST_MAX                  250 // maximum current offset adjust in mA
#define ST151_CURRENTOFFSETADJUST_MIN                 -250 // minimum current offset adjust in mA
#define ST151_FASTDECAYCURRENTTHRESHOLD_MAX                       500
#define ST151_FASTDECAYCURRENTTHRESHOLD_MIN                       250
                                       
//pll settings                         
#define ST151_SYNC_OUT_ID                             16#03
#define ST151_PLL_OFFSET                             16#140
#define ST151_PLL_CONTROL               (ST151_PLL_OFFSET+8)

#define ST151_ERROR_BITMASK_STATE_WORD               0x013E
#define ST151_ERROR_BITMASK_EXTENDED_STATE_WORD      0xFF3E
//Define part of class TO127
#define DEVICE_ID_TO127 1003

#define TO127_ADDR_CYC_WRITE  0
#define TO127_ADDR_CYC_READ   2

#define TO127_WRITE_LENGTH    2
#define TO127_READ_LENGTH     2
//Define part of class VaranManager
#define SIZE_PAYLOAD_FRAME_HEADER_DO      16#38  // Const because datasize is in the Payload DOs
#define SIZE_PAYLOAD_IRQ_FRAME_HEADER_DO  16#40  // Const because datasize is in the Payload DOs

#define VM_MAX_POST_INIT_MODULES  1000

#define VM_OBJECT_PATH            16#81000002   // Object Path for Varanmanager Length = 2 (First 2byte), Domain = 0 (3rd byte), Escape Sequence Varan (4th byte)
#include "..\..\Class\VaranManager\VaranManager.h"
#include "..\..\Source\interfaces\lsl_st_kernel.h"


FUNCTION GLOBAL TAB ONE_HW_Network
-1$UINT, 0$UINT, 
0$UINT, 0$UINT,

32$UDINT,
TO_UDINT(529317953), "_CanLib", 1$UINT, 10$UINT, 2$UINT,
TO_UDINT(4078275645), "_SerLib", 1$UINT, 34$UINT, 3$UINT,
TO_UDINT(1475165325), "AI084", 1$UINT, 18$UINT, 1$UINT,
TO_UDINT(2897291062), "ASCII_BIN", 1$UINT, 21$UINT, 1$UINT,
TO_UDINT(3882880897), "BusInterfaceSDIASInternal", 2$UINT, 1$UINT, 0$UINT,
TO_UDINT(658879389), "CP112_IOs", 1$UINT, 1$UINT, 1$UINT,
TO_UDINT(794617671), "CriticalSection", 0$UINT, 4$UINT, 2$UINT,
TO_UDINT(119615581), "DI160", 1$UINT, 12$UINT, 1$UINT,
TO_UDINT(3238133653), "Hub_Base", 1$UINT, 21$UINT, 0$UINT,
TO_UDINT(1770276445), "Hub_Base_Root", 2$UINT, 11$UINT, 1$UINT,
TO_UDINT(3078259981), "HwcLogging", 1$UINT, 0$UINT, 1$UINT,
TO_UDINT(2471641665), "HwControl", 5$UINT, 21$UINT, 1$UINT,
TO_UDINT(1193052171), "HwControlBase", 1$UINT, 10$UINT, 0$UINT,
TO_UDINT(4260294091), "HWRtPostScan", 1$UINT, 0$UINT, 1$UINT,
TO_UDINT(2225119864), "MerkerEx", 1$UINT, 22$UINT, 12$UINT,
TO_UDINT(1799751072), "SafetyManager", 2$UINT, 26$UINT, 1$UINT,
TO_UDINT(3727715967), "SafetyUDP", 1$UINT, 4$UINT, 0$UINT,
TO_UDINT(3175101883), "SdiasBase", 1$UINT, 60$UINT, 0$UINT,
TO_UDINT(4173303375), "SdiasHubBase", 1$UINT, 10$UINT, 1$UINT,
TO_UDINT(2118381352), "SdiasManager", 1$UINT, 97$UINT, 1$UINT,
TO_UDINT(1159122596), "SdiasPLC", 2$UINT, 6$UINT, 1$UINT,
TO_UDINT(733517784), "ST151", 1$UINT, 6$UINT, 9$UINT,
TO_UDINT(1691609973), "ST151_IntVisu", 1$UINT, 0$UINT, 9$UINT,
TO_UDINT(1832775974), "ST151Base", 1$UINT, 4$UINT, 0$UINT,
TO_UDINT(1850111279), "String", 1$UINT, 11$UINT, 12$UINT,
TO_UDINT(2898603620), "StringInternal", 1$UINT, 85$UINT, 0$UINT,
TO_UDINT(3097667748), "TO127", 1$UINT, 44$UINT, 1$UINT,
TO_UDINT(2940693151), "VaranManager", 3$UINT, 7$UINT, 0$UINT,
TO_UDINT(1989862026), "VaranManager_1", 2$UINT, 7$UINT, 1$UINT,
TO_UDINT(4035182347), "VaranManager_Base", 1$UINT, 26$UINT, 0$UINT,
TO_UDINT(3232495061), "VirtualBaseInit", 1$UINT, 3$UINT, 0$UINT,
TO_UDINT(819479645), "XXXBase_IOs", 1$UINT, 1$UINT, 0$UINT,

1$UINT, TO_UDINT(3194356815), "CP112_IOS1\_BASE\_CANLIB1", 
1$UINT, TO_UDINT(661607925), "CP112_IOS1\_BASE\_CANLIB2", 

1$UINT, TO_UDINT(3879313428), "CP112_IOS1\_BASE\_SERLIB1", 
1$UINT, TO_UDINT(2117136814), "CP112_IOS1\_BASE\_SERLIB2", 
1$UINT, TO_UDINT(154648888), "CP112_IOS1\_BASE\_SERLIB3", 

_NO_ATTR, TO_UDINT(277019926), "AI0841", 

1$UINT, TO_UDINT(3603645853), "VARANMANAGER_11\_BASE\ASCII_BIN1", 


_NO_ATTR, TO_UDINT(222643709), "CP112_IOS1", 

1$UINT, TO_UDINT(2972590922), "HWCONTROL1\SAFETYMANAGER\UDPRECEIVEDATA", 
1$UINT, TO_UDINT(1868223583), "HWCONTROL1\SAFETYMANAGER\UDPSENDDATA", 

_NO_ATTR, TO_UDINT(2516706254), "DI1601", 


1$UINT, TO_UDINT(1776428101), "VARANMANAGER_11\HUB_BASE_ROOT0", 

1$UINT, TO_UDINT(3105254819), "HWCONTROL1\HWCLOGGING", 

_NO_ATTR, TO_UDINT(2190789875), "HWCONTROL1", 


1$UINT, TO_UDINT(1673205898), "HWCONTROL1\HWRTPOSTSCAN", 

1$UINT, TO_UDINT(1090135611), "AI0841\_BASE\SERIALNOSTR\MERKEREX0", 
1$UINT, TO_UDINT(2806484529), "DI1601\_BASE\SERIALNOSTR\MERKEREX0", 
1$UINT, TO_UDINT(921637672), "ST1511\_BASE\_BASE\SERIALNOSTR\MERKEREX0", 
1$UINT, TO_UDINT(3174837553), "ST1512\_BASE\_BASE\SERIALNOSTR\MERKEREX0", 
1$UINT, TO_UDINT(1923234553), "ST1513\_BASE\_BASE\SERIALNOSTR\MERKEREX0", 
1$UINT, TO_UDINT(1911248706), "ST1514\_BASE\_BASE\SERIALNOSTR\MERKEREX0", 
1$UINT, TO_UDINT(3195355274), "ST1515\_BASE\_BASE\SERIALNOSTR\MERKEREX0", 
1$UINT, TO_UDINT(900103827), "ST1516\_BASE\_BASE\SERIALNOSTR\MERKEREX0", 
1$UINT, TO_UDINT(4198000987), "ST1517\_BASE\_BASE\SERIALNOSTR\MERKEREX0", 
1$UINT, TO_UDINT(859088357), "ST1518\_BASE\_BASE\SERIALNOSTR\MERKEREX0", 
1$UINT, TO_UDINT(4239045165), "ST1519\_BASE\_BASE\SERIALNOSTR\MERKEREX0", 
1$UINT, TO_UDINT(3127115716), "TO1271\_BASE\SERIALNOSTR\MERKEREX0", 

1$UINT, TO_UDINT(1778590035), "HWCONTROL1\SAFETYMANAGER", 



1$UINT, TO_UDINT(1007630054), "SDIASPLC1\SDIASHUBBASE1", 

1$UINT, TO_UDINT(4015996540), "SDIASPLC1\SDIASMANAGER1", 

_NO_ATTR, TO_UDINT(1378000520), "SDIASPLC1", 

_NO_ATTR, TO_UDINT(201264582), "ST1511", 
_NO_ATTR, TO_UDINT(2465619068), "ST1512", 
_NO_ATTR, TO_UDINT(3857804522), "ST1513", 
_NO_ATTR, TO_UDINT(2073426249), "ST1514", 
_NO_ATTR, TO_UDINT(210946527), "ST1515", 
_NO_ATTR, TO_UDINT(2510002277), "ST1516", 
_NO_ATTR, TO_UDINT(3801917683), "ST1517", 
_NO_ATTR, TO_UDINT(1914942818), "ST1518", 
_NO_ATTR, TO_UDINT(86279668), "ST1519", 

1$UINT, TO_UDINT(869501406), "ST1511\ST151_INTVISU1", 
1$UINT, TO_UDINT(437992748), "ST1512\ST151_INTVISU1", 
1$UINT, TO_UDINT(3027479741), "ST1513\ST151_INTVISU1", 
1$UINT, TO_UDINT(1233802440), "ST1514\ST151_INTVISU1", 
1$UINT, TO_UDINT(3890398553), "ST1515\ST151_INTVISU1", 
1$UINT, TO_UDINT(3458888107), "ST1516\ST151_INTVISU1", 
1$UINT, TO_UDINT(1614995514), "ST1517\ST151_INTVISU1", 
1$UINT, TO_UDINT(4004022016), "ST1518\ST151_INTVISU1", 
1$UINT, TO_UDINT(1086330513), "ST1519\ST151_INTVISU1", 


1$UINT, TO_UDINT(1895500255), "AI0841\_BASE\SERIALNOSTR", 
1$UINT, TO_UDINT(315781518), "DI1601\_BASE\SERIALNOSTR", 
1$UINT, TO_UDINT(3070230801), "ST1511\_BASE\_BASE\SERIALNOSTR", 
1$UINT, TO_UDINT(2196617026), "ST1512\_BASE\_BASE\SERIALNOSTR", 
1$UINT, TO_UDINT(661006156), "ST1513\_BASE\_BASE\SERIALNOSTR", 
1$UINT, TO_UDINT(3912686564), "ST1514\_BASE\_BASE\SERIALNOSTR", 
1$UINT, TO_UDINT(1287474154), "ST1515\_BASE\_BASE\SERIALNOSTR", 
1$UINT, TO_UDINT(2035350969), "ST1516\_BASE\_BASE\SERIALNOSTR", 
1$UINT, TO_UDINT(3705367991), "ST1517\_BASE\_BASE\SERIALNOSTR", 
1$UINT, TO_UDINT(1048576680), "ST1518\_BASE\_BASE\SERIALNOSTR", 
1$UINT, TO_UDINT(2601226918), "ST1519\_BASE\_BASE\SERIALNOSTR", 
1$UINT, TO_UDINT(1942937313), "TO1271\_BASE\SERIALNOSTR", 


_NO_ATTR, TO_UDINT(1390357230), "TO1271", 


_NO_ATTR, TO_UDINT(2395414379), "VARANMANAGER_11", 




//Internal connections
0$UDINT,
47$UDINT,
TO_UDINT(5), "SerialNoStr", TO_UDINT(49),
TO_UDINT(7), "_SerLib1", TO_UDINT(2),
TO_UDINT(7), "_SerLib2", TO_UDINT(3),
TO_UDINT(7), "_CanLib1", TO_UDINT(0),
TO_UDINT(7), "_CanLib2", TO_UDINT(1),
TO_UDINT(7), "_SerLib3", TO_UDINT(4),
TO_UDINT(10), "SerialNoStr", TO_UDINT(50),
TO_UDINT(13), "SafetyManager", TO_UDINT(27),
TO_UDINT(13), "HWRtPostScan", TO_UDINT(14),
TO_UDINT(13), "HwcLogging", TO_UDINT(12),
TO_UDINT(27), "UdpSendData", TO_UDINT(9),
TO_UDINT(27), "UdpReceiveData", TO_UDINT(8),
TO_UDINT(30), "SdiasManager1", TO_UDINT(29),
TO_UDINT(30), "SdiasHubBase1", TO_UDINT(28),
TO_UDINT(31), "SerialNoStr", TO_UDINT(51),
TO_UDINT(31), "ST151_IntVisu1", TO_UDINT(40),
TO_UDINT(32), "SerialNoStr", TO_UDINT(52),
TO_UDINT(32), "ST151_IntVisu1", TO_UDINT(41),
TO_UDINT(33), "SerialNoStr", TO_UDINT(53),
TO_UDINT(33), "ST151_IntVisu1", TO_UDINT(42),
TO_UDINT(34), "SerialNoStr", TO_UDINT(54),
TO_UDINT(34), "ST151_IntVisu1", TO_UDINT(43),
TO_UDINT(35), "SerialNoStr", TO_UDINT(55),
TO_UDINT(35), "ST151_IntVisu1", TO_UDINT(44),
TO_UDINT(36), "SerialNoStr", TO_UDINT(56),
TO_UDINT(36), "ST151_IntVisu1", TO_UDINT(45),
TO_UDINT(37), "SerialNoStr", TO_UDINT(57),
TO_UDINT(37), "ST151_IntVisu1", TO_UDINT(46),
TO_UDINT(38), "SerialNoStr", TO_UDINT(58),
TO_UDINT(38), "ST151_IntVisu1", TO_UDINT(47),
TO_UDINT(39), "SerialNoStr", TO_UDINT(59),
TO_UDINT(39), "ST151_IntVisu1", TO_UDINT(48),
TO_UDINT(49), "MerkerEx0", TO_UDINT(15),
TO_UDINT(50), "MerkerEx0", TO_UDINT(16),
TO_UDINT(51), "MerkerEx0", TO_UDINT(17),
TO_UDINT(52), "MerkerEx0", TO_UDINT(18),
TO_UDINT(53), "MerkerEx0", TO_UDINT(19),
TO_UDINT(54), "MerkerEx0", TO_UDINT(20),
TO_UDINT(55), "MerkerEx0", TO_UDINT(21),
TO_UDINT(56), "MerkerEx0", TO_UDINT(22),
TO_UDINT(57), "MerkerEx0", TO_UDINT(23),
TO_UDINT(58), "MerkerEx0", TO_UDINT(24),
TO_UDINT(59), "MerkerEx0", TO_UDINT(25),
TO_UDINT(60), "MerkerEx0", TO_UDINT(26),
TO_UDINT(61), "SerialNoStr", TO_UDINT(60),
TO_UDINT(62), "ASCII_BIN1", TO_UDINT(6),
TO_UDINT(62), "Hub_Base_Root0", TO_UDINT(11),
0$UDINT,
41$UDINT,
TO_UDINT(5), "SdiasIn", TO_UDINT(28), "ClassSvr",
TO_UDINT(7), "To_HwControl", TO_UDINT(13), "Control",
TO_UDINT(10), "SdiasIn", TO_UDINT(28), "ClassSvr",
TO_UDINT(11), "VaranConnect", TO_UDINT(62), "Control",
TO_UDINT(14), "toHwControlBase", TO_UDINT(13), "Control",
TO_UDINT(27), "To_HwControl", TO_UDINT(13), "Control",
TO_UDINT(28), "ToNextSDIAS", TO_UDINT(29), "ClassState",
TO_UDINT(29), "ToBusInterface", TO_UDINT(30), "CallCommand",
TO_UDINT(30), "ToHwControl", TO_UDINT(13), "Control",
TO_UDINT(31), "SdiasIn", TO_UDINT(28), "ClassSvr",
TO_UDINT(32), "SdiasIn", TO_UDINT(28), "ClassSvr",
TO_UDINT(33), "SdiasIn", TO_UDINT(28), "ClassSvr",
TO_UDINT(34), "SdiasIn", TO_UDINT(28), "ClassSvr",
TO_UDINT(35), "SdiasIn", TO_UDINT(28), "ClassSvr",
TO_UDINT(36), "SdiasIn", TO_UDINT(28), "ClassSvr",
TO_UDINT(37), "SdiasIn", TO_UDINT(28), "ClassSvr",
TO_UDINT(38), "SdiasIn", TO_UDINT(28), "ClassSvr",
TO_UDINT(39), "SdiasIn", TO_UDINT(28), "ClassSvr",
TO_UDINT(40), "toST151Base", TO_UDINT(31), "ClassState",
TO_UDINT(41), "toST151Base", TO_UDINT(32), "ClassState",
TO_UDINT(42), "toST151Base", TO_UDINT(33), "ClassState",
TO_UDINT(43), "toST151Base", TO_UDINT(34), "ClassState",
TO_UDINT(44), "toST151Base", TO_UDINT(35), "ClassState",
TO_UDINT(45), "toST151Base", TO_UDINT(36), "ClassState",
TO_UDINT(46), "toST151Base", TO_UDINT(37), "ClassState",
TO_UDINT(47), "toST151Base", TO_UDINT(38), "ClassState",
TO_UDINT(48), "toST151Base", TO_UDINT(39), "ClassState",
TO_UDINT(49), "DataBuffer", TO_UDINT(15), "m_udLength",
TO_UDINT(50), "DataBuffer", TO_UDINT(16), "m_udLength",
TO_UDINT(51), "DataBuffer", TO_UDINT(17), "m_udLength",
TO_UDINT(52), "DataBuffer", TO_UDINT(18), "m_udLength",
TO_UDINT(53), "DataBuffer", TO_UDINT(19), "m_udLength",
TO_UDINT(54), "DataBuffer", TO_UDINT(20), "m_udLength",
TO_UDINT(55), "DataBuffer", TO_UDINT(21), "m_udLength",
TO_UDINT(56), "DataBuffer", TO_UDINT(22), "m_udLength",
TO_UDINT(57), "DataBuffer", TO_UDINT(23), "m_udLength",
TO_UDINT(58), "DataBuffer", TO_UDINT(24), "m_udLength",
TO_UDINT(59), "DataBuffer", TO_UDINT(25), "m_udLength",
TO_UDINT(60), "DataBuffer", TO_UDINT(26), "m_udLength",
TO_UDINT(61), "SdiasIn", TO_UDINT(28), "ClassSvr",
TO_UDINT(62), "To_HwControl", TO_UDINT(13), "Control",

//Initialization values
0$UDINT,
474$UDINT,
TO_UDINT(0), "CanBus", TO_UDINT(1),//|HW_Network._base\CP112_IOs1\_CanLib1.CanBus;
TO_UDINT(1), "CanBus", TO_UDINT(2),//|HW_Network._base\CP112_IOs1\_CanLib2.CanBus;
TO_UDINT(2), "Com", TO_UDINT(1),//|HW_Network._base\CP112_IOs1\_SerLib1.Com;
TO_UDINT(3), "Com", TO_UDINT(2),//|HW_Network._base\CP112_IOs1\_SerLib2.Com;
TO_UDINT(4), "Com", TO_UDINT(3),//|HW_Network._base\CP112_IOs1\_SerLib3.Com;
TO_UDINT(5), "LEDControl", TO_UDINT(0),//|HW_Network.AI0841.LEDControl;
TO_UDINT(5), "Place", TO_UDINT(0),//|HW_Network.AI0841.Place;
TO_UDINT(5), "Required", TO_UDINT(1),//|HW_Network.AI0841.Required;
TO_UDINT(5), "LowRangeLimit", TO_UDINT(3000),//|HW_Network.AI0841.LowRangeLimit;
TO_UDINT(5), "AI1_Min", TO_UDINT(0),//|HW_Network.AI0841.AI1_Min;
TO_UDINT(5), "AI1_Max", TO_UDINT(20000),//|HW_Network.AI0841.AI1_Max;
TO_UDINT(5), "AI2_Min", TO_UDINT(0),//|HW_Network.AI0841.AI2_Min;
TO_UDINT(5), "AI2_Max", TO_UDINT(20000),//|HW_Network.AI0841.AI2_Max;
TO_UDINT(5), "AI3_Min", TO_UDINT(0),//|HW_Network.AI0841.AI3_Min;
TO_UDINT(5), "AI3_Max", TO_UDINT(20000),//|HW_Network.AI0841.AI3_Max;
TO_UDINT(5), "AI4_Min", TO_UDINT(0),//|HW_Network.AI0841.AI4_Min;
TO_UDINT(5), "AI4_Max", TO_UDINT(20000),//|HW_Network.AI0841.AI4_Max;
TO_UDINT(5), "AI5_Min", TO_UDINT(0),//|HW_Network.AI0841.AI5_Min;
TO_UDINT(5), "AI5_Max", TO_UDINT(20000),//|HW_Network.AI0841.AI5_Max;
TO_UDINT(5), "AI6_Min", TO_UDINT(0),//|HW_Network.AI0841.AI6_Min;
TO_UDINT(5), "AI6_Max", TO_UDINT(20000),//|HW_Network.AI0841.AI6_Max;
TO_UDINT(5), "AI7Config", TO_UDINT(0),//|HW_Network.AI0841.AI7Config;
TO_UDINT(5), "AI7_Freq", TO_UDINT(0),//|HW_Network.AI0841.AI7_Freq;
TO_UDINT(5), "AI7_Min", TO_UDINT(0),//|HW_Network.AI0841.AI7_Min;
TO_UDINT(5), "AI7_Max", TO_UDINT(20000),//|HW_Network.AI0841.AI7_Max;
TO_UDINT(5), "AI8Config", TO_UDINT(0),//|HW_Network.AI0841.AI8Config;
TO_UDINT(5), "AI8_Freq", TO_UDINT(0),//|HW_Network.AI0841.AI8_Freq;
TO_UDINT(5), "AI8_Min", TO_UDINT(0),//|HW_Network.AI0841.AI8_Min;
TO_UDINT(5), "AI8_Max", TO_UDINT(20000),//|HW_Network.AI0841.AI8_Max;
TO_UDINT(10), "LEDControl", TO_UDINT(0),//|HW_Network.DI1601.LEDControl;
TO_UDINT(10), "Place", TO_UDINT(1),//|HW_Network.DI1601.Place;
TO_UDINT(10), "Required", TO_UDINT(1),//|HW_Network.DI1601.Required;
TO_UDINT(11), "Splitter_Place", TO_UDINT(0),//|HW_Network.VaranManager_11\Hub_Base_Root0.Splitter_Place;
TO_UDINT(13), "UdpSafetyPort", TO_UDINT(10823),//|HW_Network.HwControl1.UdpSafetyPort;
TO_UDINT(13), "InterfaceNo", TO_UDINT(1),//|HW_Network.HwControl1.InterfaceNo;
TO_UDINT(13), "RtTaskSync", TO_UDINT(0),//|HW_Network.HwControl1.RtTaskSync;
TO_UDINT(15), "ThreadSafe", TO_UDINT(0),//|HW_Network.SerialNoStr\_base\AI0841\MerkerEx0.ThreadSafe;
TO_UDINT(16), "ThreadSafe", TO_UDINT(0),//|HW_Network.SerialNoStr\_base\DI1601\MerkerEx0.ThreadSafe;
TO_UDINT(17), "ThreadSafe", TO_UDINT(0),//|HW_Network.SerialNoStr\_base\_base\ST1511\MerkerEx0.ThreadSafe;
TO_UDINT(18), "ThreadSafe", TO_UDINT(0),//|HW_Network.SerialNoStr\_base\_base\ST1512\MerkerEx0.ThreadSafe;
TO_UDINT(19), "ThreadSafe", TO_UDINT(0),//|HW_Network.SerialNoStr\_base\_base\ST1513\MerkerEx0.ThreadSafe;
TO_UDINT(20), "ThreadSafe", TO_UDINT(0),//|HW_Network.SerialNoStr\_base\_base\ST1514\MerkerEx0.ThreadSafe;
TO_UDINT(21), "ThreadSafe", TO_UDINT(0),//|HW_Network.SerialNoStr\_base\_base\ST1515\MerkerEx0.ThreadSafe;
TO_UDINT(22), "ThreadSafe", TO_UDINT(0),//|HW_Network.SerialNoStr\_base\_base\ST1516\MerkerEx0.ThreadSafe;
TO_UDINT(23), "ThreadSafe", TO_UDINT(0),//|HW_Network.SerialNoStr\_base\_base\ST1517\MerkerEx0.ThreadSafe;
TO_UDINT(24), "ThreadSafe", TO_UDINT(0),//|HW_Network.SerialNoStr\_base\_base\ST1518\MerkerEx0.ThreadSafe;
TO_UDINT(25), "ThreadSafe", TO_UDINT(0),//|HW_Network.SerialNoStr\_base\_base\ST1519\MerkerEx0.ThreadSafe;
TO_UDINT(26), "ThreadSafe", TO_UDINT(0),//|HW_Network.SerialNoStr\_base\TO1271\MerkerEx0.ThreadSafe;
TO_UDINT(27), "UdpSafetyPort", TO_UDINT(10823),//|HW_Network.HwControl1\SafetyManager.UdpSafetyPort;
TO_UDINT(27), "InterfaceNo", TO_UDINT(1),//|HW_Network.HwControl1\SafetyManager.InterfaceNo;
TO_UDINT(27), "UdpSafetyRequestCycle", TO_UDINT(UDP_MIN_REQUEST_TIME),//|HW_Network.HwControl1\SafetyManager.UdpSafetyRequestCycle;
TO_UDINT(27), "UdpSafetyResponseTimeout", TO_UDINT(UDP_MIN_RESPONSE_TIMEOUT),//|HW_Network.HwControl1\SafetyManager.UdpSafetyResponseTimeout;
TO_UDINT(28), "SplitterPlace", TO_UDINT(0),//|HW_Network.SdiasPLC1\SdiasHubBase1.SplitterPlace;
TO_UDINT(29), "DeviceID", TO_UDINT(0),//|HW_Network.SdiasPLC1\SdiasManager1.DeviceID;
TO_UDINT(29), "AutoFarMem", TO_UDINT(0),//|HW_Network.SdiasPLC1\SdiasManager1.AutoFarMem;
TO_UDINT(30), "CycleTime", TO_UDINT(1000),//|HW_Network.SdiasPLC1.CycleTime;
TO_UDINT(30), "IsoStartPoint", TO_UDINT(50),//|HW_Network.SdiasPLC1.IsoStartPoint;
TO_UDINT(30), "AutoFarMem", TO_UDINT(0),//|HW_Network.SdiasPLC1.AutoFarMem;
TO_UDINT(31), "LEDControl", TO_UDINT(0),//|HW_Network.ST1511.LEDControl;
TO_UDINT(31), "CurrentIncrease", TO_UDINT(1),//|HW_Network.ST1511.CurrentIncrease;
TO_UDINT(31), "HWRampdownDeltaFrequency", TO_UDINT(40),//|HW_Network.ST1511.HWRampdownDeltaFrequency;
TO_UDINT(31), "HWRampdownDeltaTime", TO_UDINT(1),//|HW_Network.ST1511.HWRampdownDeltaTime;
TO_UDINT(31), "MaxCurrent", TO_UDINT(500),//|HW_Network.ST1511.MaxCurrent;
TO_UDINT(31), "CurrentOffsetAdjBridge1", TO_UDINT(100),//|HW_Network.ST1511.CurrentOffsetAdjBridge1;
TO_UDINT(31), "CurrentOffsetAdjBridge2", TO_UDINT(100),//|HW_Network.ST1511.CurrentOffsetAdjBridge2;
TO_UDINT(31), "ChopperOffTime", TO_UDINT(1562),//|HW_Network.ST1511.ChopperOffTime;
TO_UDINT(31), "ChopperOnTimeMin", TO_UDINT(180),//|HW_Network.ST1511.ChopperOnTimeMin;
TO_UDINT(31), "FastDecayTime", TO_UDINT(200),//|HW_Network.ST1511.FastDecayTime;
TO_UDINT(31), "FastDecayTimeFallingStep", TO_UDINT(600),//|HW_Network.ST1511.FastDecayTimeFallingStep;
TO_UDINT(31), "FastDecayCurrentThreshold", TO_UDINT(250),//|HW_Network.ST1511.FastDecayCurrentThreshold;
TO_UDINT(31), "EnableSteps", TO_UDINT(2#1000111),//|HW_Network.ST1511.EnableSteps;
TO_UDINT(31), "FrequLimitIncrease2to1", TO_UDINT(50000),//|HW_Network.ST1511.FrequLimitIncrease2to1;
TO_UDINT(31), "FrequLimitIncrease4to2", TO_UDINT(40000),//|HW_Network.ST1511.FrequLimitIncrease4to2;
TO_UDINT(31), "FrequLimitIncrease8to4", TO_UDINT(30000),//|HW_Network.ST1511.FrequLimitIncrease8to4;
TO_UDINT(31), "FrequLimitIncrease16to8", TO_UDINT(20000),//|HW_Network.ST1511.FrequLimitIncrease16to8;
TO_UDINT(31), "FrequLimitIncrease32to16", TO_UDINT(10000),//|HW_Network.ST1511.FrequLimitIncrease32to16;
TO_UDINT(31), "FrequLimitIncrease64to32", TO_UDINT(5000),//|HW_Network.ST1511.FrequLimitIncrease64to32;
TO_UDINT(31), "FrequLimitDecrease1to2", TO_UDINT(0),//|HW_Network.ST1511.FrequLimitDecrease1to2;
TO_UDINT(31), "FrequLimitDecrease2to4", TO_UDINT(0),//|HW_Network.ST1511.FrequLimitDecrease2to4;
TO_UDINT(31), "FrequLimitDecrease4to8", TO_UDINT(0),//|HW_Network.ST1511.FrequLimitDecrease4to8;
TO_UDINT(31), "FrequLimitDecrease8to16", TO_UDINT(0),//|HW_Network.ST1511.FrequLimitDecrease8to16;
TO_UDINT(31), "FrequLimitDecrease16to32", TO_UDINT(0),//|HW_Network.ST1511.FrequLimitDecrease16to32;
TO_UDINT(31), "FrequLimitDecrease32to64", TO_UDINT(0),//|HW_Network.ST1511.FrequLimitDecrease32to64;
TO_UDINT(31), "Place", TO_UDINT(3),//|HW_Network.ST1511.Place;
TO_UDINT(31), "Required", TO_UDINT(1),//|HW_Network.ST1511.Required;
TO_UDINT(31), "InvertEncoder", TO_UDINT(0),//|HW_Network.ST1511.InvertEncoder;
TO_UDINT(31), "InvertZeroPosition", TO_UDINT(0),//|HW_Network.ST1511.InvertZeroPosition;
TO_UDINT(31), "EncoderSampling", TO_UDINT(3),//|HW_Network.ST1511.EncoderSampling;
TO_UDINT(31), "EncMode", TO_UDINT(0),//|HW_Network.ST1511.EncMode;
TO_UDINT(31), "LatchType", TO_UDINT(0),//|HW_Network.ST1511.LatchType;
TO_UDINT(31), "ABCountMode", TO_UDINT(1),//|HW_Network.ST1511.ABCountMode;
TO_UDINT(31), "StallCurrentReduction", TO_UDINT(0),//|HW_Network.ST1511.StallCurrentReduction;
TO_UDINT(31), "StallCurrentWindow", TO_UDINT(0),//|HW_Network.ST1511.StallCurrentWindow;
TO_UDINT(31), "EnableRegenResistor", TO_UDINT(0),//|HW_Network.ST1511.EnableRegenResistor;
TO_UDINT(31), "RegenResistance", TO_UDINT(150),//|HW_Network.ST1511.RegenResistance;
TO_UDINT(31), "RatedMaxPower", TO_UDINT(1000),//|HW_Network.ST1511.RatedMaxPower;
TO_UDINT(31), "LoadThresholdWarning", TO_UDINT(80),//|HW_Network.ST1511.LoadThresholdWarning;
TO_UDINT(31), "LoadThresholdBridge", TO_UDINT(90),//|HW_Network.ST1511.LoadThresholdBridge;
TO_UDINT(31), "LoadThresholdResistor", TO_UDINT(100),//|HW_Network.ST1511.LoadThresholdResistor;
TO_UDINT(31), "SteppingHysteresis", TO_UDINT(64),//|HW_Network.ST1511.SteppingHysteresis;
TO_UDINT(31), "CompModeVST", TO_UDINT(0),//|HW_Network.ST1511.CompModeVST;
TO_UDINT(31), "UseOszi", TO_UDINT(0),//|HW_Network.ST1511.UseOszi;
TO_UDINT(32), "LEDControl", TO_UDINT(0),//|HW_Network.ST1512.LEDControl;
TO_UDINT(32), "CurrentIncrease", TO_UDINT(1),//|HW_Network.ST1512.CurrentIncrease;
TO_UDINT(32), "HWRampdownDeltaFrequency", TO_UDINT(40),//|HW_Network.ST1512.HWRampdownDeltaFrequency;
TO_UDINT(32), "HWRampdownDeltaTime", TO_UDINT(1),//|HW_Network.ST1512.HWRampdownDeltaTime;
TO_UDINT(32), "MaxCurrent", TO_UDINT(500),//|HW_Network.ST1512.MaxCurrent;
TO_UDINT(32), "CurrentOffsetAdjBridge1", TO_UDINT(100),//|HW_Network.ST1512.CurrentOffsetAdjBridge1;
TO_UDINT(32), "CurrentOffsetAdjBridge2", TO_UDINT(100),//|HW_Network.ST1512.CurrentOffsetAdjBridge2;
TO_UDINT(32), "ChopperOffTime", TO_UDINT(1562),//|HW_Network.ST1512.ChopperOffTime;
TO_UDINT(32), "ChopperOnTimeMin", TO_UDINT(180),//|HW_Network.ST1512.ChopperOnTimeMin;
TO_UDINT(32), "FastDecayTime", TO_UDINT(200),//|HW_Network.ST1512.FastDecayTime;
TO_UDINT(32), "FastDecayTimeFallingStep", TO_UDINT(600),//|HW_Network.ST1512.FastDecayTimeFallingStep;
TO_UDINT(32), "FastDecayCurrentThreshold", TO_UDINT(250),//|HW_Network.ST1512.FastDecayCurrentThreshold;
TO_UDINT(32), "EnableSteps", TO_UDINT(2#1000111),//|HW_Network.ST1512.EnableSteps;
TO_UDINT(32), "FrequLimitIncrease2to1", TO_UDINT(50000),//|HW_Network.ST1512.FrequLimitIncrease2to1;
TO_UDINT(32), "FrequLimitIncrease4to2", TO_UDINT(40000),//|HW_Network.ST1512.FrequLimitIncrease4to2;
TO_UDINT(32), "FrequLimitIncrease8to4", TO_UDINT(30000),//|HW_Network.ST1512.FrequLimitIncrease8to4;
TO_UDINT(32), "FrequLimitIncrease16to8", TO_UDINT(20000),//|HW_Network.ST1512.FrequLimitIncrease16to8;
TO_UDINT(32), "FrequLimitIncrease32to16", TO_UDINT(10000),//|HW_Network.ST1512.FrequLimitIncrease32to16;
TO_UDINT(32), "FrequLimitIncrease64to32", TO_UDINT(5000),//|HW_Network.ST1512.FrequLimitIncrease64to32;
TO_UDINT(32), "FrequLimitDecrease1to2", TO_UDINT(0),//|HW_Network.ST1512.FrequLimitDecrease1to2;
TO_UDINT(32), "FrequLimitDecrease2to4", TO_UDINT(0),//|HW_Network.ST1512.FrequLimitDecrease2to4;
TO_UDINT(32), "FrequLimitDecrease4to8", TO_UDINT(0),//|HW_Network.ST1512.FrequLimitDecrease4to8;
TO_UDINT(32), "FrequLimitDecrease8to16", TO_UDINT(0),//|HW_Network.ST1512.FrequLimitDecrease8to16;
TO_UDINT(32), "FrequLimitDecrease16to32", TO_UDINT(0),//|HW_Network.ST1512.FrequLimitDecrease16to32;
TO_UDINT(32), "FrequLimitDecrease32to64", TO_UDINT(0),//|HW_Network.ST1512.FrequLimitDecrease32to64;
TO_UDINT(32), "Place", TO_UDINT(4),//|HW_Network.ST1512.Place;
TO_UDINT(32), "Required", TO_UDINT(1),//|HW_Network.ST1512.Required;
TO_UDINT(32), "InvertEncoder", TO_UDINT(0),//|HW_Network.ST1512.InvertEncoder;
TO_UDINT(32), "InvertZeroPosition", TO_UDINT(0),//|HW_Network.ST1512.InvertZeroPosition;
TO_UDINT(32), "EncoderSampling", TO_UDINT(3),//|HW_Network.ST1512.EncoderSampling;
TO_UDINT(32), "EncMode", TO_UDINT(0),//|HW_Network.ST1512.EncMode;
TO_UDINT(32), "LatchType", TO_UDINT(0),//|HW_Network.ST1512.LatchType;
TO_UDINT(32), "ABCountMode", TO_UDINT(1),//|HW_Network.ST1512.ABCountMode;
TO_UDINT(32), "StallCurrentReduction", TO_UDINT(0),//|HW_Network.ST1512.StallCurrentReduction;
TO_UDINT(32), "StallCurrentWindow", TO_UDINT(0),//|HW_Network.ST1512.StallCurrentWindow;
TO_UDINT(32), "EnableRegenResistor", TO_UDINT(0),//|HW_Network.ST1512.EnableRegenResistor;
TO_UDINT(32), "RegenResistance", TO_UDINT(150),//|HW_Network.ST1512.RegenResistance;
TO_UDINT(32), "RatedMaxPower", TO_UDINT(1000),//|HW_Network.ST1512.RatedMaxPower;
TO_UDINT(32), "LoadThresholdWarning", TO_UDINT(80),//|HW_Network.ST1512.LoadThresholdWarning;
TO_UDINT(32), "LoadThresholdBridge", TO_UDINT(90),//|HW_Network.ST1512.LoadThresholdBridge;
TO_UDINT(32), "LoadThresholdResistor", TO_UDINT(100),//|HW_Network.ST1512.LoadThresholdResistor;
TO_UDINT(32), "SteppingHysteresis", TO_UDINT(64),//|HW_Network.ST1512.SteppingHysteresis;
TO_UDINT(32), "CompModeVST", TO_UDINT(0),//|HW_Network.ST1512.CompModeVST;
TO_UDINT(32), "UseOszi", TO_UDINT(0),//|HW_Network.ST1512.UseOszi;
TO_UDINT(33), "LEDControl", TO_UDINT(0),//|HW_Network.ST1513.LEDControl;
TO_UDINT(33), "CurrentIncrease", TO_UDINT(1),//|HW_Network.ST1513.CurrentIncrease;
TO_UDINT(33), "HWRampdownDeltaFrequency", TO_UDINT(40),//|HW_Network.ST1513.HWRampdownDeltaFrequency;
TO_UDINT(33), "HWRampdownDeltaTime", TO_UDINT(1),//|HW_Network.ST1513.HWRampdownDeltaTime;
TO_UDINT(33), "MaxCurrent", TO_UDINT(700),//|HW_Network.ST1513.MaxCurrent;
TO_UDINT(33), "CurrentOffsetAdjBridge1", TO_UDINT(100),//|HW_Network.ST1513.CurrentOffsetAdjBridge1;
TO_UDINT(33), "CurrentOffsetAdjBridge2", TO_UDINT(100),//|HW_Network.ST1513.CurrentOffsetAdjBridge2;
TO_UDINT(33), "ChopperOffTime", TO_UDINT(1562),//|HW_Network.ST1513.ChopperOffTime;
TO_UDINT(33), "ChopperOnTimeMin", TO_UDINT(180),//|HW_Network.ST1513.ChopperOnTimeMin;
TO_UDINT(33), "FastDecayTime", TO_UDINT(200),//|HW_Network.ST1513.FastDecayTime;
TO_UDINT(33), "FastDecayTimeFallingStep", TO_UDINT(600),//|HW_Network.ST1513.FastDecayTimeFallingStep;
TO_UDINT(33), "FastDecayCurrentThreshold", TO_UDINT(250),//|HW_Network.ST1513.FastDecayCurrentThreshold;
TO_UDINT(33), "EnableSteps", TO_UDINT(2#1000111),//|HW_Network.ST1513.EnableSteps;
TO_UDINT(33), "FrequLimitIncrease2to1", TO_UDINT(50000),//|HW_Network.ST1513.FrequLimitIncrease2to1;
TO_UDINT(33), "FrequLimitIncrease4to2", TO_UDINT(40000),//|HW_Network.ST1513.FrequLimitIncrease4to2;
TO_UDINT(33), "FrequLimitIncrease8to4", TO_UDINT(30000),//|HW_Network.ST1513.FrequLimitIncrease8to4;
TO_UDINT(33), "FrequLimitIncrease16to8", TO_UDINT(20000),//|HW_Network.ST1513.FrequLimitIncrease16to8;
TO_UDINT(33), "FrequLimitIncrease32to16", TO_UDINT(10000),//|HW_Network.ST1513.FrequLimitIncrease32to16;
TO_UDINT(33), "FrequLimitIncrease64to32", TO_UDINT(5000),//|HW_Network.ST1513.FrequLimitIncrease64to32;
TO_UDINT(33), "FrequLimitDecrease1to2", TO_UDINT(0),//|HW_Network.ST1513.FrequLimitDecrease1to2;
TO_UDINT(33), "FrequLimitDecrease2to4", TO_UDINT(0),//|HW_Network.ST1513.FrequLimitDecrease2to4;
TO_UDINT(33), "FrequLimitDecrease4to8", TO_UDINT(0),//|HW_Network.ST1513.FrequLimitDecrease4to8;
TO_UDINT(33), "FrequLimitDecrease8to16", TO_UDINT(0),//|HW_Network.ST1513.FrequLimitDecrease8to16;
TO_UDINT(33), "FrequLimitDecrease16to32", TO_UDINT(0),//|HW_Network.ST1513.FrequLimitDecrease16to32;
TO_UDINT(33), "FrequLimitDecrease32to64", TO_UDINT(0),//|HW_Network.ST1513.FrequLimitDecrease32to64;
TO_UDINT(33), "Place", TO_UDINT(5),//|HW_Network.ST1513.Place;
TO_UDINT(33), "Required", TO_UDINT(1),//|HW_Network.ST1513.Required;
TO_UDINT(33), "InvertEncoder", TO_UDINT(0),//|HW_Network.ST1513.InvertEncoder;
TO_UDINT(33), "InvertZeroPosition", TO_UDINT(0),//|HW_Network.ST1513.InvertZeroPosition;
TO_UDINT(33), "EncoderSampling", TO_UDINT(3),//|HW_Network.ST1513.EncoderSampling;
TO_UDINT(33), "EncMode", TO_UDINT(0),//|HW_Network.ST1513.EncMode;
TO_UDINT(33), "LatchType", TO_UDINT(0),//|HW_Network.ST1513.LatchType;
TO_UDINT(33), "ABCountMode", TO_UDINT(1),//|HW_Network.ST1513.ABCountMode;
TO_UDINT(33), "StallCurrentReduction", TO_UDINT(0),//|HW_Network.ST1513.StallCurrentReduction;
TO_UDINT(33), "StallCurrentWindow", TO_UDINT(0),//|HW_Network.ST1513.StallCurrentWindow;
TO_UDINT(33), "EnableRegenResistor", TO_UDINT(0),//|HW_Network.ST1513.EnableRegenResistor;
TO_UDINT(33), "RegenResistance", TO_UDINT(150),//|HW_Network.ST1513.RegenResistance;
TO_UDINT(33), "RatedMaxPower", TO_UDINT(1000),//|HW_Network.ST1513.RatedMaxPower;
TO_UDINT(33), "LoadThresholdWarning", TO_UDINT(80),//|HW_Network.ST1513.LoadThresholdWarning;
TO_UDINT(33), "LoadThresholdBridge", TO_UDINT(90),//|HW_Network.ST1513.LoadThresholdBridge;
TO_UDINT(33), "LoadThresholdResistor", TO_UDINT(100),//|HW_Network.ST1513.LoadThresholdResistor;
TO_UDINT(33), "SteppingHysteresis", TO_UDINT(64),//|HW_Network.ST1513.SteppingHysteresis;
TO_UDINT(33), "CompModeVST", TO_UDINT(0),//|HW_Network.ST1513.CompModeVST;
TO_UDINT(33), "UseOszi", TO_UDINT(0),//|HW_Network.ST1513.UseOszi;
TO_UDINT(34), "LEDControl", TO_UDINT(0),//|HW_Network.ST1514.LEDControl;
TO_UDINT(34), "CurrentIncrease", TO_UDINT(1),//|HW_Network.ST1514.CurrentIncrease;
TO_UDINT(34), "HWRampdownDeltaFrequency", TO_UDINT(40),//|HW_Network.ST1514.HWRampdownDeltaFrequency;
TO_UDINT(34), "HWRampdownDeltaTime", TO_UDINT(1),//|HW_Network.ST1514.HWRampdownDeltaTime;
TO_UDINT(34), "MaxCurrent", TO_UDINT(600),//|HW_Network.ST1514.MaxCurrent;
TO_UDINT(34), "CurrentOffsetAdjBridge1", TO_UDINT(100),//|HW_Network.ST1514.CurrentOffsetAdjBridge1;
TO_UDINT(34), "CurrentOffsetAdjBridge2", TO_UDINT(100),//|HW_Network.ST1514.CurrentOffsetAdjBridge2;
TO_UDINT(34), "ChopperOffTime", TO_UDINT(1562),//|HW_Network.ST1514.ChopperOffTime;
TO_UDINT(34), "ChopperOnTimeMin", TO_UDINT(180),//|HW_Network.ST1514.ChopperOnTimeMin;
TO_UDINT(34), "FastDecayTime", TO_UDINT(200),//|HW_Network.ST1514.FastDecayTime;
TO_UDINT(34), "FastDecayTimeFallingStep", TO_UDINT(600),//|HW_Network.ST1514.FastDecayTimeFallingStep;
TO_UDINT(34), "FastDecayCurrentThreshold", TO_UDINT(250),//|HW_Network.ST1514.FastDecayCurrentThreshold;
TO_UDINT(34), "EnableSteps", TO_UDINT(2#1000111),//|HW_Network.ST1514.EnableSteps;
TO_UDINT(34), "FrequLimitIncrease2to1", TO_UDINT(50000),//|HW_Network.ST1514.FrequLimitIncrease2to1;
TO_UDINT(34), "FrequLimitIncrease4to2", TO_UDINT(40000),//|HW_Network.ST1514.FrequLimitIncrease4to2;
TO_UDINT(34), "FrequLimitIncrease8to4", TO_UDINT(30000),//|HW_Network.ST1514.FrequLimitIncrease8to4;
TO_UDINT(34), "FrequLimitIncrease16to8", TO_UDINT(20000),//|HW_Network.ST1514.FrequLimitIncrease16to8;
TO_UDINT(34), "FrequLimitIncrease32to16", TO_UDINT(10000),//|HW_Network.ST1514.FrequLimitIncrease32to16;
TO_UDINT(34), "FrequLimitIncrease64to32", TO_UDINT(5000),//|HW_Network.ST1514.FrequLimitIncrease64to32;
TO_UDINT(34), "FrequLimitDecrease1to2", TO_UDINT(0),//|HW_Network.ST1514.FrequLimitDecrease1to2;
TO_UDINT(34), "FrequLimitDecrease2to4", TO_UDINT(0),//|HW_Network.ST1514.FrequLimitDecrease2to4;
TO_UDINT(34), "FrequLimitDecrease4to8", TO_UDINT(0),//|HW_Network.ST1514.FrequLimitDecrease4to8;
TO_UDINT(34), "FrequLimitDecrease8to16", TO_UDINT(0),//|HW_Network.ST1514.FrequLimitDecrease8to16;
TO_UDINT(34), "FrequLimitDecrease16to32", TO_UDINT(0),//|HW_Network.ST1514.FrequLimitDecrease16to32;
TO_UDINT(34), "FrequLimitDecrease32to64", TO_UDINT(0),//|HW_Network.ST1514.FrequLimitDecrease32to64;
TO_UDINT(34), "Place", TO_UDINT(6),//|HW_Network.ST1514.Place;
TO_UDINT(34), "Required", TO_UDINT(1),//|HW_Network.ST1514.Required;
TO_UDINT(34), "InvertEncoder", TO_UDINT(0),//|HW_Network.ST1514.InvertEncoder;
TO_UDINT(34), "InvertZeroPosition", TO_UDINT(0),//|HW_Network.ST1514.InvertZeroPosition;
TO_UDINT(34), "EncoderSampling", TO_UDINT(3),//|HW_Network.ST1514.EncoderSampling;
TO_UDINT(34), "EncMode", TO_UDINT(0),//|HW_Network.ST1514.EncMode;
TO_UDINT(34), "LatchType", TO_UDINT(0),//|HW_Network.ST1514.LatchType;
TO_UDINT(34), "ABCountMode", TO_UDINT(1),//|HW_Network.ST1514.ABCountMode;
TO_UDINT(34), "StallCurrentReduction", TO_UDINT(0),//|HW_Network.ST1514.StallCurrentReduction;
TO_UDINT(34), "StallCurrentWindow", TO_UDINT(0),//|HW_Network.ST1514.StallCurrentWindow;
TO_UDINT(34), "EnableRegenResistor", TO_UDINT(0),//|HW_Network.ST1514.EnableRegenResistor;
TO_UDINT(34), "RegenResistance", TO_UDINT(150),//|HW_Network.ST1514.RegenResistance;
TO_UDINT(34), "RatedMaxPower", TO_UDINT(1000),//|HW_Network.ST1514.RatedMaxPower;
TO_UDINT(34), "LoadThresholdWarning", TO_UDINT(80),//|HW_Network.ST1514.LoadThresholdWarning;
TO_UDINT(34), "LoadThresholdBridge", TO_UDINT(90),//|HW_Network.ST1514.LoadThresholdBridge;
TO_UDINT(34), "LoadThresholdResistor", TO_UDINT(100),//|HW_Network.ST1514.LoadThresholdResistor;
TO_UDINT(34), "SteppingHysteresis", TO_UDINT(64),//|HW_Network.ST1514.SteppingHysteresis;
TO_UDINT(34), "CompModeVST", TO_UDINT(0),//|HW_Network.ST1514.CompModeVST;
TO_UDINT(34), "UseOszi", TO_UDINT(0),//|HW_Network.ST1514.UseOszi;
TO_UDINT(35), "LEDControl", TO_UDINT(0),//|HW_Network.ST1515.LEDControl;
TO_UDINT(35), "CurrentIncrease", TO_UDINT(1),//|HW_Network.ST1515.CurrentIncrease;
TO_UDINT(35), "HWRampdownDeltaFrequency", TO_UDINT(40),//|HW_Network.ST1515.HWRampdownDeltaFrequency;
TO_UDINT(35), "HWRampdownDeltaTime", TO_UDINT(1),//|HW_Network.ST1515.HWRampdownDeltaTime;
TO_UDINT(35), "MaxCurrent", TO_UDINT(1000),//|HW_Network.ST1515.MaxCurrent;
TO_UDINT(35), "CurrentOffsetAdjBridge1", TO_UDINT(100),//|HW_Network.ST1515.CurrentOffsetAdjBridge1;
TO_UDINT(35), "CurrentOffsetAdjBridge2", TO_UDINT(100),//|HW_Network.ST1515.CurrentOffsetAdjBridge2;
TO_UDINT(35), "ChopperOffTime", TO_UDINT(1562),//|HW_Network.ST1515.ChopperOffTime;
TO_UDINT(35), "ChopperOnTimeMin", TO_UDINT(180),//|HW_Network.ST1515.ChopperOnTimeMin;
TO_UDINT(35), "FastDecayTime", TO_UDINT(200),//|HW_Network.ST1515.FastDecayTime;
TO_UDINT(35), "FastDecayTimeFallingStep", TO_UDINT(600),//|HW_Network.ST1515.FastDecayTimeFallingStep;
TO_UDINT(35), "FastDecayCurrentThreshold", TO_UDINT(250),//|HW_Network.ST1515.FastDecayCurrentThreshold;
TO_UDINT(35), "EnableSteps", TO_UDINT(2#1000111),//|HW_Network.ST1515.EnableSteps;
TO_UDINT(35), "FrequLimitIncrease2to1", TO_UDINT(50000),//|HW_Network.ST1515.FrequLimitIncrease2to1;
TO_UDINT(35), "FrequLimitIncrease4to2", TO_UDINT(40000),//|HW_Network.ST1515.FrequLimitIncrease4to2;
TO_UDINT(35), "FrequLimitIncrease8to4", TO_UDINT(30000),//|HW_Network.ST1515.FrequLimitIncrease8to4;
TO_UDINT(35), "FrequLimitIncrease16to8", TO_UDINT(20000),//|HW_Network.ST1515.FrequLimitIncrease16to8;
TO_UDINT(35), "FrequLimitIncrease32to16", TO_UDINT(10000),//|HW_Network.ST1515.FrequLimitIncrease32to16;
TO_UDINT(35), "FrequLimitIncrease64to32", TO_UDINT(5000),//|HW_Network.ST1515.FrequLimitIncrease64to32;
TO_UDINT(35), "FrequLimitDecrease1to2", TO_UDINT(0),//|HW_Network.ST1515.FrequLimitDecrease1to2;
TO_UDINT(35), "FrequLimitDecrease2to4", TO_UDINT(0),//|HW_Network.ST1515.FrequLimitDecrease2to4;
TO_UDINT(35), "FrequLimitDecrease4to8", TO_UDINT(0),//|HW_Network.ST1515.FrequLimitDecrease4to8;
TO_UDINT(35), "FrequLimitDecrease8to16", TO_UDINT(0),//|HW_Network.ST1515.FrequLimitDecrease8to16;
TO_UDINT(35), "FrequLimitDecrease16to32", TO_UDINT(0),//|HW_Network.ST1515.FrequLimitDecrease16to32;
TO_UDINT(35), "FrequLimitDecrease32to64", TO_UDINT(0),//|HW_Network.ST1515.FrequLimitDecrease32to64;
TO_UDINT(35), "Place", TO_UDINT(7),//|HW_Network.ST1515.Place;
TO_UDINT(35), "Required", TO_UDINT(1),//|HW_Network.ST1515.Required;
TO_UDINT(35), "InvertEncoder", TO_UDINT(0),//|HW_Network.ST1515.InvertEncoder;
TO_UDINT(35), "InvertZeroPosition", TO_UDINT(0),//|HW_Network.ST1515.InvertZeroPosition;
TO_UDINT(35), "EncoderSampling", TO_UDINT(3),//|HW_Network.ST1515.EncoderSampling;
TO_UDINT(35), "EncMode", TO_UDINT(0),//|HW_Network.ST1515.EncMode;
TO_UDINT(35), "LatchType", TO_UDINT(0),//|HW_Network.ST1515.LatchType;
TO_UDINT(35), "ABCountMode", TO_UDINT(1),//|HW_Network.ST1515.ABCountMode;
TO_UDINT(35), "StallCurrentReduction", TO_UDINT(0),//|HW_Network.ST1515.StallCurrentReduction;
TO_UDINT(35), "StallCurrentWindow", TO_UDINT(0),//|HW_Network.ST1515.StallCurrentWindow;
TO_UDINT(35), "EnableRegenResistor", TO_UDINT(0),//|HW_Network.ST1515.EnableRegenResistor;
TO_UDINT(35), "RegenResistance", TO_UDINT(150),//|HW_Network.ST1515.RegenResistance;
TO_UDINT(35), "RatedMaxPower", TO_UDINT(1000),//|HW_Network.ST1515.RatedMaxPower;
TO_UDINT(35), "LoadThresholdWarning", TO_UDINT(80),//|HW_Network.ST1515.LoadThresholdWarning;
TO_UDINT(35), "LoadThresholdBridge", TO_UDINT(90),//|HW_Network.ST1515.LoadThresholdBridge;
TO_UDINT(35), "LoadThresholdResistor", TO_UDINT(100),//|HW_Network.ST1515.LoadThresholdResistor;
TO_UDINT(35), "SteppingHysteresis", TO_UDINT(64),//|HW_Network.ST1515.SteppingHysteresis;
TO_UDINT(35), "CompModeVST", TO_UDINT(0),//|HW_Network.ST1515.CompModeVST;
TO_UDINT(35), "UseOszi", TO_UDINT(0),//|HW_Network.ST1515.UseOszi;
TO_UDINT(36), "LEDControl", TO_UDINT(0),//|HW_Network.ST1516.LEDControl;
TO_UDINT(36), "CurrentIncrease", TO_UDINT(1),//|HW_Network.ST1516.CurrentIncrease;
TO_UDINT(36), "HWRampdownDeltaFrequency", TO_UDINT(40),//|HW_Network.ST1516.HWRampdownDeltaFrequency;
TO_UDINT(36), "HWRampdownDeltaTime", TO_UDINT(1),//|HW_Network.ST1516.HWRampdownDeltaTime;
TO_UDINT(36), "MaxCurrent", TO_UDINT(600),//|HW_Network.ST1516.MaxCurrent;
TO_UDINT(36), "CurrentOffsetAdjBridge1", TO_UDINT(100),//|HW_Network.ST1516.CurrentOffsetAdjBridge1;
TO_UDINT(36), "CurrentOffsetAdjBridge2", TO_UDINT(100),//|HW_Network.ST1516.CurrentOffsetAdjBridge2;
TO_UDINT(36), "ChopperOffTime", TO_UDINT(1562),//|HW_Network.ST1516.ChopperOffTime;
TO_UDINT(36), "ChopperOnTimeMin", TO_UDINT(180),//|HW_Network.ST1516.ChopperOnTimeMin;
TO_UDINT(36), "FastDecayTime", TO_UDINT(200),//|HW_Network.ST1516.FastDecayTime;
TO_UDINT(36), "FastDecayTimeFallingStep", TO_UDINT(600),//|HW_Network.ST1516.FastDecayTimeFallingStep;
TO_UDINT(36), "FastDecayCurrentThreshold", TO_UDINT(250),//|HW_Network.ST1516.FastDecayCurrentThreshold;
TO_UDINT(36), "EnableSteps", TO_UDINT(2#1000111),//|HW_Network.ST1516.EnableSteps;
TO_UDINT(36), "FrequLimitIncrease2to1", TO_UDINT(50000),//|HW_Network.ST1516.FrequLimitIncrease2to1;
TO_UDINT(36), "FrequLimitIncrease4to2", TO_UDINT(40000),//|HW_Network.ST1516.FrequLimitIncrease4to2;
TO_UDINT(36), "FrequLimitIncrease8to4", TO_UDINT(30000),//|HW_Network.ST1516.FrequLimitIncrease8to4;
TO_UDINT(36), "FrequLimitIncrease16to8", TO_UDINT(20000),//|HW_Network.ST1516.FrequLimitIncrease16to8;
TO_UDINT(36), "FrequLimitIncrease32to16", TO_UDINT(10000),//|HW_Network.ST1516.FrequLimitIncrease32to16;
TO_UDINT(36), "FrequLimitIncrease64to32", TO_UDINT(5000),//|HW_Network.ST1516.FrequLimitIncrease64to32;
TO_UDINT(36), "FrequLimitDecrease1to2", TO_UDINT(0),//|HW_Network.ST1516.FrequLimitDecrease1to2;
TO_UDINT(36), "FrequLimitDecrease2to4", TO_UDINT(0),//|HW_Network.ST1516.FrequLimitDecrease2to4;
TO_UDINT(36), "FrequLimitDecrease4to8", TO_UDINT(0),//|HW_Network.ST1516.FrequLimitDecrease4to8;
TO_UDINT(36), "FrequLimitDecrease8to16", TO_UDINT(0),//|HW_Network.ST1516.FrequLimitDecrease8to16;
TO_UDINT(36), "FrequLimitDecrease16to32", TO_UDINT(0),//|HW_Network.ST1516.FrequLimitDecrease16to32;
TO_UDINT(36), "FrequLimitDecrease32to64", TO_UDINT(0),//|HW_Network.ST1516.FrequLimitDecrease32to64;
TO_UDINT(36), "Place", TO_UDINT(8),//|HW_Network.ST1516.Place;
TO_UDINT(36), "Required", TO_UDINT(1),//|HW_Network.ST1516.Required;
TO_UDINT(36), "InvertEncoder", TO_UDINT(0),//|HW_Network.ST1516.InvertEncoder;
TO_UDINT(36), "InvertZeroPosition", TO_UDINT(0),//|HW_Network.ST1516.InvertZeroPosition;
TO_UDINT(36), "EncoderSampling", TO_UDINT(3),//|HW_Network.ST1516.EncoderSampling;
TO_UDINT(36), "EncMode", TO_UDINT(0),//|HW_Network.ST1516.EncMode;
TO_UDINT(36), "LatchType", TO_UDINT(0),//|HW_Network.ST1516.LatchType;
TO_UDINT(36), "ABCountMode", TO_UDINT(1),//|HW_Network.ST1516.ABCountMode;
TO_UDINT(36), "StallCurrentReduction", TO_UDINT(0),//|HW_Network.ST1516.StallCurrentReduction;
TO_UDINT(36), "StallCurrentWindow", TO_UDINT(0),//|HW_Network.ST1516.StallCurrentWindow;
TO_UDINT(36), "EnableRegenResistor", TO_UDINT(0),//|HW_Network.ST1516.EnableRegenResistor;
TO_UDINT(36), "RegenResistance", TO_UDINT(150),//|HW_Network.ST1516.RegenResistance;
TO_UDINT(36), "RatedMaxPower", TO_UDINT(1000),//|HW_Network.ST1516.RatedMaxPower;
TO_UDINT(36), "LoadThresholdWarning", TO_UDINT(80),//|HW_Network.ST1516.LoadThresholdWarning;
TO_UDINT(36), "LoadThresholdBridge", TO_UDINT(90),//|HW_Network.ST1516.LoadThresholdBridge;
TO_UDINT(36), "LoadThresholdResistor", TO_UDINT(100),//|HW_Network.ST1516.LoadThresholdResistor;
TO_UDINT(36), "SteppingHysteresis", TO_UDINT(64),//|HW_Network.ST1516.SteppingHysteresis;
TO_UDINT(36), "CompModeVST", TO_UDINT(0),//|HW_Network.ST1516.CompModeVST;
TO_UDINT(36), "UseOszi", TO_UDINT(0),//|HW_Network.ST1516.UseOszi;
TO_UDINT(37), "LEDControl", TO_UDINT(0),//|HW_Network.ST1517.LEDControl;
TO_UDINT(37), "CurrentIncrease", TO_UDINT(1),//|HW_Network.ST1517.CurrentIncrease;
TO_UDINT(37), "HWRampdownDeltaFrequency", TO_UDINT(40),//|HW_Network.ST1517.HWRampdownDeltaFrequency;
TO_UDINT(37), "HWRampdownDeltaTime", TO_UDINT(1),//|HW_Network.ST1517.HWRampdownDeltaTime;
TO_UDINT(37), "MaxCurrent", TO_UDINT(700),//|HW_Network.ST1517.MaxCurrent;
TO_UDINT(37), "CurrentOffsetAdjBridge1", TO_UDINT(100),//|HW_Network.ST1517.CurrentOffsetAdjBridge1;
TO_UDINT(37), "CurrentOffsetAdjBridge2", TO_UDINT(100),//|HW_Network.ST1517.CurrentOffsetAdjBridge2;
TO_UDINT(37), "ChopperOffTime", TO_UDINT(1562),//|HW_Network.ST1517.ChopperOffTime;
TO_UDINT(37), "ChopperOnTimeMin", TO_UDINT(180),//|HW_Network.ST1517.ChopperOnTimeMin;
TO_UDINT(37), "FastDecayTime", TO_UDINT(200),//|HW_Network.ST1517.FastDecayTime;
TO_UDINT(37), "FastDecayTimeFallingStep", TO_UDINT(600),//|HW_Network.ST1517.FastDecayTimeFallingStep;
TO_UDINT(37), "FastDecayCurrentThreshold", TO_UDINT(250),//|HW_Network.ST1517.FastDecayCurrentThreshold;
TO_UDINT(37), "EnableSteps", TO_UDINT(2#1000111),//|HW_Network.ST1517.EnableSteps;
TO_UDINT(37), "FrequLimitIncrease2to1", TO_UDINT(50000),//|HW_Network.ST1517.FrequLimitIncrease2to1;
TO_UDINT(37), "FrequLimitIncrease4to2", TO_UDINT(40000),//|HW_Network.ST1517.FrequLimitIncrease4to2;
TO_UDINT(37), "FrequLimitIncrease8to4", TO_UDINT(30000),//|HW_Network.ST1517.FrequLimitIncrease8to4;
TO_UDINT(37), "FrequLimitIncrease16to8", TO_UDINT(20000),//|HW_Network.ST1517.FrequLimitIncrease16to8;
TO_UDINT(37), "FrequLimitIncrease32to16", TO_UDINT(10000),//|HW_Network.ST1517.FrequLimitIncrease32to16;
TO_UDINT(37), "FrequLimitIncrease64to32", TO_UDINT(5000),//|HW_Network.ST1517.FrequLimitIncrease64to32;
TO_UDINT(37), "FrequLimitDecrease1to2", TO_UDINT(0),//|HW_Network.ST1517.FrequLimitDecrease1to2;
TO_UDINT(37), "FrequLimitDecrease2to4", TO_UDINT(0),//|HW_Network.ST1517.FrequLimitDecrease2to4;
TO_UDINT(37), "FrequLimitDecrease4to8", TO_UDINT(0),//|HW_Network.ST1517.FrequLimitDecrease4to8;
TO_UDINT(37), "FrequLimitDecrease8to16", TO_UDINT(0),//|HW_Network.ST1517.FrequLimitDecrease8to16;
TO_UDINT(37), "FrequLimitDecrease16to32", TO_UDINT(0),//|HW_Network.ST1517.FrequLimitDecrease16to32;
TO_UDINT(37), "FrequLimitDecrease32to64", TO_UDINT(0),//|HW_Network.ST1517.FrequLimitDecrease32to64;
TO_UDINT(37), "Place", TO_UDINT(9),//|HW_Network.ST1517.Place;
TO_UDINT(37), "Required", TO_UDINT(1),//|HW_Network.ST1517.Required;
TO_UDINT(37), "InvertEncoder", TO_UDINT(0),//|HW_Network.ST1517.InvertEncoder;
TO_UDINT(37), "InvertZeroPosition", TO_UDINT(0),//|HW_Network.ST1517.InvertZeroPosition;
TO_UDINT(37), "EncoderSampling", TO_UDINT(3),//|HW_Network.ST1517.EncoderSampling;
TO_UDINT(37), "EncMode", TO_UDINT(0),//|HW_Network.ST1517.EncMode;
TO_UDINT(37), "LatchType", TO_UDINT(0),//|HW_Network.ST1517.LatchType;
TO_UDINT(37), "ABCountMode", TO_UDINT(1),//|HW_Network.ST1517.ABCountMode;
TO_UDINT(37), "StallCurrentReduction", TO_UDINT(0),//|HW_Network.ST1517.StallCurrentReduction;
TO_UDINT(37), "StallCurrentWindow", TO_UDINT(0),//|HW_Network.ST1517.StallCurrentWindow;
TO_UDINT(37), "EnableRegenResistor", TO_UDINT(0),//|HW_Network.ST1517.EnableRegenResistor;
TO_UDINT(37), "RegenResistance", TO_UDINT(150),//|HW_Network.ST1517.RegenResistance;
TO_UDINT(37), "RatedMaxPower", TO_UDINT(1000),//|HW_Network.ST1517.RatedMaxPower;
TO_UDINT(37), "LoadThresholdWarning", TO_UDINT(80),//|HW_Network.ST1517.LoadThresholdWarning;
TO_UDINT(37), "LoadThresholdBridge", TO_UDINT(90),//|HW_Network.ST1517.LoadThresholdBridge;
TO_UDINT(37), "LoadThresholdResistor", TO_UDINT(100),//|HW_Network.ST1517.LoadThresholdResistor;
TO_UDINT(37), "SteppingHysteresis", TO_UDINT(64),//|HW_Network.ST1517.SteppingHysteresis;
TO_UDINT(37), "CompModeVST", TO_UDINT(0),//|HW_Network.ST1517.CompModeVST;
TO_UDINT(37), "UseOszi", TO_UDINT(0),//|HW_Network.ST1517.UseOszi;
TO_UDINT(38), "LEDControl", TO_UDINT(0),//|HW_Network.ST1518.LEDControl;
TO_UDINT(38), "CurrentIncrease", TO_UDINT(1),//|HW_Network.ST1518.CurrentIncrease;
TO_UDINT(38), "HWRampdownDeltaFrequency", TO_UDINT(40),//|HW_Network.ST1518.HWRampdownDeltaFrequency;
TO_UDINT(38), "HWRampdownDeltaTime", TO_UDINT(1),//|HW_Network.ST1518.HWRampdownDeltaTime;
TO_UDINT(38), "MaxCurrent", TO_UDINT(600),//|HW_Network.ST1518.MaxCurrent;
TO_UDINT(38), "CurrentOffsetAdjBridge1", TO_UDINT(100),//|HW_Network.ST1518.CurrentOffsetAdjBridge1;
TO_UDINT(38), "CurrentOffsetAdjBridge2", TO_UDINT(100),//|HW_Network.ST1518.CurrentOffsetAdjBridge2;
TO_UDINT(38), "ChopperOffTime", TO_UDINT(1562),//|HW_Network.ST1518.ChopperOffTime;
TO_UDINT(38), "ChopperOnTimeMin", TO_UDINT(180),//|HW_Network.ST1518.ChopperOnTimeMin;
TO_UDINT(38), "FastDecayTime", TO_UDINT(200),//|HW_Network.ST1518.FastDecayTime;
TO_UDINT(38), "FastDecayTimeFallingStep", TO_UDINT(600),//|HW_Network.ST1518.FastDecayTimeFallingStep;
TO_UDINT(38), "FastDecayCurrentThreshold", TO_UDINT(250),//|HW_Network.ST1518.FastDecayCurrentThreshold;
TO_UDINT(38), "EnableSteps", TO_UDINT(2#1000111),//|HW_Network.ST1518.EnableSteps;
TO_UDINT(38), "FrequLimitIncrease2to1", TO_UDINT(50000),//|HW_Network.ST1518.FrequLimitIncrease2to1;
TO_UDINT(38), "FrequLimitIncrease4to2", TO_UDINT(40000),//|HW_Network.ST1518.FrequLimitIncrease4to2;
TO_UDINT(38), "FrequLimitIncrease8to4", TO_UDINT(30000),//|HW_Network.ST1518.FrequLimitIncrease8to4;
TO_UDINT(38), "FrequLimitIncrease16to8", TO_UDINT(20000),//|HW_Network.ST1518.FrequLimitIncrease16to8;
TO_UDINT(38), "FrequLimitIncrease32to16", TO_UDINT(10000),//|HW_Network.ST1518.FrequLimitIncrease32to16;
TO_UDINT(38), "FrequLimitIncrease64to32", TO_UDINT(5000),//|HW_Network.ST1518.FrequLimitIncrease64to32;
TO_UDINT(38), "FrequLimitDecrease1to2", TO_UDINT(0),//|HW_Network.ST1518.FrequLimitDecrease1to2;
TO_UDINT(38), "FrequLimitDecrease2to4", TO_UDINT(0),//|HW_Network.ST1518.FrequLimitDecrease2to4;
TO_UDINT(38), "FrequLimitDecrease4to8", TO_UDINT(0),//|HW_Network.ST1518.FrequLimitDecrease4to8;
TO_UDINT(38), "FrequLimitDecrease8to16", TO_UDINT(0),//|HW_Network.ST1518.FrequLimitDecrease8to16;
TO_UDINT(38), "FrequLimitDecrease16to32", TO_UDINT(0),//|HW_Network.ST1518.FrequLimitDecrease16to32;
TO_UDINT(38), "FrequLimitDecrease32to64", TO_UDINT(0),//|HW_Network.ST1518.FrequLimitDecrease32to64;
TO_UDINT(38), "Place", TO_UDINT(10),//|HW_Network.ST1518.Place;
TO_UDINT(38), "Required", TO_UDINT(1),//|HW_Network.ST1518.Required;
TO_UDINT(38), "InvertEncoder", TO_UDINT(0),//|HW_Network.ST1518.InvertEncoder;
TO_UDINT(38), "InvertZeroPosition", TO_UDINT(0),//|HW_Network.ST1518.InvertZeroPosition;
TO_UDINT(38), "EncoderSampling", TO_UDINT(3),//|HW_Network.ST1518.EncoderSampling;
TO_UDINT(38), "EncMode", TO_UDINT(0),//|HW_Network.ST1518.EncMode;
TO_UDINT(38), "LatchType", TO_UDINT(0),//|HW_Network.ST1518.LatchType;
TO_UDINT(38), "ABCountMode", TO_UDINT(1),//|HW_Network.ST1518.ABCountMode;
TO_UDINT(38), "StallCurrentReduction", TO_UDINT(0),//|HW_Network.ST1518.StallCurrentReduction;
TO_UDINT(38), "StallCurrentWindow", TO_UDINT(0),//|HW_Network.ST1518.StallCurrentWindow;
TO_UDINT(38), "EnableRegenResistor", TO_UDINT(0),//|HW_Network.ST1518.EnableRegenResistor;
TO_UDINT(38), "RegenResistance", TO_UDINT(150),//|HW_Network.ST1518.RegenResistance;
TO_UDINT(38), "RatedMaxPower", TO_UDINT(1000),//|HW_Network.ST1518.RatedMaxPower;
TO_UDINT(38), "LoadThresholdWarning", TO_UDINT(80),//|HW_Network.ST1518.LoadThresholdWarning;
TO_UDINT(38), "LoadThresholdBridge", TO_UDINT(90),//|HW_Network.ST1518.LoadThresholdBridge;
TO_UDINT(38), "LoadThresholdResistor", TO_UDINT(100),//|HW_Network.ST1518.LoadThresholdResistor;
TO_UDINT(38), "SteppingHysteresis", TO_UDINT(64),//|HW_Network.ST1518.SteppingHysteresis;
TO_UDINT(38), "CompModeVST", TO_UDINT(0),//|HW_Network.ST1518.CompModeVST;
TO_UDINT(38), "UseOszi", TO_UDINT(0),//|HW_Network.ST1518.UseOszi;
TO_UDINT(39), "LEDControl", TO_UDINT(0),//|HW_Network.ST1519.LEDControl;
TO_UDINT(39), "CurrentIncrease", TO_UDINT(1),//|HW_Network.ST1519.CurrentIncrease;
TO_UDINT(39), "HWRampdownDeltaFrequency", TO_UDINT(40),//|HW_Network.ST1519.HWRampdownDeltaFrequency;
TO_UDINT(39), "HWRampdownDeltaTime", TO_UDINT(1),//|HW_Network.ST1519.HWRampdownDeltaTime;
TO_UDINT(39), "MaxCurrent", TO_UDINT(600),//|HW_Network.ST1519.MaxCurrent;
TO_UDINT(39), "CurrentOffsetAdjBridge1", TO_UDINT(100),//|HW_Network.ST1519.CurrentOffsetAdjBridge1;
TO_UDINT(39), "CurrentOffsetAdjBridge2", TO_UDINT(100),//|HW_Network.ST1519.CurrentOffsetAdjBridge2;
TO_UDINT(39), "ChopperOffTime", TO_UDINT(1562),//|HW_Network.ST1519.ChopperOffTime;
TO_UDINT(39), "ChopperOnTimeMin", TO_UDINT(180),//|HW_Network.ST1519.ChopperOnTimeMin;
TO_UDINT(39), "FastDecayTime", TO_UDINT(200),//|HW_Network.ST1519.FastDecayTime;
TO_UDINT(39), "FastDecayTimeFallingStep", TO_UDINT(600),//|HW_Network.ST1519.FastDecayTimeFallingStep;
TO_UDINT(39), "FastDecayCurrentThreshold", TO_UDINT(250),//|HW_Network.ST1519.FastDecayCurrentThreshold;
TO_UDINT(39), "EnableSteps", TO_UDINT(2#1000111),//|HW_Network.ST1519.EnableSteps;
TO_UDINT(39), "FrequLimitIncrease2to1", TO_UDINT(50000),//|HW_Network.ST1519.FrequLimitIncrease2to1;
TO_UDINT(39), "FrequLimitIncrease4to2", TO_UDINT(40000),//|HW_Network.ST1519.FrequLimitIncrease4to2;
TO_UDINT(39), "FrequLimitIncrease8to4", TO_UDINT(30000),//|HW_Network.ST1519.FrequLimitIncrease8to4;
TO_UDINT(39), "FrequLimitIncrease16to8", TO_UDINT(20000),//|HW_Network.ST1519.FrequLimitIncrease16to8;
TO_UDINT(39), "FrequLimitIncrease32to16", TO_UDINT(10000),//|HW_Network.ST1519.FrequLimitIncrease32to16;
TO_UDINT(39), "FrequLimitIncrease64to32", TO_UDINT(5000),//|HW_Network.ST1519.FrequLimitIncrease64to32;
TO_UDINT(39), "FrequLimitDecrease1to2", TO_UDINT(0),//|HW_Network.ST1519.FrequLimitDecrease1to2;
TO_UDINT(39), "FrequLimitDecrease2to4", TO_UDINT(0),//|HW_Network.ST1519.FrequLimitDecrease2to4;
TO_UDINT(39), "FrequLimitDecrease4to8", TO_UDINT(0),//|HW_Network.ST1519.FrequLimitDecrease4to8;
TO_UDINT(39), "FrequLimitDecrease8to16", TO_UDINT(0),//|HW_Network.ST1519.FrequLimitDecrease8to16;
TO_UDINT(39), "FrequLimitDecrease16to32", TO_UDINT(0),//|HW_Network.ST1519.FrequLimitDecrease16to32;
TO_UDINT(39), "FrequLimitDecrease32to64", TO_UDINT(0),//|HW_Network.ST1519.FrequLimitDecrease32to64;
TO_UDINT(39), "Place", TO_UDINT(11),//|HW_Network.ST1519.Place;
TO_UDINT(39), "Required", TO_UDINT(1),//|HW_Network.ST1519.Required;
TO_UDINT(39), "InvertEncoder", TO_UDINT(0),//|HW_Network.ST1519.InvertEncoder;
TO_UDINT(39), "InvertZeroPosition", TO_UDINT(0),//|HW_Network.ST1519.InvertZeroPosition;
TO_UDINT(39), "EncoderSampling", TO_UDINT(3),//|HW_Network.ST1519.EncoderSampling;
TO_UDINT(39), "EncMode", TO_UDINT(0),//|HW_Network.ST1519.EncMode;
TO_UDINT(39), "LatchType", TO_UDINT(0),//|HW_Network.ST1519.LatchType;
TO_UDINT(39), "ABCountMode", TO_UDINT(1),//|HW_Network.ST1519.ABCountMode;
TO_UDINT(39), "StallCurrentReduction", TO_UDINT(0),//|HW_Network.ST1519.StallCurrentReduction;
TO_UDINT(39), "StallCurrentWindow", TO_UDINT(0),//|HW_Network.ST1519.StallCurrentWindow;
TO_UDINT(39), "EnableRegenResistor", TO_UDINT(0),//|HW_Network.ST1519.EnableRegenResistor;
TO_UDINT(39), "RegenResistance", TO_UDINT(150),//|HW_Network.ST1519.RegenResistance;
TO_UDINT(39), "RatedMaxPower", TO_UDINT(1000),//|HW_Network.ST1519.RatedMaxPower;
TO_UDINT(39), "LoadThresholdWarning", TO_UDINT(80),//|HW_Network.ST1519.LoadThresholdWarning;
TO_UDINT(39), "LoadThresholdBridge", TO_UDINT(90),//|HW_Network.ST1519.LoadThresholdBridge;
TO_UDINT(39), "LoadThresholdResistor", TO_UDINT(100),//|HW_Network.ST1519.LoadThresholdResistor;
TO_UDINT(39), "SteppingHysteresis", TO_UDINT(64),//|HW_Network.ST1519.SteppingHysteresis;
TO_UDINT(39), "CompModeVST", TO_UDINT(0),//|HW_Network.ST1519.CompModeVST;
TO_UDINT(39), "UseOszi", TO_UDINT(0),//|HW_Network.ST1519.UseOszi;
TO_UDINT(49), "SingleRealloc", TO_UDINT(1),//|HW_Network._base\AI0841\SerialNoStr.SingleRealloc;
TO_UDINT(50), "SingleRealloc", TO_UDINT(1),//|HW_Network._base\DI1601\SerialNoStr.SingleRealloc;
TO_UDINT(51), "SingleRealloc", TO_UDINT(1),//|HW_Network._base\_base\ST1511\SerialNoStr.SingleRealloc;
TO_UDINT(52), "SingleRealloc", TO_UDINT(1),//|HW_Network._base\_base\ST1512\SerialNoStr.SingleRealloc;
TO_UDINT(53), "SingleRealloc", TO_UDINT(1),//|HW_Network._base\_base\ST1513\SerialNoStr.SingleRealloc;
TO_UDINT(54), "SingleRealloc", TO_UDINT(1),//|HW_Network._base\_base\ST1514\SerialNoStr.SingleRealloc;
TO_UDINT(55), "SingleRealloc", TO_UDINT(1),//|HW_Network._base\_base\ST1515\SerialNoStr.SingleRealloc;
TO_UDINT(56), "SingleRealloc", TO_UDINT(1),//|HW_Network._base\_base\ST1516\SerialNoStr.SingleRealloc;
TO_UDINT(57), "SingleRealloc", TO_UDINT(1),//|HW_Network._base\_base\ST1517\SerialNoStr.SingleRealloc;
TO_UDINT(58), "SingleRealloc", TO_UDINT(1),//|HW_Network._base\_base\ST1518\SerialNoStr.SingleRealloc;
TO_UDINT(59), "SingleRealloc", TO_UDINT(1),//|HW_Network._base\_base\ST1519\SerialNoStr.SingleRealloc;
TO_UDINT(60), "SingleRealloc", TO_UDINT(1),//|HW_Network._base\TO1271\SerialNoStr.SingleRealloc;
TO_UDINT(61), "LEDControl", TO_UDINT(0),//|HW_Network.TO1271.LEDControl;
TO_UDINT(61), "Place", TO_UDINT(2),//|HW_Network.TO1271.Place;
TO_UDINT(61), "Required", TO_UDINT(1),//|HW_Network.TO1271.Required;
TO_UDINT(62), "VaranManagerTime", TO_UDINT(1000000),//|HW_Network.VaranManager_11.VaranManagerTime;
TO_UDINT(62), "VaranManagerNr", TO_UDINT(0),//|HW_Network.VaranManager_11.VaranManagerNr;
TO_UDINT(62), "PayloadFrame", TO_UDINT(0),//|HW_Network.VaranManager_11.PayloadFrame;
TO_UDINT(62), "CoreSelect", TO_UDINT(0),//|HW_Network.VaranManager_11.CoreSelect;
TO_UDINT(62), "InterframeGap", TO_UDINT(0),//|HW_Network.VaranManager_11.InterframeGap;

//Symbolic initialization values
0$UDINT,
0$UDINT,

//Initialization of string values
0$UDINT,
0$UDINT,

//Configuration of tasks (RealTime, Cyclic, Background)
0$UDINT,
1$UDINT,
TO_UDINT(14), (1)$UDINT, 4194304$DINT, 	//HWCONTROL1\HWRTPOSTSCAN

0$UDINT,
0$UDINT,

0$UDINT,
0$UDINT,

//External connections
0$UDINT,
0$UDINT,

//Magic internal connections
0$UDINT,
4$UDINT,
TO_UDINT(27), "UdpSafetyPort", TO_UDINT(13), "UdpSafetyPort",
TO_UDINT(27), "InterfaceNo", TO_UDINT(13), "InterfaceNo",
TO_UDINT(27), "SafetyDomainTimeout", TO_UDINT(13), "SafetyDomainTimeout",
TO_UDINT(29), "AutoFarMem", TO_UDINT(30), "AutoFarMem",

//Configuration of timeslots of tasks (RealTime, Cyclic)
#ifdef __LSLLDR_TIMESLOTS__
0$UDINT,
0$UDINT,

0$UDINT,
0$UDINT,

#endif //__LSLLDR_TIMESLOTS__

//MultiMaster connections
#ifdef __LSLLDR_MULTIMASTER__
0$UDINT,
0$UDINT,
#endif //__LSLLDR_MULTIMASTER__

//Configuration for task ID (RealTime, CyclicTime)
#ifdef __LSLLDR_TASKID__
"\\\\TASKS2  "
0$UDINT,
1$UDINT,
(0)$UDINT, 	//HWCONTROL1\HWRTPOSTSCAN

0$UDINT,
0$UDINT,

0$UDINT,
0$UDINT,

#endif //__LSLLDR_TASKID__

END_FUNCTION