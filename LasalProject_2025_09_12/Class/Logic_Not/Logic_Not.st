//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Logic_Not"
	Revision           = "1.0"
	GUID               = "{FAF19E80-3D4A-11D4-AB39-00A024AEA053}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\Logic_Not\logic not.ico"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)"
	Comment            = "V1.0 Logic NOT Class&#13;&#10;Inverter&#13;&#10;">
	<Channels>
		<Server Name="Result" GUID="{FAF19E81-3D4A-11D4-AB39-00A024AEA053}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="inverted value of op1"/>
		<Client Name="op1" Required="false" Internal="false" Comment="operand for invertation"/>
	</Channels>
</Class>
*)
Logic_Not : CLASS
  //Servers:
	Result 	: SvrChCmd_DINT;
  //Clients:
	op1 	: CltCh_DINT;
  //Variables:
  //Functions:
				//! <Function Comment=" ******************************************************************&#13;&#10;                      NOT Linkage&#13;&#10; ******************************************************************&#13;&#10;  CLIENT: Op1   -&gt; value to be inverted&#13;&#10;  SERVER: Result&#13;&#10;           Class supports two way mode (read and write).&#13;&#10; ******************************************************************&#13;&#10;    created    :   BS  :     KW 35/01&#13;&#10; ******************************************************************&#13;&#10;                    operation of READ function&#13;&#10; ******************************************************************&#13;&#10;   tested: BS | 29.11.2001 | Lasal V00.53 | OPS V4.00&#13;&#10; ******************************************************************&#13;&#10; ******************************************************************&#13;&#10;                    NOT Verknüpfung&#13;&#10; ******************************************************************&#13;&#10;  CLIENT: Op1   -&gt; Wert wird invertiert&#13;&#10;  SERVER: Resultat&#13;&#10;       Klasse unterstützt 2 Wege Modus (lesen und schreiben).&#13;&#10; ******************************************************************&#13;&#10;    erstellt    :   BS  :     KW 35/01&#13;&#10; ******************************************************************&#13;&#10;                           READ Funktion&#13;&#10; ******************************************************************&#13;&#10;   getested: BS | 29.11.2001 | Lasal V00.53 | OPS V4.00&#13;&#10; ******************************************************************&#13;&#10;" Name="Result.Read"/>
	FUNCTION VIRTUAL GLOBAL Result::Read
		VAR_OUTPUT
			EAX 	: DINT;
		END_VAR;
				//! <Function Comment=" ******************************************************************&#13;&#10;                    NOT function&#13;&#10; ******************************************************************&#13;&#10;  CLIENT: writes the inverted inputvalue&#13;&#10;  SERVER: do the write function&#13;&#10;           Class supports two way mode (read and write).&#13;&#10; ******************************************************************&#13;&#10;    created    :   BS  :     KW 35/01&#13;&#10; ******************************************************************&#13;&#10;                    operation of WRITE function&#13;&#10; ******************************************************************&#13;&#10;   tested: BS | 29.11.2001 | Lasal V00.53 | OPS V4.00&#13;&#10; ******************************************************************&#13;&#10; ******************************************************************&#13;&#10;                    NOT Verknüpfung&#13;&#10; ******************************************************************&#13;&#10;  CLIENT: Schreibt den invertierten &quot;input&quot; Wert&#13;&#10;  SERVER: rufen sie die Writefunktion&#13;&#10;       Klasse unterstützt 2 Wege Modus (lesen und schreiben).&#13;&#10; ******************************************************************&#13;&#10;    erstellt    :   BS  :     KW 35/01&#13;&#10; ******************************************************************&#13;&#10;                           WRITE Funktion&#13;&#10; ******************************************************************&#13;&#10;   getested: BS | 29.11.2001 | Lasal V00.53 | OPS V4.00&#13;&#10; ******************************************************************&#13;&#10;" Name="Result.Write"/>
	FUNCTION VIRTUAL GLOBAL Result::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result1 (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Logic_Not::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_LOGIC_NOT
1$UINT, 0$UINT, (SIZEOF(::Logic_Not))$UINT, 
1$UINT, 1$UINT, 0$UINT, 
TO_UDINT(1782021935), "Logic_Not", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Logic_Not.Result.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(3817997973), "Result", 
//Clients:
(::Logic_Not.op1.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1877102209), "op1", 
END_FUNCTION


#define USER_CNT_Logic_Not 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Logic_Not] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Logic_Not::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_Logic_Not, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Read		:= #Read();
	vmt.CmdTable.Write		:= #Write();
	Result.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Result.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


//*********************Inserted from .\code\C_Logic_Not.st*********************



 



//[#ENGLISH]
// ******************************************************************
//                			   NOT Linkage
// ******************************************************************
//		CLIENT:	Op1	  -> value to be inverted
//		SERVER: Result
//           Class supports two way mode (read and write).
// ******************************************************************
//  		created 		 :		 BS		:   		KW 35/01
// ******************************************************************
//                    operation of READ function
// ******************************************************************
//   tested: BS | 29.11.2001 | Lasal V00.53 | OPS V4.00
// ******************************************************************
//[#DEUTSCH]
// ******************************************************************
//                			 NOT Verknüpfung
// ******************************************************************
//		CLIENT:	Op1	  -> Wert wird invertiert
//		SERVER: Resultat
//       Klasse unterstützt 2 Wege Modus (lesen und schreiben).
// ******************************************************************
//  		erstellt 		 :		 BS		:   		KW 35/01
// ******************************************************************
//                           READ Funktion
// ******************************************************************
//   getested: BS | 29.11.2001 | Lasal V00.53 | OPS V4.00
// ******************************************************************
FUNCTION Logic_Not::Result::Read
VAR_OUTPUT
  EAX	: DINT; 	// data
END_VAR

	//--- Daten einlesen ------------------
	op1 := op1.read();

	//--- Daten verknuepfen ---------------
	result := NOT(op1) AND 16#0001 ;

    //--- Daten schreiben -------------
	EAX := result.dData$UDINT;


END_FUNCTION //CNot::Read
//[#ENGLISH]
// ******************************************************************
//                			 NOT function
// ******************************************************************
//		CLIENT:	writes the inverted inputvalue
//		SERVER: do the write function
//           Class supports two way mode (read and write).
// ******************************************************************
//  		created 		 :		 BS		:   		KW 35/01
// ******************************************************************
//                    operation of WRITE function
// ******************************************************************
//   tested: BS | 29.11.2001 | Lasal V00.53 | OPS V4.00
// ******************************************************************
//[#DEUTSCH]
// ******************************************************************
//                			 NOT Verknüpfung
// ******************************************************************
//		CLIENT:	Schreibt den invertierten "input" Wert
//		SERVER: rufen sie die Writefunktion
//       Klasse unterstützt 2 Wege Modus (lesen und schreiben).
// ******************************************************************
//  		erstellt 		 :		 BS		:   		KW 35/01
// ******************************************************************
//                           WRITE Funktion
// ******************************************************************
//   getested: BS | 29.11.2001 | Lasal V00.53 | OPS V4.00
// ******************************************************************
FUNCTION VIRTUAL GLOBAL Logic_Not::Result::Write
VAR_INPUT
	input		: DINT;
END_VAR
VAR_OUTPUT
	result1		: DINT;
END_VAR

	Input := NOT(Input) AND 1;

	op1 := op1.write(Input);
	
	op1.dData := result.dData := result1 := input;

END_FUNCTION //VIRTUAL GLOBAL Logic_Not::Result::Write

