//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Mode_selector_class"
	Revision           = "0.0"
	GUID               = "{6570F84F-5976-4149-8B4F-995947B573E5}"
	RealtimeTask       = "false"
	DefRealtime        = "100 ms"
	CyclicTask         = "true"
	DefCyclictime      = "100 ms"
	BackgroundTask     = "false"
	DefBackground      = "100 ms"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(836,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{2A988ECD-986E-4B01-BD07-35F3C186C394}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="Selector" GUID="{43F64A2B-63D1-412E-B151-6BF1CA480964}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="To_Manager_manual_Motor" Required="true" Internal="false"/>
		<Client Name="To_Manager_motori" Required="true" Internal="false"/>
	</Channels>
</Class>
*)
Mode_selector_class : CLASS
	TYPE
	  T_Selector :  //! <Type Public="true" Name="T_Selector"/>
	  (
	    Automatic:=0,
	    Manual:=1,
	    Idle
	  )$UDINT;
	END_TYPE
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	Selector 	: SvrCh_T_Selector_PTofCls_Mode_selector_class;
  //Clients:
	To_Manager_motori 	: CltCh_DINT;
	To_Manager_manual_Motor 	: CltCh_DINT;
  //Variables:
		v_Selector 	: T_Selector;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Selector::Read
		VAR_OUTPUT
			output (EAX) 	: Mode_selector_class::T_Selector;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Mode_selector_class::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_MODE_SELECTOR_CLASS
0$UINT, 0$UINT, (SIZEOF(::Mode_selector_class))$UINT, 
2$UINT, 2$UINT, 0$UINT, 
TO_UDINT(440319548), "Mode_selector_class", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Mode_selector_class.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::Mode_selector_class.Selector.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1352760849), "Selector", 
//Clients:
(::Mode_selector_class.To_Manager_motori.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(688227429), "To_Manager_motori", 
(::Mode_selector_class.To_Manager_manual_Motor.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1362805805), "To_Manager_manual_Motor", 
END_FUNCTION


#define USER_CNT_Mode_selector_class 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Mode_selector_class] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Mode_selector_class::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_Mode_selector_class, pCmd := #vmt.CmdTable);
	vmt.CmdTable.CyWork		:= #CyWork();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Selector.pMeth			:= StoreMethod( #Selector::Read(), #M_WR_DIRECT() );
	IF Selector.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION VIRTUAL GLOBAL Mode_selector_class::Selector::Read
	VAR_OUTPUT
		output (EAX) 	: Mode_selector_class::T_Selector;
	END_VAR

	output := Selector;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Mode_selector_class::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
  
  v_Selector:=Selector.Read();
  
  case v_Selector of
  
    Automatic:
      To_Manager_motori.Write(input:=0);
      To_Manager_manual_Motor.Write(input:=0);
      
    Manual:
      To_Manager_motori.Write(input:=1);
      To_Manager_manual_Motor.Write(input:=1);
      
    Idle:
      
      
  end_case;
  

	state := READY;

END_FUNCTION
