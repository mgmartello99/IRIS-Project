#ifndef  __GPIO_H
#pragma once
#define  __GPIO_H

// Interface
#define INTERFACE_GPIO                       "GPIO"

// defines for possible Error Codes
#define ERR_GPIO_NOT_AVAIL			  -1		// GPIO is not available
#define ERR_GPIO_FUNC_NOT_AVAIL		-2		// Function not available for this GPIO
#define ERR_GPIO_INVAL_PARAM	  	-3		// Parameter is invalid
#define ERR_GPIO_INVAL_SRC		  	-4		// Hardware source
#define ERR_GPIO_INVAL_IDX		  	-5		// invalid index
#define ERR_GPIO_INVAL_BITSIZE		-6		// invalid bitsize
#define ERR_GPIO_INVAL_REGISTER		-7		// invalid register
#define ERR_GPIO_ACCESS_DENIED		-8		// read or write not allowed

// typeFlags for Output
#define GPIO_TYPEFLAG_OUTPUT_ONE_CYCLIC		0x01
// typeFlags for Input
#define GPIO_TYPEFLAG_INPUT_HAS_IRQ			0x01
#define GPIO_TYPEFLAG_INPUT_HAS_LATCHED		0x02

// available registered propberty
#define GPIO_REGTYPE_LATCHED				1
#define GPIO_REGTYPE_RISING					2
#define GPIO_REGTYPE_FALLING				3


// Defines for possible Flags
#define GPIO_FLAG_TRIG_RISING		  0x01	// Trigger IRQ with rising Edge
#define GPIO_FLAG_TRIG_FALLING		0x02	// Trigger IRQ with falling Edge
#define GPIO_FLAG_REMOVE_HANDLER	0x04	// Remove handler for the GPIO

(* Defines for possible Values of a GPIO *)
#define IO_OFF		0
#define IO_ON		  1
#define IO_TOGG		2   // Can be used for GPIO_Set to toggle an Output

// GPIO id syntax
#define SIGM_INOUTPUT_MASK_ID					0x00000FFF		// id
#define SIGM_INOUTPUT_MASK_TYPE					0x0000F000		// Type of ID, input, output, pwm, ...
#define SIGM_INOUTPUT_MASK_SIZE					0x000F0000
#define SIGM_INOUTPUT_MASK_SRC					0xF0000000		// Src 0 = GPIO, 1=FPGA, ...

// INOUTPUT Type
#define SIGM_INOUTPUT_INP						0x00001000
#define SIGM_INOUTPUT_OUTP						0x00002000
#define SIGM_INOUTPUT_PWM						0x00003000

#define SIGM_INOUTPUT_INT1						0x00000000		// every value size is 1 bit
#define SIGM_INOUTPUT_INT8						0x00010000		// every value size is 8 bit
#define SIGM_INOUTPUT_INT16						0x00020000		// every value size is 16 bit
#define SIGM_INOUTPUT_INT32						0x00030000		// every value size is 32 bit
// INOUTPUT Src
#define SIGM_INOUTPUT_SRC_GPIO					0x00000000
#define SIGM_INOUTPUT_SRC_FPGA					0x10000000


// Currently used outputs
#define SIGM_INOUTPUT_I_BATTGOOD				(SIGM_INOUTPUT_INP + 0x001)
#define SIGM_INOUTPUT_I_PWRGOOD					(SIGM_INOUTPUT_INP + 0x002)
#define SIGM_INOUTPUT_I_SPI1_HS_IN1				(SIGM_INOUTPUT_INP + 0x003)
#define SIGM_INOUTPUT_I_SPI1_HS_IN2				(SIGM_INOUTPUT_INP + 0x004)
#define SIGM_INOUTPUT_I_SAFETY_IN1				(SIGM_INOUTPUT_INP + 0x005)
#define SIGM_INOUTPUT_I_SAFETY_IN2				(SIGM_INOUTPUT_INP + 0x006)
#define SIGM_INOUTPUT_I_C25RLINK_IN1			(SIGM_INOUTPUT_INP + 0x007)
#define SIGM_INOUTPUT_I_C25RLINK_IN2			(SIGM_INOUTPUT_INP + 0x008)
#define SIGM_INOUTPUT_I_USONIC1_HS_IN1			(SIGM_INOUTPUT_INP + 0x009)
#define SIGM_INOUTPUT_I_USONIC1_HS_IN2			(SIGM_INOUTPUT_INP + 0x00A)
#define SIGM_INOUTPUT_I_USONIC1_CHIRP1			(SIGM_INOUTPUT_INP + 0x00B)
#define SIGM_INOUTPUT_I_USONIC1_ADC_ACTIVE		(SIGM_INOUTPUT_INP + 0x00C)
#define SIGM_INOUTPUT_I_GENERAL_IN1				(SIGM_INOUTPUT_INP + 0x00D)
#define SIGM_INOUTPUT_I_GENERAL_IN2				(SIGM_INOUTPUT_INP + 0x00E)
#define SIGM_INOUTPUT_I_GENERAL_IN3				(SIGM_INOUTPUT_INP + 0x00F)
#define SIGM_INOUTPUT_I_WAKEUP_CPU				(SIGM_INOUTPUT_INP + 0x010)
#define SIGM_INOUTPUT_I_SAFETY_IN3				(SIGM_INOUTPUT_INP + 0x011)
#define SIGM_INOUTPUT_I_SAFETY_IN4				(SIGM_INOUTPUT_INP + 0x012)
#define SIGM_INOUTPUT_I_GENERAL_IN4				(SIGM_INOUTPUT_INP + 0x013)
#define SIGM_INOUTPUT_I_PWRBUTTON				(SIGM_INOUTPUT_INP + 0x014)
#define SIGM_INOUTPUT_I_UC1_HS2					(SIGM_INOUTPUT_INP + 0x015) 
#define SIGM_INOUTPUT_I_UC2_HS2					(SIGM_INOUTPUT_INP + 0x016) 
#define SIGM_INOUTPUT_I_UC1_HS1					(SIGM_INOUTPUT_INP + 0x017)
#define SIGM_INOUTPUT_I_UC2_HS1					(SIGM_INOUTPUT_INP + 0x018)


// Digital Inputs
#define SIGM_INOUTPUT_I_DIGIN1					(SIGM_INOUTPUT_INP + 0x101)
#define SIGM_INOUTPUT_I_DIGIN2					(SIGM_INOUTPUT_INP + 0x102)
#define SIGM_INOUTPUT_I_DIGIN3					(SIGM_INOUTPUT_INP + 0x103)
#define SIGM_INOUTPUT_I_DIGIN4					(SIGM_INOUTPUT_INP + 0x104)
#define SIGM_INOUTPUT_I_DIGIN5					(SIGM_INOUTPUT_INP + 0x105)
#define SIGM_INOUTPUT_I_DIGIN6					(SIGM_INOUTPUT_INP + 0x106)
#define SIGM_INOUTPUT_I_DIGIN7					(SIGM_INOUTPUT_INP + 0x107)
#define SIGM_INOUTPUT_I_DIGIN8					(SIGM_INOUTPUT_INP + 0x108)

// default INOUTPUT Outputs
#define SIGM_INOUTPUT_O_LED_RUN					(SIGM_INOUTPUT_OUTP + 0x001)
#define SIGM_INOUTPUT_O_LED_STATUS				(SIGM_INOUTPUT_OUTP + 0x002)
#define SIGM_INOUTPUT_O_LED_ERROR				(SIGM_INOUTPUT_OUTP + 0x003)
#define SIGM_INOUTPUT_O_BUZZER1_ENABLE			(SIGM_INOUTPUT_OUTP + 0x004)
#define SIGM_INOUTPUT_O_RGB1_LED_RED			(SIGM_INOUTPUT_OUTP + 0x005)
#define SIGM_INOUTPUT_O_RGB1_LED_GREEN			(SIGM_INOUTPUT_OUTP + 0x006)
#define SIGM_INOUTPUT_O_RGB1_LED_BLUE			(SIGM_INOUTPUT_OUTP + 0x007)
#define SIGM_INOUTPUT_O_SAFETY_CLOCKPULSE_A		(SIGM_INOUTPUT_OUTP + 0x008)
#define SIGM_INOUTPUT_O_SAFETY_CLOCKPULSE_B		(SIGM_INOUTPUT_OUTP + 0x009)
#define SIGM_INOUTPUT_O_SAFETY_CPU_TEST1		(SIGM_INOUTPUT_OUTP + 0x00A)
#define SIGM_INOUTPUT_O_SAFETY_CPU_TEST2		(SIGM_INOUTPUT_OUTP + 0x00B)
#define SIGM_INOUTPUT_O_RS232_ENABLE			(SIGM_INOUTPUT_OUTP + 0x00C)
#define SIGM_INOUTPUT_O_CAN_ENABLE				(SIGM_INOUTPUT_OUTP + 0x00D)
#define SIGM_INOUTPUT_O_LASER1_ENABLE			(SIGM_INOUTPUT_OUTP + 0x00E)
#define SIGM_INOUTPUT_O_LED1_RED				(SIGM_INOUTPUT_OUTP + 0x00F)
#define SIGM_INOUTPUT_O_LED1_GREEN				(SIGM_INOUTPUT_OUTP + 0x010)
#define SIGM_INOUTPUT_O_LED2_RED				(SIGM_INOUTPUT_OUTP + 0x011)
#define SIGM_INOUTPUT_O_LED2_GREEN				(SIGM_INOUTPUT_OUTP + 0x012)
#define SIGM_INOUTPUT_O_USONIC1_24V_EN			(SIGM_INOUTPUT_OUTP + 0x013)
#define SIGM_INOUTPUT_O_USONIC1_HS_OUT1			(SIGM_INOUTPUT_OUTP + 0x014)
#define SIGM_INOUTPUT_O_CAN1_RTERM_ENABLE		(SIGM_INOUTPUT_OUTP + 0x015)
#define SIGM_INOUTPUT_O_CAN2_RTERM_ENABLE		(SIGM_INOUTPUT_OUTP + 0x016)
#define SIGM_INOUTPUT_O_C25R_PA_EN				(SIGM_INOUTPUT_OUTP + 0x017)
#define SIGM_INOUTPUT_O_C25R_LNA_EN				(SIGM_INOUTPUT_OUTP + 0x018)
#define SIGM_INOUTPUT_O_VARANS2_WAKEUP			(SIGM_INOUTPUT_OUTP + 0x019)
#define SIGM_INOUTPUT_O_BKL_ENABLE				(SIGM_INOUTPUT_OUTP + 0x01A)
#define SIGM_INOUTPUT_O_LOGOBEL_PWM1			(SIGM_INOUTPUT_OUTP + 0x01B)
#define SIGM_INOUTPUT_O_LOGOBEL_PWM2			(SIGM_INOUTPUT_OUTP + 0x01C)
#define SIGM_INOUTPUT_O_LOGOBEL_PWM3			(SIGM_INOUTPUT_OUTP + 0x01D)
#define SIGM_INOUTPUT_O_BUZZER2_ENABLE			(SIGM_INOUTPUT_OUTP + 0x01E)
#define SIGM_INOUTPUT_O_SPI1_HS_OUT1			(SIGM_INOUTPUT_OUTP + 0x01F)
#define SIGM_INOUTPUT_O_EXTBOARD_RESET			(SIGM_INOUTPUT_OUTP + 0x020)
#define SIGM_INOUTPUT_O_SAFETY_CPU_TEST3		(SIGM_INOUTPUT_OUTP + 0x021)
#define SIGM_INOUTPUT_O_SAFETY_CPU_TEST4		(SIGM_INOUTPUT_OUTP + 0x022)
#define SIGM_INOUTPUT_O_GENERAL_OUT1			(SIGM_INOUTPUT_OUTP + 0x023)
#define SIGM_INOUTPUT_O_GENERAL_OUT2			(SIGM_INOUTPUT_OUTP + 0x024)
#define SIGM_INOUTPUT_O_GENERAL_OUT3			(SIGM_INOUTPUT_OUTP + 0x025)
#define SIGM_INOUTPUT_O_WLAN_RESET				(SIGM_INOUTPUT_OUTP + 0x026)
#define SIGM_INOUTPUT_O_EXTBOARD_ISP			(SIGM_INOUTPUT_OUTP + 0x027)
#define SIGM_INOUTPUT_O_EXTBOARD_SYNC			(SIGM_INOUTPUT_OUTP + 0x028)
#define SIGM_INOUTPUT_O_EXTBOARD_PWDN			(SIGM_INOUTPUT_OUTP + 0x029)
#define SIGM_INOUTPUT_O_RFID_POWERDOWN			(SIGM_INOUTPUT_OUTP + 0x02A)
#define SIGM_INOUTPUT_O_WLAN_ENABLE				(SIGM_INOUTPUT_OUTP + 0x02B)
#define SIGM_INOUTPUT_O_WLAN_SLEEP				(SIGM_INOUTPUT_OUTP + 0x02C)
#define SIGM_INOUTPUT_O_CHARGE_REGULATOR_ENABLE	(SIGM_INOUTPUT_OUTP + 0x02D)
#define SIGM_INOUTPUT_O_CHARGING_ENABLE			(SIGM_INOUTPUT_OUTP + 0x02E)
#define SIGM_INOUTPUT_O_UC1_HS0					(SIGM_INOUTPUT_OUTP + 0x02F)
#define SIGM_INOUTPUT_O_UC1_HS1					(SIGM_INOUTPUT_OUTP + 0x030)
#define SIGM_INOUTPUT_O_UC2_HS0					(SIGM_INOUTPUT_OUTP + 0x031)
#define SIGM_INOUTPUT_O_UC2_HS1					(SIGM_INOUTPUT_OUTP + 0x032)
#define SIGM_INOUTPUT_O_TEST_PIN1				(SIGM_INOUTPUT_OUTP + 0x033)
#define SIGM_INOUTPUT_O_TEST_PIN2				(SIGM_INOUTPUT_OUTP + 0x034)
#define SIGM_INOUTPUT_O_LED_DCOK				(SIGM_INOUTPUT_OUTP + 0x035)

// Digital Outputs
#define SIGM_INOUTPUT_O_DIGOUT1					(SIGM_INOUTPUT_OUTP + 0x101)
#define SIGM_INOUTPUT_O_DIGOUT2					(SIGM_INOUTPUT_OUTP + 0x102)
#define SIGM_INOUTPUT_O_DIGOUT3					(SIGM_INOUTPUT_OUTP + 0x103)
#define SIGM_INOUTPUT_O_DIGOUT4					(SIGM_INOUTPUT_OUTP + 0x104)
#define SIGM_INOUTPUT_O_DIGOUT5					(SIGM_INOUTPUT_OUTP + 0x105)
#define SIGM_INOUTPUT_O_DIGOUT6					(SIGM_INOUTPUT_OUTP + 0x106)
#define SIGM_INOUTPUT_O_DIGOUT7					(SIGM_INOUTPUT_OUTP + 0x107)
#define SIGM_INOUTPUT_O_DIGOUT8					(SIGM_INOUTPUT_OUTP + 0x108)

TYPE
 #pragma pack (push, 1)
	LSL_GPIO_CB_DATA :	STRUCT
		version : UDINT;
		pCookie : pVoid;
	END_STRUCT;
 #pragma pack (pop)
END_TYPE

TYPE
 #pragma pack (push, 1)
	LSL_LOCALIO_IDINFO :	STRUCT
		id : UDINT;
		typeinfo: UDINT;
    bitSize : USINT;
    typeFlag : USINT;
    dummy0 : USINT;
    dummy1 : USINT;
    irq : UDINT;
    dummy8 : UDINT;
    dummy9 : UDINT;
	END_STRUCT;
 #pragma pack (pop)
END_TYPE

TYPE
	#pragma pack (push, 1)
	LSL_GPIO_TYPE : STRUCT
		version	: UDINT;
		GPIO_Set : pVoid;
		GPIO_Get : pVoid;
		GPIO_InstallCB : pVoid;
    LocalIO_GetCount : pVoid;
    LocalIO_GetInfo : pVoid;
    GPIO_SetReg : pVoid;
    GPIO_GetReg : pVoid;
	END_STRUCT;
	#pragma pack (pop)
END_TYPE

////////////////////////////////////////////////////////////////////////////////
// LASAL Function Prototypes
////////////////////////////////////////////////////////////////////////////////
// Callback Prototype
FUNCTION __CDECL GLOBAL Gpio_Callback
	VAR_INPUT
		pCBData 	: ^LSL_GPIO_CB_DATA;
	END_VAR;
	
FUNCTION __CDECL GLOBAL P_GPIO_Set
	VAR_INPUT
		id	: UDINT;
		value	: UDINT;
	END_VAR
	VAR_OUTPUT
		retval	: DINT;
	END_VAR;

FUNCTION __CDECL GLOBAL P_GPIO_Get
	VAR_INPUT
		id	: UDINT;
		value	: ^UDINT;
	END_VAR
	VAR_OUTPUT
		retval 	: DINT;
	END_VAR;

FUNCTION __CDECL GLOBAL P_GPIO_InstallCB
	VAR_INPUT
		id	: UDINT;
		pCallback 	: pVoid;
		pCBData 	: ^LSL_GPIO_CB_DATA;
		flags	: UDINT;
	END_VAR
	VAR_OUTPUT
		retval 	: DINT;
	END_VAR;
	
// since version 3
FUNCTION __CDECL GLOBAL P_LOCALIO_GETCOUNT
	VAR_OUTPUT
		retval 	: UDINT;
	END_VAR;
  
FUNCTION __CDECL GLOBAL P_LOCALIO_GETINFO
	VAR_INPUT
		idx	: UDINT;
		pInfo 	: ^LSL_LOCALIO_IDINFO;
	END_VAR
	VAR_OUTPUT
		retval 	: DINT;
	END_VAR;

FUNCTION __CDECL GLOBAL P_GPIO_SETREG
	VAR_INPUT
		id	: UDINT;
    reg	: UDINT;
		value : UDINT;
	END_VAR
	VAR_OUTPUT
		retval 	: DINT;
	END_VAR;

FUNCTION __CDECL GLOBAL P_GPIO_GETREG
	VAR_INPUT
		id	: UDINT;
    reg	: UDINT;
		value : ^UDINT;
	END_VAR
	VAR_OUTPUT
		retval 	: DINT;
	END_VAR;


////////////////////////////////////////////////////////////////////////////////
// LASAL MACROS
////////////////////////////////////////////////////////////////////////////////
#define OS_GPIO_SET(pGPIO,p1,p2) pGPIO^.GPIO_Set $ P_GPIO_Set(p1, p2)
#define OS_GPIO_GET(pGPIO,p1,p2) pGPIO^.GPIO_Get $ P_GPIO_Get(p1, p2)
#define OS_GPIO_INSTALLCB(pGPIO,p1,p2,p3,p4) pGPIO^.GPIO_InstallCB $ P_GPIO_InstallCB(p1, p2, p3, p4)

#define OS_LOCALIO_GETCOUNT(pGPIO) pGPIO^.LocalIO_GetCount $ P_LOCALIO_GETCOUNT()
#define OS_LOCALIO_GETINFO(pGPIO,p1,p2) pGPIO^.LocalIO_GetInfo $ P_LOCALIO_GETINFO(p1, p2)

#define OS_GPIO_SETREG(pGPIO,p1,p2,p3) pGPIO^.GPIO_SetReg $ P_GPIO_SetReg(p1, p2, p3)
#define OS_GPIO_GETREG(pGPIO,p1,p2,p3) pGPIO^.GPIO_GetReg $ P_GPIO_GetReg(p1, p2, p3)

#endif
